{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/cactus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/cactus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/css/rtl.styl","path":"css/rtl.styl","modified":0,"renderable":1},{"_id":"themes/cactus/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/apple-touch-icon.png","path":"images/apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/favicon-192x192.png","path":"images/favicon-192x192.png","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff","path":"lib/vazir-font/Vazir-Black.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff2","path":"lib/vazir-font/Vazir-Black.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","path":"lib/vazir-font/Vazir-Bold.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","path":"lib/vazir-font/Vazir-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","path":"lib/vazir-font/Vazir-Light.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","path":"lib/vazir-font/Vazir-Light.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff2","path":"lib/vazir-font/Vazir-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff","path":"lib/vazir-font/Vazir-Medium.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff","path":"lib/vazir-font/Vazir-Thin.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff2","path":"lib/vazir-font/Vazir-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/font-face.css","path":"lib/vazir-font/font-face.css","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff2","path":"lib/vazir-font/Vazir.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff","path":"lib/vazir-font/Vazir.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","path":"lib/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.eot","path":"lib/vazir-font/Vazir-Black.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.ttf","path":"lib/vazir-font/Vazir-Black.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","path":"lib/vazir-font/Vazir-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","path":"lib/vazir-font/Vazir-Bold.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","path":"lib/vazir-font/Vazir-Light.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","path":"lib/vazir-font/Vazir-Light.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.ttf","path":"lib/vazir-font/Vazir-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.eot","path":"lib/vazir-font/Vazir-Medium.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.eot","path":"lib/vazir-font/Vazir-Thin.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.ttf","path":"lib/vazir-font/Vazir-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.eot","path":"lib/vazir-font/Vazir.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.ttf","path":"lib/vazir-font/Vazir.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.eot","path":"lib/font-awesome/webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff","path":"lib/font-awesome/webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","path":"lib/font-awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","path":"lib/justified-gallery/css/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","path":"lib/justified-gallery/js/jquery.justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.eot","path":"lib/font-awesome/webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff","path":"lib/font-awesome/webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","path":"lib/font-awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff","path":"lib/font-awesome/webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.svg","path":"lib/font-awesome/webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.eot","path":"lib/font-awesome/webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGS-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","path":"lib/font-awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGL-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","path":"lib/meslo-LG/MesloLGM-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","path":"lib/meslo-LG/MesloLGL-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGM-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","path":"lib/meslo-LG/MesloLGL-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","path":"lib/meslo-LG/MesloLGM-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","path":"lib/meslo-LG/MesloLGS-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","path":"lib/meslo-LG/MesloLGS-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","path":"lib/meslo-LG/MesloLGM-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","path":"lib/meslo-LG/MesloLGL-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","path":"lib/meslo-LG/MesloLGS-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.svg","path":"lib/font-awesome/webfonts/fa-solid-900.svg","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.svg","path":"lib/font-awesome/webfonts/fa-brands-400.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"9d28548917622df8438248242ccb639212a58b6d","modified":1544498671315},{"_id":"themes/cactus/LICENSE","hash":"346ece39a983b0e7858c11f785cd846cef9eb875","modified":1541004102000},{"_id":"themes/cactus/gulpfile.js","hash":"2bae290993507026a509665ee5a5326b616f8d68","modified":1541004102000},{"_id":"themes/cactus/README.md","hash":"6b0c6ea10c3a68c3788f2c81065bad37699dc6a7","modified":1541004102000},{"_id":"themes/cactus/_config.yml","hash":"20b06b852f084c49efb62186fd3f9da6cfc52e70","modified":1543980588689},{"_id":"themes/cactus/package.json","hash":"5bbdbc429e9d46acf97baf7ac5654edde0781064","modified":1541004102000},{"_id":"source/_posts/.DS_Store","hash":"7262df29ca53870c234997fe87782e15034ad690","modified":1544498964637},{"_id":"source/_posts/associations.md","hash":"e3c00b1f8250d49ec918f8ec1ae138cd6d86c42d","modified":1543984539397},{"_id":"source/_posts/autoreleasePoll.md","hash":"db95a7e93ceb278336114ee54b4e27c615cde76f","modified":1544502730163},{"_id":"source/_posts/c-server.md","hash":"ba5e43d0c5ea4380d681c9a07b87d6bab8d4d26b","modified":1543986157281},{"_id":"source/_posts/copy-mutableCopy.md","hash":"dfcb1b5a4d16913b65126495ce19513e0659e415","modified":1543998114739},{"_id":"source/_posts/duck.md","hash":"a113efb342155c3fde577793660a8f3b735bc206","modified":1543985440039},{"_id":"source/_posts/frame-bounds.md","hash":"7577962d04ba05a6908566a49a98df10d2a0294d","modified":1543984307541},{"_id":"source/_posts/http.md","hash":"62016bf818de08b5e35402f29696b938c28163bb","modified":1543984309859},{"_id":"source/_posts/lipo.md","hash":"d8f6a40e704f02a175f8bcd83576329ab6cb8016","modified":1543984311408},{"_id":"source/_posts/markdown-highlight.md","hash":"770394818ff2f6d8e10ea82759b65a0291d07b4d","modified":1543984731106},{"_id":"source/_posts/post.md","hash":"738e062ca5a6639ea45908ed3344a0b4605e4e82","modified":1543984422228},{"_id":"source/_posts/runtime.md","hash":"6b438f5ffb4386671c60fffe8d0455469d760833","modified":1543984533011},{"_id":"source/_posts/swift-protocol-extentsion.md","hash":"edb8a06b46ac9bcfcee900fad354ac9c9f9c6176","modified":1543984316446},{"_id":"source/_posts/swift循环引用.md","hash":"109ff074e19bd622d2b949e2dcf00ada73f29cb8","modified":1543984317955},{"_id":"source/_posts/京东和喜马拉雅面试题目.md","hash":"58c784f7857d02ab5273dad707f4b42746fbd0c7","modified":1544062630600},{"_id":"source/_posts/内存分配.md","hash":"9fdd8d9c9b4341bca3278eb081830cee0a899f8e","modified":1543984445693},{"_id":"source/_posts/博客搭建.md","hash":"44ec809ae5536d09adbe7beaa715c56986f756ff","modified":1543984801388},{"_id":"source/_posts/引用计数.md","hash":"96fd61fa1ba54d4aeb60287ead58b36693bcd81b","modified":1543986290039},{"_id":"themes/cactus/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1543975320685},{"_id":"themes/cactus/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1543975320678},{"_id":"themes/cactus/.git/config","hash":"06498432e9b757aa0f4195e5646a620eef33e459","modified":1543975328434},{"_id":"themes/cactus/layout/archive.ejs","hash":"b5e70bd2780d044b94e22ce8af0afb114c2a6eae","modified":1541004102000},{"_id":"themes/cactus/layout/index.ejs","hash":"2bb56a08ca4dcd9e37170be04ec791fffce8727a","modified":1541004102000},{"_id":"themes/cactus/scripts/merge-configs.js","hash":"2048c3415d96b17b9d84aa44bc0c25f1210525f8","modified":1541004102000},{"_id":"themes/cactus/scripts/meta.js","hash":"fa6055a39851c9953d033e70c1614547b94dce60","modified":1541004102000},{"_id":"themes/cactus/layout/layout.ejs","hash":"ad0f48fca26b3670c9fbcb3e61bfbaa62dc33ab2","modified":1541004102000},{"_id":"themes/cactus/layout/page.ejs","hash":"c5465d5315a7544aa466b01fd8cfb62917a8bb1d","modified":1541004102000},{"_id":"themes/cactus/scripts/page_title.js","hash":"fa662dbdb82779af1b95e35ed7ccdf4866a53dee","modified":1541004102000},{"_id":"themes/cactus/scripts/thumbnail.js","hash":"df8829fd8c3119650037eba5ec11bdce06acff9d","modified":1541004102000},{"_id":"themes/cactus/layout/post.ejs","hash":"a7d164ce888a60cd3eddd9c04bc6762428fa66bb","modified":1541004102000},{"_id":"themes/cactus/languages/default.yml","hash":"ea91a271db1a49386f97955ed72b2a668e2aea5e","modified":1541004102000},{"_id":"themes/cactus/languages/en.yml","hash":"ea91a271db1a49386f97955ed72b2a668e2aea5e","modified":1541004102000},{"_id":"themes/cactus/languages/ca.yml","hash":"b79dd2c21dc6697c635e92db1f661a4b8d5d2305","modified":1541004102000},{"_id":"themes/cactus/languages/es.yml","hash":"2b1fc8b0d636123e9ee39017fa20053bd1913a5a","modified":1541004102000},{"_id":"themes/cactus/languages/fa.yml","hash":"63f32e50953af1c4bd0308a4fca5862b5287c2cb","modified":1541004102000},{"_id":"themes/cactus/languages/fr.yml","hash":"4fea266d3c522903f3eee4fffee6e66c44775005","modified":1541004102000},{"_id":"themes/cactus/languages/nl.yml","hash":"ac0573352ad2c737a7686bcca498b985e7bd6447","modified":1541004102000},{"_id":"themes/cactus/languages/it.yml","hash":"62800bcae1f2d2454f87f4bcf4d7593848424f61","modified":1541004102000},{"_id":"themes/cactus/languages/pl.yml","hash":"8a2d6dc874d86c38d42c2c861c39590647b5d536","modified":1541004102000},{"_id":"themes/cactus/languages/pt-br.yml","hash":"4859aba788a050c2d5d0b997693b0c8c24b349f7","modified":1541004102000},{"_id":"themes/cactus/languages/ru.yml","hash":"81b57fcd1977ef534f4bf303dbc1b4710cc7f057","modified":1541004102000},{"_id":"themes/cactus/languages/zh-CN.yml","hash":"142004800bd580f8ee2f0eba7345c1725a5e2e5e","modified":1541004102000},{"_id":"themes/cactus/languages/tr.yml","hash":"2702914007e6bade9d6861078c0e179ac05bf48c","modified":1541004102000},{"_id":"source/_posts/autoreleasePoll/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1544498964635},{"_id":"source/_posts/autoreleasePoll/autoreleasepoll0.png","hash":"a396ad2537bc5b73fa850e6a4a79d7d0e0c87fd4","modified":1544496998731},{"_id":"source/_posts/autoreleasePoll/autoreleasepoll3.png","hash":"c2913761a742279b9643f7c4aa6135fd641da5db","modified":1544498917050},{"_id":"source/_posts/c-server/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1543984900653},{"_id":"source/_posts/copy-mutableCopy/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1543997436474},{"_id":"source/_posts/frame-bounds/frame-bounds0.png","hash":"c2ccdb1073b00b20cd1193d472a9787acfc617a3","modified":1543885510000},{"_id":"source/_posts/frame-bounds/frame-bounds1.png","hash":"b587bfcd6662b0d7eff560f6fff1351cd6f24c61","modified":1543885510000},{"_id":"source/_posts/frame-bounds/frame-bounds2.png","hash":"ce8cef3560ff55ef554b1f46ceee7ef11f8bfaef","modified":1543885510000},{"_id":"source/_posts/http/http.png","hash":"fcce1887d61735d4b1eb97563beeabddd7069198","modified":1543885510000},{"_id":"source/_posts/swift循环引用/swiftUnown.png","hash":"21c6d258a580c92c51f108bfc7c1ef290b47a9d0","modified":1543885510000},{"_id":"source/_posts/引用计数/gunretainCount.png","hash":"134aab51f91bbb3f2bf05f0638df3a880d73e8ae","modified":1543885510000},{"_id":"themes/cactus/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1543975320680},{"_id":"themes/cactus/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1543975320679},{"_id":"themes/cactus/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1543975320680},{"_id":"themes/cactus/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1543975320681},{"_id":"themes/cactus/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1543975320682},{"_id":"themes/cactus/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1543975320679},{"_id":"themes/cactus/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1543975320682},{"_id":"themes/cactus/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1543975320679},{"_id":"themes/cactus/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1543975320680},{"_id":"themes/cactus/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1543975320681},{"_id":"themes/cactus/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1543975320683},{"_id":"themes/cactus/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1543975320678},{"_id":"themes/cactus/layout/_partial/comments.ejs","hash":"4cf8d0059e5f8bc8ae1dd1a426293583fd398052","modified":1541004102000},{"_id":"themes/cactus/layout/_partial/footer.ejs","hash":"c3a80e347cb11022baf5e65fb4d0209b8d205693","modified":1541004102000},{"_id":"themes/cactus/layout/_partial/head.ejs","hash":"753dcb513c6f21f6f46e673942c7261cf50da886","modified":1541004102000},{"_id":"themes/cactus/layout/_partial/header.ejs","hash":"9b2b7d6e9ab514107adf408c7ec8530fd612b3d5","modified":1541004102000},{"_id":"themes/cactus/layout/_partial/pagination.ejs","hash":"23bf862b3b8a3cd831850504d9b5a24d21b005e7","modified":1541004102000},{"_id":"themes/cactus/layout/_partial/scripts.ejs","hash":"78e3e290ab8bb6450a04b2a9c7c5b7b3da74abb8","modified":1541004102000},{"_id":"themes/cactus/layout/_partial/search.ejs","hash":"8b4bf9cf5db0ce762a31fc3baae0f2fc004bece4","modified":1541004102000},{"_id":"themes/cactus/layout/_partial/styles.ejs","hash":"be1b54388eb02176dd4722285dda19e3dce2e62e","modified":1541004102000},{"_id":"themes/cactus/source/css/_extend.styl","hash":"2ff73bd3dbdb58fa69cbadb2a1c0ed966812ce88","modified":1541004102000},{"_id":"themes/cactus/source/css/_fonts.styl","hash":"354809b5a64e8a47a66c66fd1a28ac597c1460a6","modified":1541004102000},{"_id":"themes/cactus/source/css/_mixins.styl","hash":"1a9e309523df9685e8d088dcff0a809c58e2c392","modified":1541004102000},{"_id":"themes/cactus/source/css/_util.styl","hash":"2bfeb2e2605dd5235693b00c71a212646d2e0410","modified":1541004102000},{"_id":"themes/cactus/source/css/_variables.styl","hash":"02079fb71b7d1c01d15fa512a1948ad4cbb416b5","modified":1541004102000},{"_id":"themes/cactus/source/css/style.styl","hash":"935843090dc40797a1e85181253ffe169b883131","modified":1541004102000},{"_id":"themes/cactus/source/js/main.js","hash":"584c5a69ac81a483a1c4377a2e2cf326c2795e7b","modified":1541004102000},{"_id":"themes/cactus/source/css/rtl.styl","hash":"98355abe9ef3a398a5b4cb40d3d33bf86ac8d1d4","modified":1541004102000},{"_id":"themes/cactus/source/js/search.js","hash":"a74d0c601f820160825a2e4ad13618074d714933","modified":1541004102000},{"_id":"themes/cactus/source/images/apple-touch-icon.png","hash":"57e2def34682655f41a0be2d083f16765ba7858b","modified":1541004102000},{"_id":"themes/cactus/source/images/favicon-192x192.png","hash":"96e6fcbbb13a5914a6131391e210eb7dfd13d692","modified":1541004102000},{"_id":"source/_posts/autoreleasePoll/autoreleasepoll1.png","hash":"c18d1a5470348b3eae4036cc364129a9c7170080","modified":1544497561401},{"_id":"themes/cactus/source/images/favicon.ico","hash":"189f9842bcb79a6f8f9e8445bc8bbd773443826b","modified":1541004102000},{"_id":"source/_posts/autoreleasePoll/autoreleasepoll2.png","hash":"37090917d7760df91af4e1a7c06b37f87bc25828","modified":1544497575020},{"_id":"source/_posts/runtime/instance&class&metaclass.png","hash":"df6f5f56ba137fee520e4ec10f52a371540f767a","modified":1543885510000},{"_id":"source/_posts/内存分配/cms.png","hash":"fa8be5aca298de146da717571e1fa2b360bb6600","modified":1543885510000},{"_id":"source/_posts/引用计数/appleRetainCount.png","hash":"725ba8aa64713959cf0dad2e9bc9f19433794daa","modified":1543885510000},{"_id":"source/_posts/associations/associations.png","hash":"27a0d76c81a94d11bd3142bc6f00b1232c439bd4","modified":1543885510000},{"_id":"themes/cactus/layout/_partial/post/actions_desktop.ejs","hash":"38aadd1ed890303dde582b722486138afee09b0a","modified":1541004102000},{"_id":"themes/cactus/layout/_partial/post/actions_mobile.ejs","hash":"79b234ff3c264e66b2e71c819228e62bf92b48e4","modified":1541004102000},{"_id":"themes/cactus/layout/_partial/post/category.ejs","hash":"b5bfa049f17868fb09d9d2a7e1d5279fa0381d37","modified":1541004102000},{"_id":"themes/cactus/layout/_partial/post/date.ejs","hash":"12a4a7ba6334e3e5c03d9a9601d7779a27c2e082","modified":1541004102000},{"_id":"themes/cactus/layout/_partial/post/gallery.ejs","hash":"9aecd8908e8a684f33dc20c02497c0f1774137c7","modified":1541004102000},{"_id":"themes/cactus/layout/_partial/post/share.ejs","hash":"847a400e79b775246ca9067e40c3f104d571413d","modified":1541004102000},{"_id":"themes/cactus/layout/_partial/post/tag.ejs","hash":"e08fae30da060f49c087f6c121868b08eb55c795","modified":1541004102000},{"_id":"themes/cactus/layout/_partial/post/title.ejs","hash":"a060f1c6e3718494a6b1d0e1981ea0bf4e549828","modified":1541004102000},{"_id":"themes/cactus/source/css/_colors/light.styl","hash":"d09f781cb02394850737b3a9efc6693307d5bf09","modified":1541004102000},{"_id":"themes/cactus/source/css/_colors/dark.styl","hash":"9c9655b42b85f754b8a573a1d4634c23c680e1bf","modified":1541004102000},{"_id":"themes/cactus/source/css/_colors/classic.styl","hash":"0f0ec41a4165814ce69688425d5ac4d701b7cc70","modified":1541004102000},{"_id":"themes/cactus/source/css/_colors/white.styl","hash":"2b25ad24573bded8b42f9d80112eab9fadbed1a5","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/agate.styl","hash":"53027913ed8d4f75ac3e49e76aad824f0df62da3","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/androidstudio.styl","hash":"2af0861725f97f0ee2ded67c3d2d4548c62b2d16","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/arta.styl","hash":"b3e81e3e694ceb8deed178adb8b91013c5120e30","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-dark.styl","hash":"ce63dd8548688d88254405eedfa75b1d7c82449e","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-dark.styl","hash":"c196ff0ee064af0e507823694ae39020addfc280","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-dark.styl","hash":"0bb16a4eff93688f40787abc2f9e56e7d5cc93e7","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-dark.styl","hash":"effbc5d75fa87203c847039869c22031b40d5b7d","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-dark.styl","hash":"9a2e9a1d0a01bbdf158560c3ed1c134e098b2c68","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-dark.styl","hash":"10ee3882fca7b97a37bd309d2d35fce9868647bb","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-dark.styl","hash":"84c80e6f67f62fce958d25817c277d2360272617","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-dark.styl","hash":"e32c1c70def8060fce5e790979a126da650ac642","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-dark.styl","hash":"2edf385215bbe1985b1a10106525d362667d28c2","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"538a14321193cd8abf2ddc484306631e54149ffb","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/brown-paper.styl","hash":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/codepen-embed.styl","hash":"8b7b34484f76a6c2c3b1a9e49abb9b382f439ae8","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/dark.styl","hash":"f5e6e75958de59e87fc6be3a1668e870e20bc836","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/darkula.styl","hash":"9717efa9194837ba3fb4d762997d33075dcf8bfa","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/far.styl","hash":"aaac3028f5e33123cd123a583cddc9290c45ec8e","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/hopscotch.styl","hash":"1378a6bc67a32c0cbff72ab771268b53f9aa586d","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/hybrid.styl","hash":"b8eb5c69d12f2ee5ebc50265ae271699d7f1a8d3","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/index.styl","hash":"002d5596f6379cc87dbd43d9145bc764aa666be1","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/ir-black.styl","hash":"53e5d74326a4527b92272bbd6946d4fec92720e8","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/kimbie.styl","hash":"51b889ca7c6fe178cfbbe28d875a6ea427184441","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/monokai-sublime.styl","hash":"c385b11345894be7e6ce3c5f08663e199933b8e4","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/monokai.styl","hash":"f87be027848ea6bee623a08ad1e17b2f5b7937ee","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/obsidian.styl","hash":"199e28326be8590883f0813ebbd54fcfaa4750fd","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/paraiso.styl","hash":"75f181eece6b71d033ea0c8d6cf00ae7efb9e29b","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/pojoaque.styl","hash":"4e7b6b046b8575ac749f6aec4e953a62ada27a36","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/railscasts.styl","hash":"b6674db9210e0c4444e4835fff2d1361f3ebd64c","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/rainbow.styl","hash":"c0cf97aae3e10fdcd10414547a711c9effbc39b8","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/school-book.styl","hash":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/solarized-dark.styl","hash":"90c9da5aa594383697e5b18892a7f95beb053f55","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/sunburst.styl","hash":"af3eec0fd56151e55bbd49c31b151f36717611d8","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-blue.styl","hash":"f24c17d0ab815dcfaab3438cb9fe2ab4839f5e0d","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-bright.styl","hash":"7674fecb6d27350727dc0d2dc93bc018382ebbd0","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-eighties.styl","hash":"28d751075ebabf7d0327a36f725076fe82fdf626","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night.styl","hash":"16ba09b2db501e4e3e2e7d62595d9bf935bf27c4","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1541004102000},{"_id":"themes/cactus/source/css/_highlight/zenburn.styl","hash":"68ff9332ccc03f9389b15b713415cde016f8088f","modified":1541004102000},{"_id":"themes/cactus/source/css/_partial/archive.styl","hash":"ef8fc52337c4c7b010cad7c427cb78009b30f9d8","modified":1541004102000},{"_id":"themes/cactus/source/css/_partial/article.styl","hash":"2c0569b6ba624160701e69688ca02ecdf24c2ac6","modified":1541004102000},{"_id":"themes/cactus/source/css/_partial/categories.styl","hash":"a43f00e61b3507f130b8a3f8108a4eeca147c2a0","modified":1541004102000},{"_id":"themes/cactus/source/css/_partial/comments.styl","hash":"1e90f1fb9d4c155df518cacb5a537e9de9c042c1","modified":1541004102000},{"_id":"themes/cactus/source/css/_partial/footer.styl","hash":"d9b13e402808175dc90761cc4fdfe3d4808034f8","modified":1541004102000},{"_id":"themes/cactus/source/css/_partial/index.styl","hash":"59c99f4ea3a73bf47ce030df166c5e33d5de31fb","modified":1541004102000},{"_id":"themes/cactus/source/css/_partial/header.styl","hash":"662667942cc9a2caf55caa84a0fc73617d0c3aa4","modified":1541004102000},{"_id":"themes/cactus/source/css/_partial/pagination.styl","hash":"950bf517bbe7adb9a9aa4eb5ddec74ffc7598787","modified":1541004102000},{"_id":"themes/cactus/source/css/_partial/search.styl","hash":"159be002780c62a77f46947cf854a7342fba24f4","modified":1541004102000},{"_id":"themes/cactus/source/css/_partial/tags.styl","hash":"d571d5c7c960300d29c5f0ec3fe1140322ecd6b3","modified":1541004102000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff","hash":"37443d0040f0d7af381c955e4c15919a15d0349e","modified":1541004102000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff2","hash":"0a257c8b60e0f20802c1dc8daeed2d3cb0d44f17","modified":1541004102000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","hash":"df15fd1e74b6f4a50bea57e2b44d9627f38495b5","modified":1541004102000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","hash":"62447a951d48b21c4696ae72df4bc4adef636e26","modified":1541004102000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","hash":"32ae5c0d1d5943c8bb8e0f6ab07c3269c6f8b8a8","modified":1541004102000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","hash":"ef07a250766fea840c1049e67c0405d9216ee0a8","modified":1541004102000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff2","hash":"668400ae92700965f03f2371faaee0ab8c8347c3","modified":1541004102000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff","hash":"f5653059b2a5929516e4aab02329a978600b9b67","modified":1541004102000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff","hash":"ad4d46a99a1daf6353c86c79ac3a2b030213859c","modified":1541004102000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff2","hash":"c3be79b553ec394db71268d604b1d29183b867dc","modified":1541004102000},{"_id":"themes/cactus/source/lib/vazir-font/font-face.css","hash":"8f2bf6b59ae1f2ed4c2fead6cea4b8314fcf62e5","modified":1541004102000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff2","hash":"30ce165216db078951a690a6ad665b9b78f5dd81","modified":1541004102000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff","hash":"bbee70033f0f5882e9869e417b69c6a38f56f187","modified":1541004102000},{"_id":"source/_posts/duck/duck.gif","hash":"7fb7d40dd78bd0fa6d525ebf565393fe7955d78b","modified":1543885510000},{"_id":"source/_posts/内存分配/cmem.png","hash":"f318cedf14b8ccf2e103e476f8d1bb9e81dea709","modified":1543885510000},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1541004102000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.eot","hash":"13d026ff857c853cbd0dc519b6e58669db309441","modified":1541004102000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.ttf","hash":"594dc3344ad14903c247615427d1009709f0f5a4","modified":1541004102000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","hash":"2e6c9df9f775373fb1988ae8529aa8f05313dae6","modified":1541004102000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","hash":"f76ec625e15522ff60d21f7a9a3b71c65bc27556","modified":1541004102000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","hash":"9f1e2934098a6a4a7c5584c8f3fa24a707070da3","modified":1541004102000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","hash":"3edffd7bb61eee8cd46b57225f9f9e5264e3362b","modified":1541004102000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.ttf","hash":"295f7e02c9b157e7ea63ad09613b00ceab85c5cd","modified":1541004102000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.eot","hash":"1f5a73db7947ef22c8a2bb19d6449b80496c03c4","modified":1541004102000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.eot","hash":"08e1503d1181188690fd9c81860d6c890c1465f6","modified":1541004102000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.ttf","hash":"a6aa450ee6e0f85786474ca6b04827ef97e81af4","modified":1541004102000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.eot","hash":"31a9219c25fe1991fb745ec8dbbcf45c6094a702","modified":1541004102000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.ttf","hash":"f22b219824026e490a581ddb3b36b07997dff0e3","modified":1541004102000},{"_id":"themes/cactus/source/css/_partial/post/actions_desktop.styl","hash":"4ef72ea70f7c840b2843bf7717aaafae3b6fc241","modified":1541004102000},{"_id":"themes/cactus/source/css/_partial/post/actions_mobile.styl","hash":"0d2966c1d870392476864af8ee3ba312ba30cb82","modified":1541004102000},{"_id":"themes/cactus/source/lib/font-awesome/css/all.min.css","hash":"cf1a3fd771900af34f2af22142beecfb47367548","modified":1541004102000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.eot","hash":"42ff503f20e97503cef8e5b2ec10ae07699d7c01","modified":1541004102000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"d902f8db3e021155f177f698a252fb98d6e61768","modified":1541004102000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff","hash":"7b3f44b4d3028f3c87ddf0f4bd62511c9bf4a87e","modified":1541004102000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"c140085833a38abec6b7df99d4ccac93eb266031","modified":1541004102000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"9784edb76f8a2ed595ea4bf74d46cda4eff3b303","modified":1541004102000},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","hash":"92bb6e468a1db7fbd99ccb960e15e28572254263","modified":1541004102000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"92da6e3c7121e21cdfde25ef08797a3937a683e1","modified":1541004102000},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"82ab395176c927ffbb2f7c95132ee0a06cd5d64a","modified":1541004102000},{"_id":"source/_posts/c-server/wireshark.png","hash":"17a8c5eceddb2233cc9bd34a0916a4796ec75153","modified":1543885510000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.eot","hash":"644ece8263d2f96b087eebf7f6d4e309e5898eb5","modified":1541004102000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff","hash":"f9d835a0f9248b1bb33d66968e87c4a50103ed8d","modified":1541004102000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"19e302760e39e25a5f8d90d6cd0164ef6cd74f8c","modified":1541004102000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff","hash":"80d33a73cbb60e206ef6f5c898988641576c7dda","modified":1541004102000},{"_id":"themes/cactus/source/images/logo.png","hash":"0e3029251dfda26adee2761f71377297e8c26871","modified":1541004102000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.svg","hash":"33e86c0ad6fb9c5c0c8c2af4cb2d790c6b14a8aa","modified":1541004102000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.eot","hash":"10740942ec6b3f4985529d343402d0bf32f9f847","modified":1541004102000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"926035f0156cccf1b0ca507347f39bf9c510f51e","modified":1541004102000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"c445864a9646948e0d7ff44930ad732ee61427d8","modified":1541004102000},{"_id":"source/_posts/c-server/broser.png","hash":"83c14c823b675dd7912d2c5bd94c3103d396cdd0","modified":1543885510000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"b7d24ab1e4fad720f31a2b0cca1904ce1740d846","modified":1541004102000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"93ebc5098cf57a32b7b8d297681f31692c09bdfa","modified":1541004102000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"9a23c6898b0943bd3d96c04df9a0f66e919451d8","modified":1541004102000},{"_id":"source/_posts/runtime/isa&superclass.png","hash":"4260d7f46dd07ee28916058bfbe412fc930bcf28","modified":1543885510000},{"_id":"source/_posts/frame-bounds/frame-bounds3.png","hash":"fc216d34162b5440c12fa02d5e22eeec8608073a","modified":1543885510000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"b542b9591fbf33925d93f0695b6e123a9f0cfd43","modified":1541004102000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"6c090d6bff3928fbf8a5f4104e58ed7f421aea7c","modified":1541004102000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"20ce1fc7ae1254558ca044ae48283faaa58897e5","modified":1541004102000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"9d757cc9f928fc83b2133283dd639c12b11d94ad","modified":1541004102000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"de559f8d70d5b1ab2810597bfd0b1b9506f3ef01","modified":1541004102000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"58be4b7760e9a84daa81929d046f9a15c4fd1c1a","modified":1541004102000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"34f7db59f1d023294e69976aa20b7d52b86165a4","modified":1541004102000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"f9918fb93d6ab6850f5d38069a999c311af78816","modified":1541004102000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.svg","hash":"ed6c1ed8f24df909f40fe5e5c652d7ff9570c821","modified":1541004102000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.svg","hash":"b0bb9e6ac7709206b9510f1718516d89aead5b21","modified":1541004102000},{"_id":"source/_posts/c-server/terminal.png","hash":"7426e3e9fa03adc95e7b357a5387e65327a15252","modified":1543885510000},{"_id":"source/_posts/c-server/c_server.zip","hash":"7ef31bcc096175058687293e377dfc20d9a95930","modified":1543885510000},{"_id":"themes/cactus/.git/objects/pack/tmp_pack_SHJJb9","hash":"8730b20fdc1f00116a17ac2f7412effb9918ea6c","modified":1543975789517},{"_id":"source/_posts/duck/duck.zip","hash":"37e251a38addfe06cb9cfec1355f6dc1db4621f4","modified":1543885510000},{"_id":"source/_posts/duck/create.gif","hash":"b84363b3d49e6f1ed01849264e28dc2d5b333007","modified":1543885510000},{"_id":"public/2018/10/14/duck/index.html","hash":"0bacfe126035a28430c1081f607c69055bfd3877","modified":1544502465845},{"_id":"public/2018/10/13/博客搭建/index.html","hash":"56fb3d9f8be68376b7884652d03cd15b39611f09","modified":1544502465845},{"_id":"public/2018/09/28/markdown-highlight/index.html","hash":"21309eb78b809274cde4b1380df7c2d33fd34d33","modified":1544502465846},{"_id":"public/2017/12/05/http/index.html","hash":"79fd87d83c6771add611444779518bf5c77314c7","modified":1544502465846},{"_id":"public/2017/11/05/post/index.html","hash":"c5ab50d823100cdee2d2b4cce6d59116f3cbcdd6","modified":1544502465846},{"_id":"public/2017/08/05/swift-protocol-extentsion/index.html","hash":"394f8b4fd12fb2e9aece2186537243afecf30822","modified":1544502465846},{"_id":"public/2017/06/21/内存分配/index.html","hash":"76b49e6889e596a4e69384a1bd09ec615007fa02","modified":1544502465847},{"_id":"public/index.html","hash":"11b65c82d9043a4e7c9b7625ec497ea7a39e1e34","modified":1544502465847},{"_id":"public/page/2/index.html","hash":"05e1a73ac6002c142999c33f52f037a7eccc04c5","modified":1544502465847},{"_id":"public/archives/index.html","hash":"107b9330432fe83168dc7419665d143acc88df81","modified":1544502465847},{"_id":"public/archives/page/2/index.html","hash":"da734266db62c826f6746b4ff82c77b98b5705f0","modified":1544502465847},{"_id":"public/archives/2016/index.html","hash":"a4a0a60cb916175d9ffbba11508d7b76efd9bc68","modified":1544502465847},{"_id":"public/archives/2016/08/index.html","hash":"a1a70788678307143d1cc76c50281161c8385d15","modified":1544502465847},{"_id":"public/archives/2016/10/index.html","hash":"513cb575b28256bc51c66c2bc9fd6a657ecc5f96","modified":1544502465847},{"_id":"public/archives/2017/index.html","hash":"b0b6bf5f1fe5477d6982ba9aaa5de9e90f06fcb2","modified":1544502465847},{"_id":"public/archives/2017/03/index.html","hash":"eed26cc49cd82484e234928422958775b4bc47ad","modified":1544502465847},{"_id":"public/archives/2017/04/index.html","hash":"af8f52c04a80c629c74b6d59379311eb08131a52","modified":1544502465847},{"_id":"public/archives/2017/06/index.html","hash":"31171e92369cdd019a19d81aec33686a951e86e8","modified":1544502465847},{"_id":"public/archives/2017/08/index.html","hash":"3527229fad8d13d5d7c7d4544b48ba522f3f1425","modified":1544502465848},{"_id":"public/archives/2017/10/index.html","hash":"d6888818d1baddd48ceb5d7889cf6841863d355c","modified":1544502465848},{"_id":"public/archives/2017/11/index.html","hash":"7dd301a7e343a8a3402ca6a59cbad524cf1a3d72","modified":1544502465848},{"_id":"public/archives/2017/12/index.html","hash":"c58c880e9819e47bf2032ae2616d18184d350c53","modified":1544502465849},{"_id":"public/archives/2018/index.html","hash":"b3ddb0088bfceef525b260b62aa223e8d4cae4d4","modified":1544502465849},{"_id":"public/archives/2018/05/index.html","hash":"caf03586ad49a08472427de707b1494cf1b8b375","modified":1544502465849},{"_id":"public/archives/2018/06/index.html","hash":"8e944dec12aa93b80c8c692b654a45b5eb060c77","modified":1544502465849},{"_id":"public/archives/2018/07/index.html","hash":"223b20be8091c0ac5a7e634047f7f0326c42ab44","modified":1544502465849},{"_id":"public/archives/2018/08/index.html","hash":"c8a6aa5419d6d77a6e0a98846c96f60d11cd1f94","modified":1544502465849},{"_id":"public/archives/2018/09/index.html","hash":"f54cab57d24dceda21bf304c3189a090220a74ce","modified":1544502465850},{"_id":"public/archives/2018/10/index.html","hash":"21d6ff49a28c5acfc458e27b30f33241a451160b","modified":1544502465850},{"_id":"public/2018/10/16/c-server/index.html","hash":"50725dcc984d037ac5d0e8b62f29afed3c08ba64","modified":1544502465850},{"_id":"public/2018/08/05/associations/index.html","hash":"dfc75d17adedfe73c30db36a92f10f740fa1186c","modified":1544502465850},{"_id":"public/2018/07/05/runtime/index.html","hash":"2197df288fb9a0e015068d84d3c2694a37772609","modified":1544502465850},{"_id":"public/2018/06/05/autoreleasePoll/index.html","hash":"8619abae494edae735dbc89ce14f3e0e834e7a26","modified":1544502745822},{"_id":"public/2018/05/05/引用计数/index.html","hash":"31d66b9164373a29069fe104a064dd82c58dfc25","modified":1544502465850},{"_id":"public/2017/10/05/swift循环引用/index.html","hash":"9216176d8a7de7b51229dc96f1707fab5eb3b82b","modified":1544502465850},{"_id":"public/2017/04/05/lipo/index.html","hash":"a24b457c71e36d22ed762d63facf26eceebcad7b","modified":1544502465850},{"_id":"public/2017/03/05/京东和喜马拉雅面试题目/index.html","hash":"e36f5bcbd2aadb0a6776a27afb89a6196c9a6307","modified":1544502465850},{"_id":"public/2016/10/05/frame-bounds/index.html","hash":"b6d2389f5b2ab5150e589f234e8db86e566ce725","modified":1544502465850},{"_id":"public/2016/08/05/copy-mutableCopy/index.html","hash":"64564523a2e1760570acd0a40b88225738d381b9","modified":1544502465851},{"_id":"public/images/apple-touch-icon.png","hash":"57e2def34682655f41a0be2d083f16765ba7858b","modified":1544502465881},{"_id":"public/images/favicon-192x192.png","hash":"96e6fcbbb13a5914a6131391e210eb7dfd13d692","modified":1544502465881},{"_id":"public/images/favicon.ico","hash":"189f9842bcb79a6f8f9e8445bc8bbd773443826b","modified":1544502465881},{"_id":"public/lib/vazir-font/Vazir-Black.woff","hash":"37443d0040f0d7af381c955e4c15919a15d0349e","modified":1544502465881},{"_id":"public/lib/vazir-font/Vazir-Black.woff2","hash":"0a257c8b60e0f20802c1dc8daeed2d3cb0d44f17","modified":1544502465881},{"_id":"public/lib/vazir-font/Vazir-Bold.woff","hash":"df15fd1e74b6f4a50bea57e2b44d9627f38495b5","modified":1544502465881},{"_id":"public/lib/vazir-font/Vazir-Bold.woff2","hash":"62447a951d48b21c4696ae72df4bc4adef636e26","modified":1544502465881},{"_id":"public/lib/vazir-font/Vazir-Light.woff","hash":"32ae5c0d1d5943c8bb8e0f6ab07c3269c6f8b8a8","modified":1544502465881},{"_id":"public/lib/vazir-font/Vazir-Light.woff2","hash":"ef07a250766fea840c1049e67c0405d9216ee0a8","modified":1544502465882},{"_id":"public/lib/vazir-font/Vazir-Medium.woff2","hash":"668400ae92700965f03f2371faaee0ab8c8347c3","modified":1544502465882},{"_id":"public/lib/vazir-font/Vazir-Medium.woff","hash":"f5653059b2a5929516e4aab02329a978600b9b67","modified":1544502465882},{"_id":"public/lib/vazir-font/Vazir-Thin.woff","hash":"ad4d46a99a1daf6353c86c79ac3a2b030213859c","modified":1544502465882},{"_id":"public/lib/vazir-font/Vazir-Thin.woff2","hash":"c3be79b553ec394db71268d604b1d29183b867dc","modified":1544502465882},{"_id":"public/lib/vazir-font/Vazir.woff2","hash":"30ce165216db078951a690a6ad665b9b78f5dd81","modified":1544502465883},{"_id":"public/lib/vazir-font/Vazir.woff","hash":"bbee70033f0f5882e9869e417b69c6a38f56f187","modified":1544502465883},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.eot","hash":"42ff503f20e97503cef8e5b2ec10ae07699d7c01","modified":1544502465883},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff","hash":"7b3f44b4d3028f3c87ddf0f4bd62511c9bf4a87e","modified":1544502465883},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"c140085833a38abec6b7df99d4ccac93eb266031","modified":1544502465883},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"d902f8db3e021155f177f698a252fb98d6e61768","modified":1544502465883},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"9784edb76f8a2ed595ea4bf74d46cda4eff3b303","modified":1544502465883},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"92da6e3c7121e21cdfde25ef08797a3937a683e1","modified":1544502465883},{"_id":"public/2017/12/05/http/http.png","hash":"fcce1887d61735d4b1eb97563beeabddd7069198","modified":1544502465883},{"_id":"public/2017/10/05/swift循环引用/swiftUnown.png","hash":"21c6d258a580c92c51f108bfc7c1ef290b47a9d0","modified":1544502465884},{"_id":"public/2018/05/05/引用计数/gunretainCount.png","hash":"134aab51f91bbb3f2bf05f0638df3a880d73e8ae","modified":1544502465884},{"_id":"public/2018/06/05/autoreleasePoll/autoreleasepoll0.png","hash":"a396ad2537bc5b73fa850e6a4a79d7d0e0c87fd4","modified":1544502465884},{"_id":"public/2018/06/05/autoreleasePoll/autoreleasepoll3.png","hash":"c2913761a742279b9643f7c4aa6135fd641da5db","modified":1544502465884},{"_id":"public/2016/10/05/frame-bounds/frame-bounds0.png","hash":"c2ccdb1073b00b20cd1193d472a9787acfc617a3","modified":1544502465884},{"_id":"public/2016/10/05/frame-bounds/frame-bounds1.png","hash":"b587bfcd6662b0d7eff560f6fff1351cd6f24c61","modified":1544502465884},{"_id":"public/2016/10/05/frame-bounds/frame-bounds2.png","hash":"ce8cef3560ff55ef554b1f46ceee7ef11f8bfaef","modified":1544502465884},{"_id":"public/lib/vazir-font/Vazir-Black.eot","hash":"13d026ff857c853cbd0dc519b6e58669db309441","modified":1544502466190},{"_id":"public/lib/vazir-font/Vazir-Black.ttf","hash":"594dc3344ad14903c247615427d1009709f0f5a4","modified":1544502466191},{"_id":"public/lib/vazir-font/Vazir-Bold.ttf","hash":"2e6c9df9f775373fb1988ae8529aa8f05313dae6","modified":1544502466191},{"_id":"public/lib/vazir-font/Vazir-Bold.eot","hash":"f76ec625e15522ff60d21f7a9a3b71c65bc27556","modified":1544502466191},{"_id":"public/lib/vazir-font/Vazir-Light.ttf","hash":"9f1e2934098a6a4a7c5584c8f3fa24a707070da3","modified":1544502466191},{"_id":"public/lib/vazir-font/Vazir-Light.eot","hash":"3edffd7bb61eee8cd46b57225f9f9e5264e3362b","modified":1544502466191},{"_id":"public/lib/vazir-font/Vazir-Medium.ttf","hash":"295f7e02c9b157e7ea63ad09613b00ceab85c5cd","modified":1544502466191},{"_id":"public/lib/vazir-font/Vazir-Medium.eot","hash":"1f5a73db7947ef22c8a2bb19d6449b80496c03c4","modified":1544502466191},{"_id":"public/lib/vazir-font/Vazir-Thin.eot","hash":"08e1503d1181188690fd9c81860d6c890c1465f6","modified":1544502466191},{"_id":"public/lib/vazir-font/Vazir.eot","hash":"31a9219c25fe1991fb745ec8dbbcf45c6094a702","modified":1544502466191},{"_id":"public/lib/vazir-font/Vazir-Thin.ttf","hash":"a6aa450ee6e0f85786474ca6b04827ef97e81af4","modified":1544502466191},{"_id":"public/lib/vazir-font/Vazir.ttf","hash":"f22b219824026e490a581ddb3b36b07997dff0e3","modified":1544502466191},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.eot","hash":"644ece8263d2f96b087eebf7f6d4e309e5898eb5","modified":1544502466192},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff","hash":"f9d835a0f9248b1bb33d66968e87c4a50103ed8d","modified":1544502466192},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"19e302760e39e25a5f8d90d6cd0164ef6cd74f8c","modified":1544502466192},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff","hash":"80d33a73cbb60e206ef6f5c898988641576c7dda","modified":1544502466192},{"_id":"public/2018/07/05/runtime/instance&class&metaclass.png","hash":"df6f5f56ba137fee520e4ec10f52a371540f767a","modified":1544502466192},{"_id":"public/2017/06/21/内存分配/cms.png","hash":"fa8be5aca298de146da717571e1fa2b360bb6600","modified":1544502466192},{"_id":"public/2018/05/05/引用计数/appleRetainCount.png","hash":"725ba8aa64713959cf0dad2e9bc9f19433794daa","modified":1544502466192},{"_id":"public/2018/06/05/autoreleasePoll/autoreleasepoll1.png","hash":"c18d1a5470348b3eae4036cc364129a9c7170080","modified":1544502466192},{"_id":"public/2018/06/05/autoreleasePoll/autoreleasepoll2.png","hash":"37090917d7760df91af4e1a7c06b37f87bc25828","modified":1544502466192},{"_id":"public/js/main.js","hash":"584c5a69ac81a483a1c4377a2e2cf326c2795e7b","modified":1544502466198},{"_id":"public/css/rtl.css","hash":"c2c2bc4ce311b3129275e009e903088b45e7ed77","modified":1544502466198},{"_id":"public/js/search.js","hash":"a74d0c601f820160825a2e4ad13618074d714933","modified":1544502466198},{"_id":"public/lib/vazir-font/font-face.css","hash":"8f2bf6b59ae1f2ed4c2fead6cea4b8314fcf62e5","modified":1544502466198},{"_id":"public/lib/justified-gallery/css/justifiedGallery.min.css","hash":"92bb6e468a1db7fbd99ccb960e15e28572254263","modified":1544502466198},{"_id":"public/css/style.css","hash":"c5506d455b6b2b76bcf5287b22f5a6e50785da99","modified":1544502466198},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.svg","hash":"33e86c0ad6fb9c5c0c8c2af4cb2d790c6b14a8aa","modified":1544502466199},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"c445864a9646948e0d7ff44930ad732ee61427d8","modified":1544502466199},{"_id":"public/2017/06/21/内存分配/cmem.png","hash":"f318cedf14b8ccf2e103e476f8d1bb9e81dea709","modified":1544502466199},{"_id":"public/2018/08/05/associations/associations.png","hash":"27a0d76c81a94d11bd3142bc6f00b1232c439bd4","modified":1544502466208},{"_id":"public/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"82ab395176c927ffbb2f7c95132ee0a06cd5d64a","modified":1544502466214},{"_id":"public/images/logo.png","hash":"0e3029251dfda26adee2761f71377297e8c26871","modified":1544502466214},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.eot","hash":"10740942ec6b3f4985529d343402d0bf32f9f847","modified":1544502466214},{"_id":"public/2018/10/14/duck/duck.gif","hash":"7fb7d40dd78bd0fa6d525ebf565393fe7955d78b","modified":1544502466214},{"_id":"public/2018/10/16/c-server/wireshark.png","hash":"17a8c5eceddb2233cc9bd34a0916a4796ec75153","modified":1544502466214},{"_id":"public/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"b542b9591fbf33925d93f0695b6e123a9f0cfd43","modified":1544502466226},{"_id":"public/2016/10/05/frame-bounds/frame-bounds3.png","hash":"fc216d34162b5440c12fa02d5e22eeec8608073a","modified":1544502466226},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"cf1a3fd771900af34f2af22142beecfb47367548","modified":1544502466232},{"_id":"public/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"b7d24ab1e4fad720f31a2b0cca1904ce1740d846","modified":1544502466232},{"_id":"public/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"93ebc5098cf57a32b7b8d297681f31692c09bdfa","modified":1544502466232},{"_id":"public/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"9a23c6898b0943bd3d96c04df9a0f66e919451d8","modified":1544502466232},{"_id":"public/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"9d757cc9f928fc83b2133283dd639c12b11d94ad","modified":1544502466233},{"_id":"public/2018/10/16/c-server/broser.png","hash":"83c14c823b675dd7912d2c5bd94c3103d396cdd0","modified":1544502466233},{"_id":"public/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"926035f0156cccf1b0ca507347f39bf9c510f51e","modified":1544502466238},{"_id":"public/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"de559f8d70d5b1ab2810597bfd0b1b9506f3ef01","modified":1544502466238},{"_id":"public/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"58be4b7760e9a84daa81929d046f9a15c4fd1c1a","modified":1544502466239},{"_id":"public/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"34f7db59f1d023294e69976aa20b7d52b86165a4","modified":1544502466239},{"_id":"public/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"f9918fb93d6ab6850f5d38069a999c311af78816","modified":1544502466240},{"_id":"public/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"20ce1fc7ae1254558ca044ae48283faaa58897e5","modified":1544502466251},{"_id":"public/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"6c090d6bff3928fbf8a5f4104e58ed7f421aea7c","modified":1544502466254},{"_id":"public/2018/07/05/runtime/isa&superclass.png","hash":"4260d7f46dd07ee28916058bfbe412fc930bcf28","modified":1544502466254},{"_id":"public/lib/jquery/jquery.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1544502466264},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.svg","hash":"ed6c1ed8f24df909f40fe5e5c652d7ff9570c821","modified":1544502466265},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.svg","hash":"b0bb9e6ac7709206b9510f1718516d89aead5b21","modified":1544502466265},{"_id":"public/2018/10/16/c-server/terminal.png","hash":"7426e3e9fa03adc95e7b357a5387e65327a15252","modified":1544502466277},{"_id":"public/2018/10/16/c-server/c_server.zip","hash":"7ef31bcc096175058687293e377dfc20d9a95930","modified":1544502466291},{"_id":"public/2018/10/14/duck/duck.zip","hash":"37e251a38addfe06cb9cfec1355f6dc1db4621f4","modified":1544502466323},{"_id":"public/2018/10/14/duck/create.gif","hash":"b84363b3d49e6f1ed01849264e28dc2d5b333007","modified":1544502466406}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"associations","date":"2018-08-05T03:10:48.000Z","_content":"\n``` objc \n/** \n * Sets an associated value for a given object using a given key and association policy.\n * \n * @param object The source object for the association.\n * @param key The key for the association.\n * @param value The value to associate with the key key for object. Pass nil to clear an existing association.\n * @param policy The policy for the association. For possible values, see “Associative Object Behaviors.”\n * \n * @see objc_setAssociatedObject\n * @see objc_removeAssociatedObjects\n */\nOBJC_EXPORT void\nobjc_setAssociatedObject(id _Nonnull object, const void * _Nonnull key,\n                         id _Nullable value, objc_AssociationPolicy policy)\n    OBJC_AVAILABLE(10.6, 3.1, 9.0, 1.0, 2.0);\n\n/** \n * Returns the value associated with a given object for a given key.\n * \n * @param object The source object for the association.\n * @param key The key for the association.\n * \n * @return The value associated with the key \\e key for \\e object.\n * \n * @see objc_setAssociatedObject\n */\nOBJC_EXPORT id _Nullable\nobjc_getAssociatedObject(id _Nonnull object, const void * _Nonnull key)\n    OBJC_AVAILABLE(10.6, 3.1, 9.0, 1.0, 2.0);\n```\n\n![](associations/associations.png)\n\n``` objc\nclass AssociationsManager {\n    // associative references: object pointer -> PtrPtrHashMap.\n    static AssociationsHashMap *_map;\npublic:\n    AssociationsManager()   { AssociationsManagerLock.lock(); }\n    ~AssociationsManager()  { AssociationsManagerLock.unlock(); }\n    \n    AssociationsHashMap &associations() {\n        if (_map == NULL)\n            _map = new AssociationsHashMap();\n        return *_map;\n    }\n};\n\nAssociationsHashMap *AssociationsManager::_map = NULL;\n```\n\n``` objc\n// expanded policy bits.\n\nenum { \n    OBJC_ASSOCIATION_SETTER_ASSIGN      = 0,\n    OBJC_ASSOCIATION_SETTER_RETAIN      = 1,\n    OBJC_ASSOCIATION_SETTER_COPY        = 3,            // NOTE:  both bits are set, so we can simply test 1 bit in releaseValue below.\n    OBJC_ASSOCIATION_GETTER_READ        = (0 << 8), \n    OBJC_ASSOCIATION_GETTER_RETAIN      = (1 << 8), \n    OBJC_ASSOCIATION_GETTER_AUTORELEASE = (2 << 8)\n}; \n\n```\n``` objc\nid _object_get_associative_reference(id object, void *key) {\n    id value = nil;\n    uintptr_t policy = OBJC_ASSOCIATION_ASSIGN;\n    {\n        AssociationsManager manager;\n        AssociationsHashMap &associations(manager.associations());\n        disguised_ptr_t disguised_object = DISGUISE(object);\n        AssociationsHashMap::iterator i = associations.find(disguised_object);\n        if (i != associations.end()) {\n            ObjectAssociationMap *refs = i->second;\n            ObjectAssociationMap::iterator j = refs->find(key);\n            if (j != refs->end()) {\n                ObjcAssociation &entry = j->second;\n                value = entry.value();\n                policy = entry.policy();\n                if (policy & OBJC_ASSOCIATION_GETTER_RETAIN) {\n                    objc_retain(value);\n                }\n            }\n        }\n    }\n    if (value && (policy & OBJC_ASSOCIATION_GETTER_AUTORELEASE)) {\n        objc_autorelease(value);\n    }\n    return value;\n}\n```\n\n","source":"_posts/associations.md","raw":"---\ntitle: associations\ndate: 2018-08-05 11:10:48\ntags:\n---\n\n``` objc \n/** \n * Sets an associated value for a given object using a given key and association policy.\n * \n * @param object The source object for the association.\n * @param key The key for the association.\n * @param value The value to associate with the key key for object. Pass nil to clear an existing association.\n * @param policy The policy for the association. For possible values, see “Associative Object Behaviors.”\n * \n * @see objc_setAssociatedObject\n * @see objc_removeAssociatedObjects\n */\nOBJC_EXPORT void\nobjc_setAssociatedObject(id _Nonnull object, const void * _Nonnull key,\n                         id _Nullable value, objc_AssociationPolicy policy)\n    OBJC_AVAILABLE(10.6, 3.1, 9.0, 1.0, 2.0);\n\n/** \n * Returns the value associated with a given object for a given key.\n * \n * @param object The source object for the association.\n * @param key The key for the association.\n * \n * @return The value associated with the key \\e key for \\e object.\n * \n * @see objc_setAssociatedObject\n */\nOBJC_EXPORT id _Nullable\nobjc_getAssociatedObject(id _Nonnull object, const void * _Nonnull key)\n    OBJC_AVAILABLE(10.6, 3.1, 9.0, 1.0, 2.0);\n```\n\n![](associations/associations.png)\n\n``` objc\nclass AssociationsManager {\n    // associative references: object pointer -> PtrPtrHashMap.\n    static AssociationsHashMap *_map;\npublic:\n    AssociationsManager()   { AssociationsManagerLock.lock(); }\n    ~AssociationsManager()  { AssociationsManagerLock.unlock(); }\n    \n    AssociationsHashMap &associations() {\n        if (_map == NULL)\n            _map = new AssociationsHashMap();\n        return *_map;\n    }\n};\n\nAssociationsHashMap *AssociationsManager::_map = NULL;\n```\n\n``` objc\n// expanded policy bits.\n\nenum { \n    OBJC_ASSOCIATION_SETTER_ASSIGN      = 0,\n    OBJC_ASSOCIATION_SETTER_RETAIN      = 1,\n    OBJC_ASSOCIATION_SETTER_COPY        = 3,            // NOTE:  both bits are set, so we can simply test 1 bit in releaseValue below.\n    OBJC_ASSOCIATION_GETTER_READ        = (0 << 8), \n    OBJC_ASSOCIATION_GETTER_RETAIN      = (1 << 8), \n    OBJC_ASSOCIATION_GETTER_AUTORELEASE = (2 << 8)\n}; \n\n```\n``` objc\nid _object_get_associative_reference(id object, void *key) {\n    id value = nil;\n    uintptr_t policy = OBJC_ASSOCIATION_ASSIGN;\n    {\n        AssociationsManager manager;\n        AssociationsHashMap &associations(manager.associations());\n        disguised_ptr_t disguised_object = DISGUISE(object);\n        AssociationsHashMap::iterator i = associations.find(disguised_object);\n        if (i != associations.end()) {\n            ObjectAssociationMap *refs = i->second;\n            ObjectAssociationMap::iterator j = refs->find(key);\n            if (j != refs->end()) {\n                ObjcAssociation &entry = j->second;\n                value = entry.value();\n                policy = entry.policy();\n                if (policy & OBJC_ASSOCIATION_GETTER_RETAIN) {\n                    objc_retain(value);\n                }\n            }\n        }\n    }\n    if (value && (policy & OBJC_ASSOCIATION_GETTER_AUTORELEASE)) {\n        objc_autorelease(value);\n    }\n    return value;\n}\n```\n\n","slug":"associations","published":1,"updated":"2018-12-05T04:35:39.397Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpj8w0um00005guqv1yrzgof","content":"<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * Sets an associated value for a given object using a given key and association policy.</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * @param object The source object for the association.</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key The key for the association.</span></span><br><span class=\"line\"><span class=\"comment\"> * @param value The value to associate with the key key for object. Pass nil to clear an existing association.</span></span><br><span class=\"line\"><span class=\"comment\"> * @param policy The policy for the association. For possible values, see “Associative Object Behaviors.”</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * @see objc_setAssociatedObject</span></span><br><span class=\"line\"><span class=\"comment\"> * @see objc_removeAssociatedObjects</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">OBJC_EXPORT <span class=\"keyword\">void</span></span><br><span class=\"line\">objc_setAssociatedObject(<span class=\"keyword\">id</span> _Nonnull object, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> * _Nonnull key,</span><br><span class=\"line\">                         <span class=\"keyword\">id</span> _Nullable value, objc_AssociationPolicy policy)</span><br><span class=\"line\">    OBJC_AVAILABLE(<span class=\"number\">10.6</span>, <span class=\"number\">3.1</span>, <span class=\"number\">9.0</span>, <span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * Returns the value associated with a given object for a given key.</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * @param object The source object for the association.</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key The key for the association.</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * @return The value associated with the key \\e key for \\e object.</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * @see objc_setAssociatedObject</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">OBJC_EXPORT <span class=\"keyword\">id</span> _Nullable</span><br><span class=\"line\">objc_getAssociatedObject(<span class=\"keyword\">id</span> _Nonnull object, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> * _Nonnull key)</span><br><span class=\"line\">    OBJC_AVAILABLE(<span class=\"number\">10.6</span>, <span class=\"number\">3.1</span>, <span class=\"number\">9.0</span>, <span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>);</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2018/08/05/associations/associations.png\" alt=\"\"></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> AssociationsManager &#123;</span><br><span class=\"line\">    <span class=\"comment\">// associative references: object pointer -&gt; PtrPtrHashMap.</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> AssociationsHashMap *_map;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    AssociationsManager()   &#123; AssociationsManagerLock.lock(); &#125;</span><br><span class=\"line\">    ~AssociationsManager()  &#123; AssociationsManagerLock.unlock(); &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    AssociationsHashMap &amp;associations() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_map == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            _map = new AssociationsHashMap();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *_map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">AssociationsHashMap *AssociationsManager::_map = <span class=\"literal\">NULL</span>;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// expanded policy bits.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">enum</span> &#123; </span><br><span class=\"line\">    OBJC_ASSOCIATION_SETTER_ASSIGN      = <span class=\"number\">0</span>,</span><br><span class=\"line\">    OBJC_ASSOCIATION_SETTER_RETAIN      = <span class=\"number\">1</span>,</span><br><span class=\"line\">    OBJC_ASSOCIATION_SETTER_COPY        = <span class=\"number\">3</span>,            <span class=\"comment\">// <span class=\"doctag\">NOTE:</span>  both bits are set, so we can simply test 1 bit in releaseValue below.</span></span><br><span class=\"line\">    OBJC_ASSOCIATION_GETTER_READ        = (<span class=\"number\">0</span> &lt;&lt; <span class=\"number\">8</span>), </span><br><span class=\"line\">    OBJC_ASSOCIATION_GETTER_RETAIN      = (<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">8</span>), </span><br><span class=\"line\">    OBJC_ASSOCIATION_GETTER_AUTORELEASE = (<span class=\"number\">2</span> &lt;&lt; <span class=\"number\">8</span>)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">id</span> _object_get_associative_reference(<span class=\"keyword\">id</span> object, <span class=\"keyword\">void</span> *key) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">id</span> value = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">    uintptr_t policy = OBJC_ASSOCIATION_ASSIGN;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        AssociationsManager manager;</span><br><span class=\"line\">        AssociationsHashMap &amp;associations(manager.associations());</span><br><span class=\"line\">        disguised_ptr_t disguised_object = DISGUISE(object);</span><br><span class=\"line\">        AssociationsHashMap::iterator i = associations.find(disguised_object);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i != associations.end()) &#123;</span><br><span class=\"line\">            ObjectAssociationMap *refs = i-&gt;second;</span><br><span class=\"line\">            ObjectAssociationMap::iterator j = refs-&gt;find(key);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j != refs-&gt;end()) &#123;</span><br><span class=\"line\">                ObjcAssociation &amp;entry = j-&gt;second;</span><br><span class=\"line\">                value = entry.value();</span><br><span class=\"line\">                policy = entry.policy();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (policy &amp; OBJC_ASSOCIATION_GETTER_RETAIN) &#123;</span><br><span class=\"line\">                    objc_retain(value);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value &amp;&amp; (policy &amp; OBJC_ASSOCIATION_GETTER_AUTORELEASE)) &#123;</span><br><span class=\"line\">        objc_autorelease(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * Sets an associated value for a given object using a given key and association policy.</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * @param object The source object for the association.</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key The key for the association.</span></span><br><span class=\"line\"><span class=\"comment\"> * @param value The value to associate with the key key for object. Pass nil to clear an existing association.</span></span><br><span class=\"line\"><span class=\"comment\"> * @param policy The policy for the association. For possible values, see “Associative Object Behaviors.”</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * @see objc_setAssociatedObject</span></span><br><span class=\"line\"><span class=\"comment\"> * @see objc_removeAssociatedObjects</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">OBJC_EXPORT <span class=\"keyword\">void</span></span><br><span class=\"line\">objc_setAssociatedObject(<span class=\"keyword\">id</span> _Nonnull object, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> * _Nonnull key,</span><br><span class=\"line\">                         <span class=\"keyword\">id</span> _Nullable value, objc_AssociationPolicy policy)</span><br><span class=\"line\">    OBJC_AVAILABLE(<span class=\"number\">10.6</span>, <span class=\"number\">3.1</span>, <span class=\"number\">9.0</span>, <span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * Returns the value associated with a given object for a given key.</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * @param object The source object for the association.</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key The key for the association.</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * @return The value associated with the key \\e key for \\e object.</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * @see objc_setAssociatedObject</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">OBJC_EXPORT <span class=\"keyword\">id</span> _Nullable</span><br><span class=\"line\">objc_getAssociatedObject(<span class=\"keyword\">id</span> _Nonnull object, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> * _Nonnull key)</span><br><span class=\"line\">    OBJC_AVAILABLE(<span class=\"number\">10.6</span>, <span class=\"number\">3.1</span>, <span class=\"number\">9.0</span>, <span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>);</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2018/08/05/associations/associations.png\" alt=\"\"></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> AssociationsManager &#123;</span><br><span class=\"line\">    <span class=\"comment\">// associative references: object pointer -&gt; PtrPtrHashMap.</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> AssociationsHashMap *_map;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    AssociationsManager()   &#123; AssociationsManagerLock.lock(); &#125;</span><br><span class=\"line\">    ~AssociationsManager()  &#123; AssociationsManagerLock.unlock(); &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    AssociationsHashMap &amp;associations() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_map == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            _map = new AssociationsHashMap();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *_map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">AssociationsHashMap *AssociationsManager::_map = <span class=\"literal\">NULL</span>;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// expanded policy bits.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">enum</span> &#123; </span><br><span class=\"line\">    OBJC_ASSOCIATION_SETTER_ASSIGN      = <span class=\"number\">0</span>,</span><br><span class=\"line\">    OBJC_ASSOCIATION_SETTER_RETAIN      = <span class=\"number\">1</span>,</span><br><span class=\"line\">    OBJC_ASSOCIATION_SETTER_COPY        = <span class=\"number\">3</span>,            <span class=\"comment\">// <span class=\"doctag\">NOTE:</span>  both bits are set, so we can simply test 1 bit in releaseValue below.</span></span><br><span class=\"line\">    OBJC_ASSOCIATION_GETTER_READ        = (<span class=\"number\">0</span> &lt;&lt; <span class=\"number\">8</span>), </span><br><span class=\"line\">    OBJC_ASSOCIATION_GETTER_RETAIN      = (<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">8</span>), </span><br><span class=\"line\">    OBJC_ASSOCIATION_GETTER_AUTORELEASE = (<span class=\"number\">2</span> &lt;&lt; <span class=\"number\">8</span>)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">id</span> _object_get_associative_reference(<span class=\"keyword\">id</span> object, <span class=\"keyword\">void</span> *key) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">id</span> value = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">    uintptr_t policy = OBJC_ASSOCIATION_ASSIGN;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        AssociationsManager manager;</span><br><span class=\"line\">        AssociationsHashMap &amp;associations(manager.associations());</span><br><span class=\"line\">        disguised_ptr_t disguised_object = DISGUISE(object);</span><br><span class=\"line\">        AssociationsHashMap::iterator i = associations.find(disguised_object);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i != associations.end()) &#123;</span><br><span class=\"line\">            ObjectAssociationMap *refs = i-&gt;second;</span><br><span class=\"line\">            ObjectAssociationMap::iterator j = refs-&gt;find(key);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j != refs-&gt;end()) &#123;</span><br><span class=\"line\">                ObjcAssociation &amp;entry = j-&gt;second;</span><br><span class=\"line\">                value = entry.value();</span><br><span class=\"line\">                policy = entry.policy();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (policy &amp; OBJC_ASSOCIATION_GETTER_RETAIN) &#123;</span><br><span class=\"line\">                    objc_retain(value);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value &amp;&amp; (policy &amp; OBJC_ASSOCIATION_GETTER_AUTORELEASE)) &#123;</span><br><span class=\"line\">        objc_autorelease(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"autoreleasePoll","date":"2018-06-05T03:11:00.000Z","_content":"苹果的内存管理机制(ARC)中有一个很有趣的东西-autoreleasePoll.可以延迟释放对象.抽出点时间来探究一下, 探究如下内容:\n\n* @autoreleasePoll{}的本质是什么\n* autoreleasePoll是通过什么对象来实现的\n* AutoreleasePoolPage的数据结构\n* AutoreleasePoolPage如何实现autorelease对象的存储\n* AutoreleasePoolPage如何释放对象\n* POOL_BOUNDARY (哨兵对象)是什么\n\n## @autoreleasePoll{}的本质是什么\n\n首先写一段使用了autoreleasepoll的代码, main.m：\n\n``` objc \nint main(int argc, const char * argv[])\n{\n  @autoreleasepool {\n    NSLog(@\"hello world\");\n  }\n  return 0;\n}\n```\n\n然后使用终端命令编译成c++代码 main.cpp：\n\n``` bash\n$ clang -rewrite-objc main.m\n```\n\n我在main.cpp中的最后面找到了下面这段代码:\n\n``` cpp\nint main(int argc, const char * argv[])\n{\n  /* @autoreleasepool */ { __AtAutoreleasePool __autoreleasepool; \n    NSLog((NSString *)&__NSConstantStringImpl__var_folders_98_x72bq3s93xb7g9w9qjqnrj8r0000gn_T_main_9f94b6_mi_0);\n  }\n  return 0;\n}\n```\n\n\n``` cpp\nstruct __AtAutoreleasePool {\n  __AtAutoreleasePool() {atautoreleasepoolobj = objc_autoreleasePoolPush();}\n  ~__AtAutoreleasePool() {objc_autoreleasePoolPop(atautoreleasepoolobj);}\n  void * atautoreleasepoolobj;\n};\n```\n\n苹果在编译器将代码编译成了如上代码.在大括号开始的时候生成`__AtAutoreleasePool`对象, 会执行初始化方法`__AtAutoreleasePool()`,在大括号结束的时候，会释放 `__AtAutoreleasePool`对象， 会执行析构方法`~__AtAutoreleasePool()`.\n\n## autoreleasePoll是通过什么对象来实现的\n\n通过上述的`__AtAutoreleasePool `的结构体.我们知道:\n\n* objc_autoreleasePoolPush() 生成atautoreleasepoolobj对象.\n\n\n``` objc \nvoid *\nobjc_autoreleasePoolPush(void)\n{\n  return AutoreleasePoolPage::push();\n}\n```\n* objc_autoreleasePoolPop() 释放atautoreleasepoolobj对象.\n\n``` cpp\nvoid\nobjc_autoreleasePoolPop(void *ctxt)\n{\n  AutoreleasePoolPage::pop(ctxt);\n}\n```\n\n我们知道了`autoreleasePoll `的实现肯定和`AutoreleasePoolPage `有关系\n\n## AutoreleasePoolPage的数据结构\n下面我们来看一下`AutoreleasePoolPage `类定义，了解一下他的数据结构是怎样的.\n\n``` cpp\nclass AutoreleasePoolPage \n{\n# define POOL_BOUNDARY nil\n  static size_t const SIZE = PAGE_MAX_SIZE\n  magic_t const magic;\n  id *next;\n  pthread_t const thread;\n  AutoreleasePoolPage * const parent;\n  AutoreleasePoolPage *child;\n  uint32_t const depth;\n  uint32_t hiwat;\n}\n```\n\n* POOL_BOUNDARY : 哨兵对象\n* SIZE : AutoreleasePoolPage的最大容量 (4096)\n* magic : 完整性校验\n* thread : 保存了当前page所在的线程\n* next :  存储autorelease对象\n* parent : 指向父节点的指针\n* child : 指向子节点的指针\n\n可以看出，AutoreleasePoolPage是一个双向链表\n\n![](/autoreleasePoll/autoreleasepoll0.png)\n\n## AutoreleasePoolPage如何实现autorelease对象的存储\n\n要想知道如何实现`autorelease `对象的存储，需要知道`AutoreleasePoolPage `的`push`方法的实现:\n\n``` cpp\nstatic inline void *push() \n{\n  return autoreleaseFast(POOL_BOUNDARY);\n}\n```\n\n这里看一下autoreleaseFast这个方法。\n\n``` cpp\nstatic inline id *autoreleaseFast(id obj)\n{\n  AutoreleasePoolPage *page = hotPage();\n  if (page && !page->full()) {\n    return page->add(obj);\n  } else if (page) {\n    return autoreleaseFullPage(obj, page);\n  } else {\n    return autoreleaseNoPage(obj);\n  }\n}\n\n```\n\n这里分为了三种情况\n\n* page存在，并且page没有满。 `return page->add(obj);`\n* page存在，但是page满了。 `return autoreleaseFullPage(obj, page);`\n* page不存在。 `return autoreleaseNoPage(obj);`\n\n###第一种情况:\n\n``` cpp\nid *add(id obj)\n{\n  unprotect();\n  id *ret = next;    \n  *next++ = obj;\n  protect();\n  return ret;\n}\n```\n\n其中`*next++ = obj` 这句话的意思是: next指针指向obj,然后next指针+1.说明苹果是通过这种方式将autorelease对象存储的。\n###第二种情况:\n\n``` cpp\nstatic __attribute__((noinline))\nid *autoreleaseFullPage(id obj, AutoreleasePoolPage *page)\n{\n  do {\n  if (page->child) page = page->child;\n    else page = new AutoreleasePoolPage(page);\n  } while (page->full());\n\n  setHotPage(page);\n  return page->add(obj);\n}\n```\n\n这段代码的大概意思是: 通过一个接一个的节点来寻找没有满的page。如果page满了就新建一个page。把新建的page设置为hotpage, 然后将autorelase对象存储page中。\n\n###第三种情况:\n\n``` cpp\nstatic __attribute__((noinline))\nid *autoreleaseNoPage(id obj)\n{\n\n  bool pushExtraBoundary = false;\n  if (haveEmptyPoolPlaceholder()) {\n    pushExtraBoundary = true;\n  }\n  else if (obj != POOL_BOUNDARY  &&  DebugMissingPools) {\n    // We are pushing an object with no pool in place, \n    // and no-pool debugging was requested by environment.\n    _objc_inform(\"MISSING POOLS: (%p) Object %p of class %s \"\n    \"autoreleased with no pool in place - \"\n    \"objc_autoreleaseNoPool() to debug\", \n    pthread_self(), (void*)obj, object_getClassName(obj));\n    objc_autoreleaseNoPool(obj);\n    return nil;\n  }\n  else if (obj == POOL_BOUNDARY  &&  !DebugPoolAllocation) {\n    // We are pushing a pool with no pool in place,\n    // and alloc-per-pool debugging was not requested.\n    // Install and return the empty pool placeholder.\n    return setEmptyPoolPlaceholder();\n  }\n\n  AutoreleasePoolPage *page = new AutoreleasePoolPage(nil);\n  setHotPage(page);\n\n  if (pushExtraBoundary) {\n    page->add(POOL_BOUNDARY);\n  }\n\n  return page->add(obj);\n}\n```\n这段代码的意思是新建一个page，将page设置为hotpage，然后将autorelease对象存入page中。\n\n通过对`push`方法的分析，我们了解了 `AutoreleasePoolPage `是通过next指针来实现`autorelease`对象的存储.\n\n`AutoreleasePoolPage `的初始状态是这样的\n\n![](/autoreleasePoll/autoreleasepoll1.png)\n\n加入一个`autorelease`对象\n\n![](/autoreleasePoll/autoreleasepoll2.png)\n\n\n## AutoreleasePoolPage如何释放对象\n\n下面我们来看看objc_autoreleasePoolPop的过程.\n\n``` cpp\nvoid\nobjc_autoreleasePoolPop(void *ctxt)\n{\n  AutoreleasePoolPage::pop(ctxt);\n}\n```\n这里我们知道objc_autoreleasePoolPop是通过AutoreleasePoolPage类的pop方法实现的. 传入的参数就是需要释放的AutoreleasePoolPage对象.\n\n``` cpp\nstatic inline void pop(void *token) \n{\n  AutoreleasePoolPage *page;\n  id *stop;\n  stop = (id *)token;\n  page->releaseUntil(stop);\n}\n```\n这里我们关注一下 `page->releaseUntil(stop);`\n\n``` cpp\nvoid releaseUntil(id *stop) \n{\n  while (this->next != stop) {\n\n    AutoreleasePoolPage *page = hotPage();\n    while (page->empty()) {\n      page = page->parent;\n      setHotPage(page);\n    }\n\n    page->unprotect();\n    id obj = *--page->next;\n    memset((void*)page->next, SCRIBBLE, sizeof(*page->next));\n    page->protect();\n\n    if (obj != POOL_BOUNDARY) {\n      objc_release(obj);\n    }\n  }\n  setHotPage(this);\n}\n```\n\n这段代码的意思是，从page中一个一个的对autorelase对象发送release消息。终止的临界条件是POOL_BOUNDARY.\n\n![](/autoreleasePoll/autoreleasepoll3.png)\n\n## POOL_BOUNDARY (哨兵对象)是什么\n\n我们知道`AutoreleasePoolPage `的类定义中有一段代码:\n\n``` cpp\n#define POOL_BOUNDARY nil\n```\n* `AutoreleasePoolPage `调用`push`方法的时候，会把`POOL_BOUNDARY `放入自动自动释放池的栈顶.\n\n* `AutoreleasePoolPage `调用`pop`方法的时候，会对realease对象发送消息直到`POOL_BOUNDARY `.\n\n所以: `POOL_BOUNDARY `是每一次@autoreleasepoll{}的标记.\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/autoreleasePoll.md","raw":"---\ntitle: autoreleasePoll\ndate: 2018-06-05 11:11:00\ntags:\n\n---\n苹果的内存管理机制(ARC)中有一个很有趣的东西-autoreleasePoll.可以延迟释放对象.抽出点时间来探究一下, 探究如下内容:\n\n* @autoreleasePoll{}的本质是什么\n* autoreleasePoll是通过什么对象来实现的\n* AutoreleasePoolPage的数据结构\n* AutoreleasePoolPage如何实现autorelease对象的存储\n* AutoreleasePoolPage如何释放对象\n* POOL_BOUNDARY (哨兵对象)是什么\n\n## @autoreleasePoll{}的本质是什么\n\n首先写一段使用了autoreleasepoll的代码, main.m：\n\n``` objc \nint main(int argc, const char * argv[])\n{\n  @autoreleasepool {\n    NSLog(@\"hello world\");\n  }\n  return 0;\n}\n```\n\n然后使用终端命令编译成c++代码 main.cpp：\n\n``` bash\n$ clang -rewrite-objc main.m\n```\n\n我在main.cpp中的最后面找到了下面这段代码:\n\n``` cpp\nint main(int argc, const char * argv[])\n{\n  /* @autoreleasepool */ { __AtAutoreleasePool __autoreleasepool; \n    NSLog((NSString *)&__NSConstantStringImpl__var_folders_98_x72bq3s93xb7g9w9qjqnrj8r0000gn_T_main_9f94b6_mi_0);\n  }\n  return 0;\n}\n```\n\n\n``` cpp\nstruct __AtAutoreleasePool {\n  __AtAutoreleasePool() {atautoreleasepoolobj = objc_autoreleasePoolPush();}\n  ~__AtAutoreleasePool() {objc_autoreleasePoolPop(atautoreleasepoolobj);}\n  void * atautoreleasepoolobj;\n};\n```\n\n苹果在编译器将代码编译成了如上代码.在大括号开始的时候生成`__AtAutoreleasePool`对象, 会执行初始化方法`__AtAutoreleasePool()`,在大括号结束的时候，会释放 `__AtAutoreleasePool`对象， 会执行析构方法`~__AtAutoreleasePool()`.\n\n## autoreleasePoll是通过什么对象来实现的\n\n通过上述的`__AtAutoreleasePool `的结构体.我们知道:\n\n* objc_autoreleasePoolPush() 生成atautoreleasepoolobj对象.\n\n\n``` objc \nvoid *\nobjc_autoreleasePoolPush(void)\n{\n  return AutoreleasePoolPage::push();\n}\n```\n* objc_autoreleasePoolPop() 释放atautoreleasepoolobj对象.\n\n``` cpp\nvoid\nobjc_autoreleasePoolPop(void *ctxt)\n{\n  AutoreleasePoolPage::pop(ctxt);\n}\n```\n\n我们知道了`autoreleasePoll `的实现肯定和`AutoreleasePoolPage `有关系\n\n## AutoreleasePoolPage的数据结构\n下面我们来看一下`AutoreleasePoolPage `类定义，了解一下他的数据结构是怎样的.\n\n``` cpp\nclass AutoreleasePoolPage \n{\n# define POOL_BOUNDARY nil\n  static size_t const SIZE = PAGE_MAX_SIZE\n  magic_t const magic;\n  id *next;\n  pthread_t const thread;\n  AutoreleasePoolPage * const parent;\n  AutoreleasePoolPage *child;\n  uint32_t const depth;\n  uint32_t hiwat;\n}\n```\n\n* POOL_BOUNDARY : 哨兵对象\n* SIZE : AutoreleasePoolPage的最大容量 (4096)\n* magic : 完整性校验\n* thread : 保存了当前page所在的线程\n* next :  存储autorelease对象\n* parent : 指向父节点的指针\n* child : 指向子节点的指针\n\n可以看出，AutoreleasePoolPage是一个双向链表\n\n![](/autoreleasePoll/autoreleasepoll0.png)\n\n## AutoreleasePoolPage如何实现autorelease对象的存储\n\n要想知道如何实现`autorelease `对象的存储，需要知道`AutoreleasePoolPage `的`push`方法的实现:\n\n``` cpp\nstatic inline void *push() \n{\n  return autoreleaseFast(POOL_BOUNDARY);\n}\n```\n\n这里看一下autoreleaseFast这个方法。\n\n``` cpp\nstatic inline id *autoreleaseFast(id obj)\n{\n  AutoreleasePoolPage *page = hotPage();\n  if (page && !page->full()) {\n    return page->add(obj);\n  } else if (page) {\n    return autoreleaseFullPage(obj, page);\n  } else {\n    return autoreleaseNoPage(obj);\n  }\n}\n\n```\n\n这里分为了三种情况\n\n* page存在，并且page没有满。 `return page->add(obj);`\n* page存在，但是page满了。 `return autoreleaseFullPage(obj, page);`\n* page不存在。 `return autoreleaseNoPage(obj);`\n\n###第一种情况:\n\n``` cpp\nid *add(id obj)\n{\n  unprotect();\n  id *ret = next;    \n  *next++ = obj;\n  protect();\n  return ret;\n}\n```\n\n其中`*next++ = obj` 这句话的意思是: next指针指向obj,然后next指针+1.说明苹果是通过这种方式将autorelease对象存储的。\n###第二种情况:\n\n``` cpp\nstatic __attribute__((noinline))\nid *autoreleaseFullPage(id obj, AutoreleasePoolPage *page)\n{\n  do {\n  if (page->child) page = page->child;\n    else page = new AutoreleasePoolPage(page);\n  } while (page->full());\n\n  setHotPage(page);\n  return page->add(obj);\n}\n```\n\n这段代码的大概意思是: 通过一个接一个的节点来寻找没有满的page。如果page满了就新建一个page。把新建的page设置为hotpage, 然后将autorelase对象存储page中。\n\n###第三种情况:\n\n``` cpp\nstatic __attribute__((noinline))\nid *autoreleaseNoPage(id obj)\n{\n\n  bool pushExtraBoundary = false;\n  if (haveEmptyPoolPlaceholder()) {\n    pushExtraBoundary = true;\n  }\n  else if (obj != POOL_BOUNDARY  &&  DebugMissingPools) {\n    // We are pushing an object with no pool in place, \n    // and no-pool debugging was requested by environment.\n    _objc_inform(\"MISSING POOLS: (%p) Object %p of class %s \"\n    \"autoreleased with no pool in place - \"\n    \"objc_autoreleaseNoPool() to debug\", \n    pthread_self(), (void*)obj, object_getClassName(obj));\n    objc_autoreleaseNoPool(obj);\n    return nil;\n  }\n  else if (obj == POOL_BOUNDARY  &&  !DebugPoolAllocation) {\n    // We are pushing a pool with no pool in place,\n    // and alloc-per-pool debugging was not requested.\n    // Install and return the empty pool placeholder.\n    return setEmptyPoolPlaceholder();\n  }\n\n  AutoreleasePoolPage *page = new AutoreleasePoolPage(nil);\n  setHotPage(page);\n\n  if (pushExtraBoundary) {\n    page->add(POOL_BOUNDARY);\n  }\n\n  return page->add(obj);\n}\n```\n这段代码的意思是新建一个page，将page设置为hotpage，然后将autorelease对象存入page中。\n\n通过对`push`方法的分析，我们了解了 `AutoreleasePoolPage `是通过next指针来实现`autorelease`对象的存储.\n\n`AutoreleasePoolPage `的初始状态是这样的\n\n![](/autoreleasePoll/autoreleasepoll1.png)\n\n加入一个`autorelease`对象\n\n![](/autoreleasePoll/autoreleasepoll2.png)\n\n\n## AutoreleasePoolPage如何释放对象\n\n下面我们来看看objc_autoreleasePoolPop的过程.\n\n``` cpp\nvoid\nobjc_autoreleasePoolPop(void *ctxt)\n{\n  AutoreleasePoolPage::pop(ctxt);\n}\n```\n这里我们知道objc_autoreleasePoolPop是通过AutoreleasePoolPage类的pop方法实现的. 传入的参数就是需要释放的AutoreleasePoolPage对象.\n\n``` cpp\nstatic inline void pop(void *token) \n{\n  AutoreleasePoolPage *page;\n  id *stop;\n  stop = (id *)token;\n  page->releaseUntil(stop);\n}\n```\n这里我们关注一下 `page->releaseUntil(stop);`\n\n``` cpp\nvoid releaseUntil(id *stop) \n{\n  while (this->next != stop) {\n\n    AutoreleasePoolPage *page = hotPage();\n    while (page->empty()) {\n      page = page->parent;\n      setHotPage(page);\n    }\n\n    page->unprotect();\n    id obj = *--page->next;\n    memset((void*)page->next, SCRIBBLE, sizeof(*page->next));\n    page->protect();\n\n    if (obj != POOL_BOUNDARY) {\n      objc_release(obj);\n    }\n  }\n  setHotPage(this);\n}\n```\n\n这段代码的意思是，从page中一个一个的对autorelase对象发送release消息。终止的临界条件是POOL_BOUNDARY.\n\n![](/autoreleasePoll/autoreleasepoll3.png)\n\n## POOL_BOUNDARY (哨兵对象)是什么\n\n我们知道`AutoreleasePoolPage `的类定义中有一段代码:\n\n``` cpp\n#define POOL_BOUNDARY nil\n```\n* `AutoreleasePoolPage `调用`push`方法的时候，会把`POOL_BOUNDARY `放入自动自动释放池的栈顶.\n\n* `AutoreleasePoolPage `调用`pop`方法的时候，会对realease对象发送消息直到`POOL_BOUNDARY `.\n\n所以: `POOL_BOUNDARY `是每一次@autoreleasepoll{}的标记.\n\n\n\n\n\n\n\n\n\n\n\n","slug":"autoreleasePoll","published":1,"updated":"2018-12-11T04:32:10.163Z","_id":"cjpj8w0ut00015guqwtd4rtzz","comments":1,"layout":"post","photos":[],"link":"","content":"<p>苹果的内存管理机制(ARC)中有一个很有趣的东西-autoreleasePoll.可以延迟释放对象.抽出点时间来探究一下, 探究如下内容:</p>\n<ul>\n<li>@autoreleasePoll{}的本质是什么</li>\n<li>autoreleasePoll是通过什么对象来实现的</li>\n<li>AutoreleasePoolPage的数据结构</li>\n<li>AutoreleasePoolPage如何实现autorelease对象的存储</li>\n<li>AutoreleasePoolPage如何释放对象</li>\n<li>POOL_BOUNDARY (哨兵对象)是什么</li>\n</ul>\n<h2 id=\"autoreleasePoll-的本质是什么\"><a href=\"#autoreleasePoll-的本质是什么\" class=\"headerlink\" title=\"@autoreleasePoll{}的本质是什么\"></a>@autoreleasePoll{}的本质是什么</h2><p>首先写一段使用了autoreleasepoll的代码, main.m：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"hello world\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后使用终端命令编译成c++代码 main.cpp：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ clang -rewrite-objc main.m</span><br></pre></td></tr></table></figure>\n<p>我在main.cpp中的最后面找到了下面这段代码:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/* @autoreleasepool */</span> &#123; __AtAutoreleasePool __autoreleasepool; </span><br><span class=\"line\">    NSLog((NSString *)&amp;__NSConstantStringImpl__var_folders_98_x72bq3s93xb7g9w9qjqnrj8r0000gn_T_main_9f94b6_mi_0);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">AtAutoreleasePool</span> &#123;</span></span><br><span class=\"line\">  __AtAutoreleasePool() &#123;atautoreleasepoolobj = objc_autoreleasePoolPush();&#125;</span><br><span class=\"line\">  ~__AtAutoreleasePool() &#123;objc_autoreleasePoolPop(atautoreleasepoolobj);&#125;</span><br><span class=\"line\">  <span class=\"keyword\">void</span> * atautoreleasepoolobj;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>苹果在编译器将代码编译成了如上代码.在大括号开始的时候生成<code>__AtAutoreleasePool</code>对象, 会执行初始化方法<code>__AtAutoreleasePool()</code>,在大括号结束的时候，会释放 <code>__AtAutoreleasePool</code>对象， 会执行析构方法<code>~__AtAutoreleasePool()</code>.</p>\n<h2 id=\"autoreleasePoll是通过什么对象来实现的\"><a href=\"#autoreleasePoll是通过什么对象来实现的\" class=\"headerlink\" title=\"autoreleasePoll是通过什么对象来实现的\"></a>autoreleasePoll是通过什么对象来实现的</h2><p>通过上述的<code>__AtAutoreleasePool</code>的结构体.我们知道:</p>\n<ul>\n<li>objc_autoreleasePoolPush() 生成atautoreleasepoolobj对象.</li>\n</ul>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> *</span><br><span class=\"line\">objc_autoreleasePoolPush(<span class=\"keyword\">void</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> AutoreleasePoolPage::push();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>objc_autoreleasePoolPop() 释放atautoreleasepoolobj对象.</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span></span><br><span class=\"line\">objc_autoreleasePoolPop(<span class=\"keyword\">void</span> *ctxt)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  AutoreleasePoolPage::pop(ctxt);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们知道了<code>autoreleasePoll</code>的实现肯定和<code>AutoreleasePoolPage</code>有关系</p>\n<h2 id=\"AutoreleasePoolPage的数据结构\"><a href=\"#AutoreleasePoolPage的数据结构\" class=\"headerlink\" title=\"AutoreleasePoolPage的数据结构\"></a>AutoreleasePoolPage的数据结构</h2><p>下面我们来看一下<code>AutoreleasePoolPage</code>类定义，了解一下他的数据结构是怎样的.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AutoreleasePoolPage</span> </span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">define</span> POOL_BOUNDARY nil</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">size_t</span> <span class=\"keyword\">const</span> SIZE = PAGE_MAX_SIZE</span><br><span class=\"line\">  <span class=\"keyword\">magic_t</span> <span class=\"keyword\">const</span> magic;</span><br><span class=\"line\">  id *next;</span><br><span class=\"line\">  <span class=\"keyword\">pthread_t</span> <span class=\"keyword\">const</span> thread;</span><br><span class=\"line\">  AutoreleasePoolPage * <span class=\"keyword\">const</span> parent;</span><br><span class=\"line\">  AutoreleasePoolPage *child;</span><br><span class=\"line\">  <span class=\"keyword\">uint32_t</span> <span class=\"keyword\">const</span> depth;</span><br><span class=\"line\">  <span class=\"keyword\">uint32_t</span> hiwat;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>POOL_BOUNDARY : 哨兵对象</li>\n<li>SIZE : AutoreleasePoolPage的最大容量 (4096)</li>\n<li>magic : 完整性校验</li>\n<li>thread : 保存了当前page所在的线程</li>\n<li>next :  存储autorelease对象</li>\n<li>parent : 指向父节点的指针</li>\n<li>child : 指向子节点的指针</li>\n</ul>\n<p>可以看出，AutoreleasePoolPage是一个双向链表</p>\n<p><img src=\"/2018/06/05/autoreleasePoll/autoreleasepoll0.png\" alt=\"\"></p>\n<h2 id=\"AutoreleasePoolPage如何实现autorelease对象的存储\"><a href=\"#AutoreleasePoolPage如何实现autorelease对象的存储\" class=\"headerlink\" title=\"AutoreleasePoolPage如何实现autorelease对象的存储\"></a>AutoreleasePoolPage如何实现autorelease对象的存储</h2><p>要想知道如何实现<code>autorelease</code>对象的存储，需要知道<code>AutoreleasePoolPage</code>的<code>push</code>方法的实现:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> *<span class=\"title\">push</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> autoreleaseFast(POOL_BOUNDARY);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里看一下autoreleaseFast这个方法。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> id *<span class=\"title\">autoreleaseFast</span><span class=\"params\">(id obj)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  AutoreleasePoolPage *page = hotPage();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (page &amp;&amp; !page-&gt;full()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> page-&gt;add(obj);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (page) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> autoreleaseFullPage(obj, page);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> autoreleaseNoPage(obj);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里分为了三种情况</p>\n<ul>\n<li>page存在，并且page没有满。 <code>return page-&gt;add(obj);</code></li>\n<li>page存在，但是page满了。 <code>return autoreleaseFullPage(obj, page);</code></li>\n<li>page不存在。 <code>return autoreleaseNoPage(obj);</code></li>\n</ul>\n<p>###第一种情况:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">id *<span class=\"title\">add</span><span class=\"params\">(id obj)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  unprotect();</span><br><span class=\"line\">  id *ret = next;    </span><br><span class=\"line\">  *next++ = obj;</span><br><span class=\"line\">  protect();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中<code>*next++ = obj</code> 这句话的意思是: next指针指向obj,然后next指针+1.说明苹果是通过这种方式将autorelease对象存储的。</p>\n<p>###第二种情况:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> __attribute__((noinline))</span><br><span class=\"line\"><span class=\"function\">id *<span class=\"title\">autoreleaseFullPage</span><span class=\"params\">(id obj, AutoreleasePoolPage *page)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (page-&gt;child) page = page-&gt;child;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> page = <span class=\"keyword\">new</span> AutoreleasePoolPage(page);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">while</span> (page-&gt;full());</span><br><span class=\"line\"></span><br><span class=\"line\">  setHotPage(page);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> page-&gt;add(obj);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段代码的大概意思是: 通过一个接一个的节点来寻找没有满的page。如果page满了就新建一个page。把新建的page设置为hotpage, 然后将autorelase对象存储page中。</p>\n<p>###第三种情况:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> __attribute__((noinline))</span><br><span class=\"line\"><span class=\"function\">id *<span class=\"title\">autoreleaseNoPage</span><span class=\"params\">(id obj)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">bool</span> pushExtraBoundary = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (haveEmptyPoolPlaceholder()) &#123;</span><br><span class=\"line\">    pushExtraBoundary = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (obj != POOL_BOUNDARY  &amp;&amp;  DebugMissingPools) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// We are pushing an object with no pool in place, </span></span><br><span class=\"line\">    <span class=\"comment\">// and no-pool debugging was requested by environment.</span></span><br><span class=\"line\">    _objc_inform(<span class=\"string\">\"MISSING POOLS: (%p) Object %p of class %s \"</span></span><br><span class=\"line\">    <span class=\"string\">\"autoreleased with no pool in place - \"</span></span><br><span class=\"line\">    <span class=\"string\">\"objc_autoreleaseNoPool() to debug\"</span>, </span><br><span class=\"line\">    pthread_self(), (<span class=\"keyword\">void</span>*)obj, object_getClassName(obj));</span><br><span class=\"line\">    objc_autoreleaseNoPool(obj);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nil;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (obj == POOL_BOUNDARY  &amp;&amp;  !DebugPoolAllocation) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// We are pushing a pool with no pool in place,</span></span><br><span class=\"line\">    <span class=\"comment\">// and alloc-per-pool debugging was not requested.</span></span><br><span class=\"line\">    <span class=\"comment\">// Install and return the empty pool placeholder.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> setEmptyPoolPlaceholder();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  AutoreleasePoolPage *page = <span class=\"keyword\">new</span> AutoreleasePoolPage(nil);</span><br><span class=\"line\">  setHotPage(page);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (pushExtraBoundary) &#123;</span><br><span class=\"line\">    page-&gt;add(POOL_BOUNDARY);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> page-&gt;add(obj);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段代码的意思是新建一个page，将page设置为hotpage，然后将autorelease对象存入page中。</p>\n<p>通过对<code>push</code>方法的分析，我们了解了 <code>AutoreleasePoolPage</code>是通过next指针来实现<code>autorelease</code>对象的存储.</p>\n<p><code>AutoreleasePoolPage</code>的初始状态是这样的</p>\n<p><img src=\"/2018/06/05/autoreleasePoll/autoreleasepoll1.png\" alt=\"\"></p>\n<p>加入一个<code>autorelease</code>对象</p>\n<p><img src=\"/2018/06/05/autoreleasePoll/autoreleasepoll2.png\" alt=\"\"></p>\n<h2 id=\"AutoreleasePoolPage如何释放对象\"><a href=\"#AutoreleasePoolPage如何释放对象\" class=\"headerlink\" title=\"AutoreleasePoolPage如何释放对象\"></a>AutoreleasePoolPage如何释放对象</h2><p>下面我们来看看objc_autoreleasePoolPop的过程.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span></span><br><span class=\"line\">objc_autoreleasePoolPop(<span class=\"keyword\">void</span> *ctxt)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  AutoreleasePoolPage::pop(ctxt);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里我们知道objc_autoreleasePoolPop是通过AutoreleasePoolPage类的pop方法实现的. 传入的参数就是需要释放的AutoreleasePoolPage对象.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">pop</span><span class=\"params\">(<span class=\"keyword\">void</span> *token)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  AutoreleasePoolPage *page;</span><br><span class=\"line\">  id *stop;</span><br><span class=\"line\">  stop = (id *)token;</span><br><span class=\"line\">  page-&gt;releaseUntil(stop);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里我们关注一下 <code>page-&gt;releaseUntil(stop);</code></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">releaseUntil</span><span class=\"params\">(id *stop)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"keyword\">this</span>-&gt;next != stop) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    AutoreleasePoolPage *page = hotPage();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (page-&gt;empty()) &#123;</span><br><span class=\"line\">      page = page-&gt;parent;</span><br><span class=\"line\">      setHotPage(page);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    page-&gt;unprotect();</span><br><span class=\"line\">    id obj = *--page-&gt;next;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>((<span class=\"keyword\">void</span>*)page-&gt;next, SCRIBBLE, <span class=\"keyword\">sizeof</span>(*page-&gt;next));</span><br><span class=\"line\">    page-&gt;protect();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj != POOL_BOUNDARY) &#123;</span><br><span class=\"line\">      objc_release(obj);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  setHotPage(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段代码的意思是，从page中一个一个的对autorelase对象发送release消息。终止的临界条件是POOL_BOUNDARY.</p>\n<p><img src=\"/2018/06/05/autoreleasePoll/autoreleasepoll3.png\" alt=\"\"></p>\n<h2 id=\"POOL-BOUNDARY-哨兵对象-是什么\"><a href=\"#POOL-BOUNDARY-哨兵对象-是什么\" class=\"headerlink\" title=\"POOL_BOUNDARY (哨兵对象)是什么\"></a>POOL_BOUNDARY (哨兵对象)是什么</h2><p>我们知道<code>AutoreleasePoolPage</code>的类定义中有一段代码:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> POOL_BOUNDARY nil</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><code>AutoreleasePoolPage</code>调用<code>push</code>方法的时候，会把<code>POOL_BOUNDARY</code>放入自动自动释放池的栈顶.</p>\n</li>\n<li><p><code>AutoreleasePoolPage</code>调用<code>pop</code>方法的时候，会对realease对象发送消息直到<code>POOL_BOUNDARY</code>.</p>\n</li>\n</ul>\n<p>所以: <code>POOL_BOUNDARY</code>是每一次@autoreleasepoll{}的标记.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>苹果的内存管理机制(ARC)中有一个很有趣的东西-autoreleasePoll.可以延迟释放对象.抽出点时间来探究一下, 探究如下内容:</p>\n<ul>\n<li>@autoreleasePoll{}的本质是什么</li>\n<li>autoreleasePoll是通过什么对象来实现的</li>\n<li>AutoreleasePoolPage的数据结构</li>\n<li>AutoreleasePoolPage如何实现autorelease对象的存储</li>\n<li>AutoreleasePoolPage如何释放对象</li>\n<li>POOL_BOUNDARY (哨兵对象)是什么</li>\n</ul>\n<h2 id=\"autoreleasePoll-的本质是什么\"><a href=\"#autoreleasePoll-的本质是什么\" class=\"headerlink\" title=\"@autoreleasePoll{}的本质是什么\"></a>@autoreleasePoll{}的本质是什么</h2><p>首先写一段使用了autoreleasepoll的代码, main.m：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"hello world\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后使用终端命令编译成c++代码 main.cpp：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ clang -rewrite-objc main.m</span><br></pre></td></tr></table></figure>\n<p>我在main.cpp中的最后面找到了下面这段代码:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/* @autoreleasepool */</span> &#123; __AtAutoreleasePool __autoreleasepool; </span><br><span class=\"line\">    NSLog((NSString *)&amp;__NSConstantStringImpl__var_folders_98_x72bq3s93xb7g9w9qjqnrj8r0000gn_T_main_9f94b6_mi_0);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">AtAutoreleasePool</span> &#123;</span></span><br><span class=\"line\">  __AtAutoreleasePool() &#123;atautoreleasepoolobj = objc_autoreleasePoolPush();&#125;</span><br><span class=\"line\">  ~__AtAutoreleasePool() &#123;objc_autoreleasePoolPop(atautoreleasepoolobj);&#125;</span><br><span class=\"line\">  <span class=\"keyword\">void</span> * atautoreleasepoolobj;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>苹果在编译器将代码编译成了如上代码.在大括号开始的时候生成<code>__AtAutoreleasePool</code>对象, 会执行初始化方法<code>__AtAutoreleasePool()</code>,在大括号结束的时候，会释放 <code>__AtAutoreleasePool</code>对象， 会执行析构方法<code>~__AtAutoreleasePool()</code>.</p>\n<h2 id=\"autoreleasePoll是通过什么对象来实现的\"><a href=\"#autoreleasePoll是通过什么对象来实现的\" class=\"headerlink\" title=\"autoreleasePoll是通过什么对象来实现的\"></a>autoreleasePoll是通过什么对象来实现的</h2><p>通过上述的<code>__AtAutoreleasePool</code>的结构体.我们知道:</p>\n<ul>\n<li>objc_autoreleasePoolPush() 生成atautoreleasepoolobj对象.</li>\n</ul>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> *</span><br><span class=\"line\">objc_autoreleasePoolPush(<span class=\"keyword\">void</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> AutoreleasePoolPage::push();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>objc_autoreleasePoolPop() 释放atautoreleasepoolobj对象.</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span></span><br><span class=\"line\">objc_autoreleasePoolPop(<span class=\"keyword\">void</span> *ctxt)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  AutoreleasePoolPage::pop(ctxt);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们知道了<code>autoreleasePoll</code>的实现肯定和<code>AutoreleasePoolPage</code>有关系</p>\n<h2 id=\"AutoreleasePoolPage的数据结构\"><a href=\"#AutoreleasePoolPage的数据结构\" class=\"headerlink\" title=\"AutoreleasePoolPage的数据结构\"></a>AutoreleasePoolPage的数据结构</h2><p>下面我们来看一下<code>AutoreleasePoolPage</code>类定义，了解一下他的数据结构是怎样的.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AutoreleasePoolPage</span> </span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">define</span> POOL_BOUNDARY nil</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">size_t</span> <span class=\"keyword\">const</span> SIZE = PAGE_MAX_SIZE</span><br><span class=\"line\">  <span class=\"keyword\">magic_t</span> <span class=\"keyword\">const</span> magic;</span><br><span class=\"line\">  id *next;</span><br><span class=\"line\">  <span class=\"keyword\">pthread_t</span> <span class=\"keyword\">const</span> thread;</span><br><span class=\"line\">  AutoreleasePoolPage * <span class=\"keyword\">const</span> parent;</span><br><span class=\"line\">  AutoreleasePoolPage *child;</span><br><span class=\"line\">  <span class=\"keyword\">uint32_t</span> <span class=\"keyword\">const</span> depth;</span><br><span class=\"line\">  <span class=\"keyword\">uint32_t</span> hiwat;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>POOL_BOUNDARY : 哨兵对象</li>\n<li>SIZE : AutoreleasePoolPage的最大容量 (4096)</li>\n<li>magic : 完整性校验</li>\n<li>thread : 保存了当前page所在的线程</li>\n<li>next :  存储autorelease对象</li>\n<li>parent : 指向父节点的指针</li>\n<li>child : 指向子节点的指针</li>\n</ul>\n<p>可以看出，AutoreleasePoolPage是一个双向链表</p>\n<p><img src=\"/2018/06/05/autoreleasePoll/autoreleasepoll0.png\" alt=\"\"></p>\n<h2 id=\"AutoreleasePoolPage如何实现autorelease对象的存储\"><a href=\"#AutoreleasePoolPage如何实现autorelease对象的存储\" class=\"headerlink\" title=\"AutoreleasePoolPage如何实现autorelease对象的存储\"></a>AutoreleasePoolPage如何实现autorelease对象的存储</h2><p>要想知道如何实现<code>autorelease</code>对象的存储，需要知道<code>AutoreleasePoolPage</code>的<code>push</code>方法的实现:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> *<span class=\"title\">push</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> autoreleaseFast(POOL_BOUNDARY);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里看一下autoreleaseFast这个方法。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> id *<span class=\"title\">autoreleaseFast</span><span class=\"params\">(id obj)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  AutoreleasePoolPage *page = hotPage();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (page &amp;&amp; !page-&gt;full()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> page-&gt;add(obj);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (page) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> autoreleaseFullPage(obj, page);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> autoreleaseNoPage(obj);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里分为了三种情况</p>\n<ul>\n<li>page存在，并且page没有满。 <code>return page-&gt;add(obj);</code></li>\n<li>page存在，但是page满了。 <code>return autoreleaseFullPage(obj, page);</code></li>\n<li>page不存在。 <code>return autoreleaseNoPage(obj);</code></li>\n</ul>\n<p>###第一种情况:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">id *<span class=\"title\">add</span><span class=\"params\">(id obj)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  unprotect();</span><br><span class=\"line\">  id *ret = next;    </span><br><span class=\"line\">  *next++ = obj;</span><br><span class=\"line\">  protect();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中<code>*next++ = obj</code> 这句话的意思是: next指针指向obj,然后next指针+1.说明苹果是通过这种方式将autorelease对象存储的。</p>\n<p>###第二种情况:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> __attribute__((noinline))</span><br><span class=\"line\"><span class=\"function\">id *<span class=\"title\">autoreleaseFullPage</span><span class=\"params\">(id obj, AutoreleasePoolPage *page)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (page-&gt;child) page = page-&gt;child;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> page = <span class=\"keyword\">new</span> AutoreleasePoolPage(page);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">while</span> (page-&gt;full());</span><br><span class=\"line\"></span><br><span class=\"line\">  setHotPage(page);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> page-&gt;add(obj);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段代码的大概意思是: 通过一个接一个的节点来寻找没有满的page。如果page满了就新建一个page。把新建的page设置为hotpage, 然后将autorelase对象存储page中。</p>\n<p>###第三种情况:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> __attribute__((noinline))</span><br><span class=\"line\"><span class=\"function\">id *<span class=\"title\">autoreleaseNoPage</span><span class=\"params\">(id obj)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">bool</span> pushExtraBoundary = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (haveEmptyPoolPlaceholder()) &#123;</span><br><span class=\"line\">    pushExtraBoundary = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (obj != POOL_BOUNDARY  &amp;&amp;  DebugMissingPools) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// We are pushing an object with no pool in place, </span></span><br><span class=\"line\">    <span class=\"comment\">// and no-pool debugging was requested by environment.</span></span><br><span class=\"line\">    _objc_inform(<span class=\"string\">\"MISSING POOLS: (%p) Object %p of class %s \"</span></span><br><span class=\"line\">    <span class=\"string\">\"autoreleased with no pool in place - \"</span></span><br><span class=\"line\">    <span class=\"string\">\"objc_autoreleaseNoPool() to debug\"</span>, </span><br><span class=\"line\">    pthread_self(), (<span class=\"keyword\">void</span>*)obj, object_getClassName(obj));</span><br><span class=\"line\">    objc_autoreleaseNoPool(obj);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nil;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (obj == POOL_BOUNDARY  &amp;&amp;  !DebugPoolAllocation) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// We are pushing a pool with no pool in place,</span></span><br><span class=\"line\">    <span class=\"comment\">// and alloc-per-pool debugging was not requested.</span></span><br><span class=\"line\">    <span class=\"comment\">// Install and return the empty pool placeholder.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> setEmptyPoolPlaceholder();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  AutoreleasePoolPage *page = <span class=\"keyword\">new</span> AutoreleasePoolPage(nil);</span><br><span class=\"line\">  setHotPage(page);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (pushExtraBoundary) &#123;</span><br><span class=\"line\">    page-&gt;add(POOL_BOUNDARY);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> page-&gt;add(obj);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段代码的意思是新建一个page，将page设置为hotpage，然后将autorelease对象存入page中。</p>\n<p>通过对<code>push</code>方法的分析，我们了解了 <code>AutoreleasePoolPage</code>是通过next指针来实现<code>autorelease</code>对象的存储.</p>\n<p><code>AutoreleasePoolPage</code>的初始状态是这样的</p>\n<p><img src=\"/2018/06/05/autoreleasePoll/autoreleasepoll1.png\" alt=\"\"></p>\n<p>加入一个<code>autorelease</code>对象</p>\n<p><img src=\"/2018/06/05/autoreleasePoll/autoreleasepoll2.png\" alt=\"\"></p>\n<h2 id=\"AutoreleasePoolPage如何释放对象\"><a href=\"#AutoreleasePoolPage如何释放对象\" class=\"headerlink\" title=\"AutoreleasePoolPage如何释放对象\"></a>AutoreleasePoolPage如何释放对象</h2><p>下面我们来看看objc_autoreleasePoolPop的过程.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span></span><br><span class=\"line\">objc_autoreleasePoolPop(<span class=\"keyword\">void</span> *ctxt)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  AutoreleasePoolPage::pop(ctxt);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里我们知道objc_autoreleasePoolPop是通过AutoreleasePoolPage类的pop方法实现的. 传入的参数就是需要释放的AutoreleasePoolPage对象.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">pop</span><span class=\"params\">(<span class=\"keyword\">void</span> *token)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  AutoreleasePoolPage *page;</span><br><span class=\"line\">  id *stop;</span><br><span class=\"line\">  stop = (id *)token;</span><br><span class=\"line\">  page-&gt;releaseUntil(stop);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里我们关注一下 <code>page-&gt;releaseUntil(stop);</code></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">releaseUntil</span><span class=\"params\">(id *stop)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"keyword\">this</span>-&gt;next != stop) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    AutoreleasePoolPage *page = hotPage();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (page-&gt;empty()) &#123;</span><br><span class=\"line\">      page = page-&gt;parent;</span><br><span class=\"line\">      setHotPage(page);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    page-&gt;unprotect();</span><br><span class=\"line\">    id obj = *--page-&gt;next;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>((<span class=\"keyword\">void</span>*)page-&gt;next, SCRIBBLE, <span class=\"keyword\">sizeof</span>(*page-&gt;next));</span><br><span class=\"line\">    page-&gt;protect();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj != POOL_BOUNDARY) &#123;</span><br><span class=\"line\">      objc_release(obj);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  setHotPage(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段代码的意思是，从page中一个一个的对autorelase对象发送release消息。终止的临界条件是POOL_BOUNDARY.</p>\n<p><img src=\"/2018/06/05/autoreleasePoll/autoreleasepoll3.png\" alt=\"\"></p>\n<h2 id=\"POOL-BOUNDARY-哨兵对象-是什么\"><a href=\"#POOL-BOUNDARY-哨兵对象-是什么\" class=\"headerlink\" title=\"POOL_BOUNDARY (哨兵对象)是什么\"></a>POOL_BOUNDARY (哨兵对象)是什么</h2><p>我们知道<code>AutoreleasePoolPage</code>的类定义中有一段代码:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> POOL_BOUNDARY nil</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><code>AutoreleasePoolPage</code>调用<code>push</code>方法的时候，会把<code>POOL_BOUNDARY</code>放入自动自动释放池的栈顶.</p>\n</li>\n<li><p><code>AutoreleasePoolPage</code>调用<code>pop</code>方法的时候，会对realease对象发送消息直到<code>POOL_BOUNDARY</code>.</p>\n</li>\n</ul>\n<p>所以: <code>POOL_BOUNDARY</code>是每一次@autoreleasepoll{}的标记.</p>\n"},{"title":"c_server","date":"2018-10-16T04:40:44.000Z","_content":"\n今天研究了一下服务器的实现原理\n\n### server.c\n\n``` c\n#include <sys/socket.h>\n#include <sys/un.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <string.h>\n#include <stdio.h>\n\n#define PROT 8080  // 服务器监听端口\n\nint main()\n{\n\tint server_socket = socket(AF_INET, SOCK_STREAM, 0);\n\n\tstruct sockaddr_in server_addr;\n\tmemset(&server_addr, 0, sizeof(server_addr));\n\tserver_addr.sin_family = AF_INET;\n\tserver_addr.sin_addr.s_addr = htonl(INADDR_ANY);\n\tserver_addr.sin_port = htons(PROT);\n\n\t// bind \n\tbind(server_socket, (struct sockaddr *)&server_addr, sizeof(server_addr));\n\n\t// listen\n\tlisten(server_socket, 5);\n\n\n\twhile(1) {\n\t\t// accept\n\t\tint client_socket = accept(server_socket, NULL, NULL);\n\n\t\t// read\n\t\tchar buf[1024];\n\t\tread(client_socket, buf, 1024);\n\n\t\tprintf(\"%s\\n\", buf);\n\n\t\t// write \n\t\t// 响应行\n\t\tchar status[] = \"HTTP/1.0 200 OK\\r\\n\";\n\t\t// 响应头\n\t\tchar header[] = \"Server: sunner-server\\r\\nContent-Type: text/html;charset=utf-8\\r\\n\\r\\n\";\n\t\t// 响应体\n\t\tchar body[] = \"<html><head><title>sunner-server</title></head><body><p>hello world</p></body></html>\";\n\n\t\twrite(client_socket, status, sizeof(status));\n\t\twrite(client_socket, header, sizeof(header));\n\t\twrite(client_socket, body, sizeof(body));\n\n\t\tclose(client_socket);\n\t}\n\n\tclose(server_socket);\n\n\treturn 0;\n}\n\n\n```\n\n### 服务器执行\n\n![screenshot](c-server/terminal.png)\n\n### 浏览器测试\n\n![screenshot](c-server/broser.png)\n\n### 抓包\n\n![screenshot](c-server/wireshark.png)\n\n### 下载代码\n[code](c-server/c_server.zip)\n\n","source":"_posts/c-server.md","raw":"---\ntitle: c_server\ndate: 2018-10-16 12:40:44\ntags:\n---\n\n今天研究了一下服务器的实现原理\n\n### server.c\n\n``` c\n#include <sys/socket.h>\n#include <sys/un.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <string.h>\n#include <stdio.h>\n\n#define PROT 8080  // 服务器监听端口\n\nint main()\n{\n\tint server_socket = socket(AF_INET, SOCK_STREAM, 0);\n\n\tstruct sockaddr_in server_addr;\n\tmemset(&server_addr, 0, sizeof(server_addr));\n\tserver_addr.sin_family = AF_INET;\n\tserver_addr.sin_addr.s_addr = htonl(INADDR_ANY);\n\tserver_addr.sin_port = htons(PROT);\n\n\t// bind \n\tbind(server_socket, (struct sockaddr *)&server_addr, sizeof(server_addr));\n\n\t// listen\n\tlisten(server_socket, 5);\n\n\n\twhile(1) {\n\t\t// accept\n\t\tint client_socket = accept(server_socket, NULL, NULL);\n\n\t\t// read\n\t\tchar buf[1024];\n\t\tread(client_socket, buf, 1024);\n\n\t\tprintf(\"%s\\n\", buf);\n\n\t\t// write \n\t\t// 响应行\n\t\tchar status[] = \"HTTP/1.0 200 OK\\r\\n\";\n\t\t// 响应头\n\t\tchar header[] = \"Server: sunner-server\\r\\nContent-Type: text/html;charset=utf-8\\r\\n\\r\\n\";\n\t\t// 响应体\n\t\tchar body[] = \"<html><head><title>sunner-server</title></head><body><p>hello world</p></body></html>\";\n\n\t\twrite(client_socket, status, sizeof(status));\n\t\twrite(client_socket, header, sizeof(header));\n\t\twrite(client_socket, body, sizeof(body));\n\n\t\tclose(client_socket);\n\t}\n\n\tclose(server_socket);\n\n\treturn 0;\n}\n\n\n```\n\n### 服务器执行\n\n![screenshot](c-server/terminal.png)\n\n### 浏览器测试\n\n![screenshot](c-server/broser.png)\n\n### 抓包\n\n![screenshot](c-server/wireshark.png)\n\n### 下载代码\n[code](c-server/c_server.zip)\n\n","slug":"c-server","published":1,"updated":"2018-12-05T05:02:37.281Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpj8w0uv00025guqcmzbac6w","content":"<p>今天研究了一下服务器的实现原理</p>\n<h3 id=\"server-c\"><a href=\"#server-c\" class=\"headerlink\" title=\"server.c\"></a>server.c</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/un.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;arpa/inet.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PROT 8080  <span class=\"comment\">// 服务器监听端口</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> server_socket = socket(AF_INET, SOCK_STREAM, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr_in</span> <span class=\"title\">server_addr</span>;</span></span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(&amp;server_addr, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(server_addr));</span><br><span class=\"line\">\tserver_addr.sin_family = AF_INET;</span><br><span class=\"line\">\tserver_addr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class=\"line\">\tserver_addr.sin_port = htons(PROT);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// bind </span></span><br><span class=\"line\">\tbind(server_socket, (struct sockaddr *)&amp;server_addr, <span class=\"keyword\">sizeof</span>(server_addr));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// listen</span></span><br><span class=\"line\">\tlisten(server_socket, <span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// accept</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> client_socket = accept(server_socket, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// read</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> buf[<span class=\"number\">1024</span>];</span><br><span class=\"line\">\t\tread(client_socket, buf, <span class=\"number\">1024</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\\n\"</span>, buf);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// write </span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 响应行</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> status[] = <span class=\"string\">\"HTTP/1.0 200 OK\\r\\n\"</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 响应头</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> header[] = <span class=\"string\">\"Server: sunner-server\\r\\nContent-Type: text/html;charset=utf-8\\r\\n\\r\\n\"</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 响应体</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> body[] = <span class=\"string\">\"&lt;html&gt;&lt;head&gt;&lt;title&gt;sunner-server&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;hello world&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\twrite(client_socket, status, <span class=\"keyword\">sizeof</span>(status));</span><br><span class=\"line\">\t\twrite(client_socket, header, <span class=\"keyword\">sizeof</span>(header));</span><br><span class=\"line\">\t\twrite(client_socket, body, <span class=\"keyword\">sizeof</span>(body));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tclose(client_socket);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tclose(server_socket);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"服务器执行\"><a href=\"#服务器执行\" class=\"headerlink\" title=\"服务器执行\"></a>服务器执行</h3><p><img src=\"/2018/10/16/c-server/terminal.png\" alt=\"screenshot\"></p>\n<h3 id=\"浏览器测试\"><a href=\"#浏览器测试\" class=\"headerlink\" title=\"浏览器测试\"></a>浏览器测试</h3><p><img src=\"/2018/10/16/c-server/broser.png\" alt=\"screenshot\"></p>\n<h3 id=\"抓包\"><a href=\"#抓包\" class=\"headerlink\" title=\"抓包\"></a>抓包</h3><p><img src=\"/2018/10/16/c-server/wireshark.png\" alt=\"screenshot\"></p>\n<h3 id=\"下载代码\"><a href=\"#下载代码\" class=\"headerlink\" title=\"下载代码\"></a>下载代码</h3><p><a href=\"c-server/c_server.zip\">code</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天研究了一下服务器的实现原理</p>\n<h3 id=\"server-c\"><a href=\"#server-c\" class=\"headerlink\" title=\"server.c\"></a>server.c</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/un.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;arpa/inet.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PROT 8080  <span class=\"comment\">// 服务器监听端口</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> server_socket = socket(AF_INET, SOCK_STREAM, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr_in</span> <span class=\"title\">server_addr</span>;</span></span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(&amp;server_addr, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(server_addr));</span><br><span class=\"line\">\tserver_addr.sin_family = AF_INET;</span><br><span class=\"line\">\tserver_addr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class=\"line\">\tserver_addr.sin_port = htons(PROT);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// bind </span></span><br><span class=\"line\">\tbind(server_socket, (struct sockaddr *)&amp;server_addr, <span class=\"keyword\">sizeof</span>(server_addr));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// listen</span></span><br><span class=\"line\">\tlisten(server_socket, <span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// accept</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> client_socket = accept(server_socket, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// read</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> buf[<span class=\"number\">1024</span>];</span><br><span class=\"line\">\t\tread(client_socket, buf, <span class=\"number\">1024</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\\n\"</span>, buf);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// write </span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 响应行</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> status[] = <span class=\"string\">\"HTTP/1.0 200 OK\\r\\n\"</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 响应头</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> header[] = <span class=\"string\">\"Server: sunner-server\\r\\nContent-Type: text/html;charset=utf-8\\r\\n\\r\\n\"</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 响应体</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> body[] = <span class=\"string\">\"&lt;html&gt;&lt;head&gt;&lt;title&gt;sunner-server&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;hello world&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\twrite(client_socket, status, <span class=\"keyword\">sizeof</span>(status));</span><br><span class=\"line\">\t\twrite(client_socket, header, <span class=\"keyword\">sizeof</span>(header));</span><br><span class=\"line\">\t\twrite(client_socket, body, <span class=\"keyword\">sizeof</span>(body));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tclose(client_socket);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tclose(server_socket);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"服务器执行\"><a href=\"#服务器执行\" class=\"headerlink\" title=\"服务器执行\"></a>服务器执行</h3><p><img src=\"/2018/10/16/c-server/terminal.png\" alt=\"screenshot\"></p>\n<h3 id=\"浏览器测试\"><a href=\"#浏览器测试\" class=\"headerlink\" title=\"浏览器测试\"></a>浏览器测试</h3><p><img src=\"/2018/10/16/c-server/broser.png\" alt=\"screenshot\"></p>\n<h3 id=\"抓包\"><a href=\"#抓包\" class=\"headerlink\" title=\"抓包\"></a>抓包</h3><p><img src=\"/2018/10/16/c-server/wireshark.png\" alt=\"screenshot\"></p>\n<h3 id=\"下载代码\"><a href=\"#下载代码\" class=\"headerlink\" title=\"下载代码\"></a>下载代码</h3><p><a href=\"c-server/c_server.zip\">code</a></p>\n"},{"title":"copy&mutableCopy","date":"2016-08-05T03:12:26.000Z","_content":"\n对于熟悉iOS开发的人的来说，copy和mutableCopy这两个词肯定不陌生。但是区别是什么呢，百度一搜一大堆，但是解释的千奇百怪，毫无真相。\n\n## 首先明白两个概念\n\n* 浅拷贝: 也称为浅复制。不开辟新的内存空间。仅仅是拷贝指向对象的指针。\n* 深拷贝: 也称为深复制。开辟新的内存空间。拷贝整个对象内存到新开辟的内存中去。\n\n## 解释一个英文单词\n\n* mutable 可变的\n\niOS开发中最常见的类就是NSString, 还有一些容器类(NSArray, NSDictionary, NSSet).我会选取经典的NSString以及容器类的代表NSArray来写4个例子。得出实验结论。\n\n## 例子1\n\n针对NSSting 写出下列测试代码：\n\n``` objc\nNSString *str1 = @\"123\";  // 常量区分配\nNSString *str2 = [str1 copy];\nNSMutableString *str3 = [str1 mutableCopy];\nprintf(\"\\n str1 -> = %p \\n str2 -> = %p \\n str3 -> = %p\", str1, str2, str3);\n```\n\n控制台的打印如下\n\n``` bash\nstr1 -> = 0x1072d9088\nstr2 -> = 0x1072d9088\nstr3 -> = 0x600001c2c000\n```\n\n可以看出：\n\n* str1指向的地址和str2指向的地址是同一个地址.str2并没有开辟新的空间,仅仅是指针的拷贝.\n* str1指向的地址和str3指向的地址不是同一个地址。str3开辟了新的空间.\n\n## 例子2\n\n针对NSMutableString 写出下列测试代码：\n\n``` objc\nNSString *str1 = @\"123\"; // 常量区分配\nNSMutableString *m_str1 = [NSMutableString stringWithString:str1];  // 堆区重新分配\nNSString *m_str2 = [m_str1 copy];\nNSMutableString *m_str3 = [m_str1 mutableCopy];\nprintf(\"\\n m_str1 -> = %p \\n m_str2 -> = %p \\n m_str3 -> = %p\", m_str1, m_str2, m_str3);\n```\n\n控制台的打印如下\n\n``` bash\nm_str1 -> = 0x600003143b40\nm_str2 -> = 0xbe9e1c56d14b79e2\nm_str3 -> = 0x600003143e70\n```\n\n可以看出：\n\n* m_str1指向的地址和m_str2指向的地址不是同一个地址. m_str2开辟了新的空间.\n* m_str1指向的地址和m_str3指向的地址不是同一个地址。m_str3开辟了新的空间.\n\n## 例子3\n\n针对容器类NSArray 写出下列测试代码：\n\n``` objc\nNSArray *arr1 = @[@1, @2, @3];\nNSArray *arr2 = [arr1 copy];\nNSMutableArray *arr3 = [arr1 mutableCopy];\nprintf(\"\\n arr1 -> = %p \\n arr2 -> = %p \\n arr3 -> = %p\", arr1, arr2, arr3);\nprintf(\"\\n arr1 items:\");\nfor (int i = 0; i < arr1.count; i++) {\n    printf(\"\\n %d -> = %p\", i, arr1[i]);\n}\nprintf(\"\\n arr2 items:\");\nfor (int i = 0; i < arr2.count; i++) {\n    printf(\"\\n %d -> = %p\", i, arr2[i]);\n}\nprintf(\"\\n arr3 items:\");\nfor (int i = 0; i < arr3.count; i++) {\n    printf(\"\\n %d -> = %p\", i, arr3[i]);\n}\n```\n\n控制台的打印如下\n\n``` bash\narr1 -> = 0x600001490090\narr2 -> = 0x600001490090\narr3 -> = 0x6000014900c0\narr1 items:\n0 -> = 0xb690da9c196700a8\n1 -> = 0xb690da9c19670098\n2 -> = 0xb690da9c19670088\narr2 items:\n0 -> = 0xb690da9c196700a8\n1 -> = 0xb690da9c19670098\n2 -> = 0xb690da9c19670088\narr3 items:\n0 -> = 0xb690da9c196700a8\n1 -> = 0xb690da9c19670098\n2 -> = 0xb690da9c19670088\n```\n\n可以看出：\n\n* arr1指向的地址和arr2指向的地址是同一个地址.str2并没有开辟新的空间,仅仅是指针的拷贝.\n* arr1中的子元素指向的地址和arr2中的子元素指向的地址是同一个地址, 子元素没有开辟内存，仅仅是指针的拷贝\n* arr1指向的地址和str3指向的地址不是同一个地址。arr3开辟了新的空间.\n* arr1中的子元素指向的地址和arr3中的子元素指向的地址是同一个地址, 子元素没有开辟内存，仅仅是指针的拷贝\n\n## 例子4\n\n针对容器类NSMutableArray 写出下列测试代码：\n\n``` objc\nNSArray *arr1 = @[@1, @2, @3];\nNSMutableArray *m_arr1 = [NSMutableArray arrayWithArray:arr1];\nNSArray *m_arr2 = [arr1 copy];\nNSMutableArray *m_arr3 = [arr1 mutableCopy];\nprintf(\"\\n m_arr1 -> = %p \\n m_arr2 -> = %p \\n m_arr3 -> = %p\", m_arr1, m_arr2, m_arr3);\nprintf(\"\\n m_arr1 items:\");\nfor (int i = 0; i < m_arr1.count; i++) {\n    printf(\"\\n %d -> = %p\", i, m_arr1[i]);\n}\nprintf(\"\\n m_arr2 items:\");\nfor (int i = 0; i < m_arr2.count; i++) {\n    printf(\"\\n %d -> = %p\", i, m_arr2[i]);\n}\nprintf(\"\\n m_arr3 items:\");\nfor (int i = 0; i < m_arr3.count; i++) {\n    printf(\"\\n %d -> = %p\", i, m_arr3[i]);\n}\n```\n\n控制台的打印如下\n\n``` bash\nm_arr1 -> = 0x6000014900c0\nm_arr2 -> = 0x600001490090\nm_arr3 -> = 0x600001490030\nm_arr1 items:\n0 -> = 0xb690da9c196700a8\n1 -> = 0xb690da9c19670098\n2 -> = 0xb690da9c19670088\nm_arr2 items:\n0 -> = 0xb690da9c196700a8\n1 -> = 0xb690da9c19670098\n2 -> = 0xb690da9c19670088\nm_arr3 items:\n0 -> = 0xb690da9c196700a8\n1 -> = 0xb690da9c19670098\n2 -> = 0xb690da9c19670088\n```\n\n可以看出\n\n* m_arr1指向的地址和m_str2指向的地址是同一个地址. arr2开辟了新的空间.\n* m_arr1中的子元素指向的地址和m_arr2中的子元素指向的地址是同一个地址, 子元素没有开辟内存，仅仅是指针的拷贝\n* m_str1指向的地址和m_str3指向的地址不是同一个地址。str3开辟了新的空间\n* m_arr1中的子元素指向的地址和m_arr3中的子元素指向的地址是同一个地址, 子元素没有开辟内存，仅仅是指针的拷贝\n\n\n## 结论\n\n* copy产生不可变类型\n * 不可变类型 -> copy -> 不可变类型 : 不开辟空间\n * 可变类型 -> copy -> 不可变类型 : 开辟空间\n * 容器类中的子元素仅仅指针拷贝,不开辟空间\n* mutableCopy产生可变类型\n * 不可变类型 -> mutableCopy -> 可变类型 : 开辟空间\n * 可变类型 -> copy -> 可变类型 : 开辟空间\n * 容器类中的子元素仅仅指针拷贝,不开辟空间\n\n\n\n## 代码\n\n[code](https://github.com/sunnercc/Program/tree/master/copy-mutableCopy)\n\n\n\n    \n\n\n\n\n","source":"_posts/copy-mutableCopy.md","raw":"---\ntitle: copy&mutableCopy\ndate: 2016-08-05 11:12:26\ntags:\n---\n\n对于熟悉iOS开发的人的来说，copy和mutableCopy这两个词肯定不陌生。但是区别是什么呢，百度一搜一大堆，但是解释的千奇百怪，毫无真相。\n\n## 首先明白两个概念\n\n* 浅拷贝: 也称为浅复制。不开辟新的内存空间。仅仅是拷贝指向对象的指针。\n* 深拷贝: 也称为深复制。开辟新的内存空间。拷贝整个对象内存到新开辟的内存中去。\n\n## 解释一个英文单词\n\n* mutable 可变的\n\niOS开发中最常见的类就是NSString, 还有一些容器类(NSArray, NSDictionary, NSSet).我会选取经典的NSString以及容器类的代表NSArray来写4个例子。得出实验结论。\n\n## 例子1\n\n针对NSSting 写出下列测试代码：\n\n``` objc\nNSString *str1 = @\"123\";  // 常量区分配\nNSString *str2 = [str1 copy];\nNSMutableString *str3 = [str1 mutableCopy];\nprintf(\"\\n str1 -> = %p \\n str2 -> = %p \\n str3 -> = %p\", str1, str2, str3);\n```\n\n控制台的打印如下\n\n``` bash\nstr1 -> = 0x1072d9088\nstr2 -> = 0x1072d9088\nstr3 -> = 0x600001c2c000\n```\n\n可以看出：\n\n* str1指向的地址和str2指向的地址是同一个地址.str2并没有开辟新的空间,仅仅是指针的拷贝.\n* str1指向的地址和str3指向的地址不是同一个地址。str3开辟了新的空间.\n\n## 例子2\n\n针对NSMutableString 写出下列测试代码：\n\n``` objc\nNSString *str1 = @\"123\"; // 常量区分配\nNSMutableString *m_str1 = [NSMutableString stringWithString:str1];  // 堆区重新分配\nNSString *m_str2 = [m_str1 copy];\nNSMutableString *m_str3 = [m_str1 mutableCopy];\nprintf(\"\\n m_str1 -> = %p \\n m_str2 -> = %p \\n m_str3 -> = %p\", m_str1, m_str2, m_str3);\n```\n\n控制台的打印如下\n\n``` bash\nm_str1 -> = 0x600003143b40\nm_str2 -> = 0xbe9e1c56d14b79e2\nm_str3 -> = 0x600003143e70\n```\n\n可以看出：\n\n* m_str1指向的地址和m_str2指向的地址不是同一个地址. m_str2开辟了新的空间.\n* m_str1指向的地址和m_str3指向的地址不是同一个地址。m_str3开辟了新的空间.\n\n## 例子3\n\n针对容器类NSArray 写出下列测试代码：\n\n``` objc\nNSArray *arr1 = @[@1, @2, @3];\nNSArray *arr2 = [arr1 copy];\nNSMutableArray *arr3 = [arr1 mutableCopy];\nprintf(\"\\n arr1 -> = %p \\n arr2 -> = %p \\n arr3 -> = %p\", arr1, arr2, arr3);\nprintf(\"\\n arr1 items:\");\nfor (int i = 0; i < arr1.count; i++) {\n    printf(\"\\n %d -> = %p\", i, arr1[i]);\n}\nprintf(\"\\n arr2 items:\");\nfor (int i = 0; i < arr2.count; i++) {\n    printf(\"\\n %d -> = %p\", i, arr2[i]);\n}\nprintf(\"\\n arr3 items:\");\nfor (int i = 0; i < arr3.count; i++) {\n    printf(\"\\n %d -> = %p\", i, arr3[i]);\n}\n```\n\n控制台的打印如下\n\n``` bash\narr1 -> = 0x600001490090\narr2 -> = 0x600001490090\narr3 -> = 0x6000014900c0\narr1 items:\n0 -> = 0xb690da9c196700a8\n1 -> = 0xb690da9c19670098\n2 -> = 0xb690da9c19670088\narr2 items:\n0 -> = 0xb690da9c196700a8\n1 -> = 0xb690da9c19670098\n2 -> = 0xb690da9c19670088\narr3 items:\n0 -> = 0xb690da9c196700a8\n1 -> = 0xb690da9c19670098\n2 -> = 0xb690da9c19670088\n```\n\n可以看出：\n\n* arr1指向的地址和arr2指向的地址是同一个地址.str2并没有开辟新的空间,仅仅是指针的拷贝.\n* arr1中的子元素指向的地址和arr2中的子元素指向的地址是同一个地址, 子元素没有开辟内存，仅仅是指针的拷贝\n* arr1指向的地址和str3指向的地址不是同一个地址。arr3开辟了新的空间.\n* arr1中的子元素指向的地址和arr3中的子元素指向的地址是同一个地址, 子元素没有开辟内存，仅仅是指针的拷贝\n\n## 例子4\n\n针对容器类NSMutableArray 写出下列测试代码：\n\n``` objc\nNSArray *arr1 = @[@1, @2, @3];\nNSMutableArray *m_arr1 = [NSMutableArray arrayWithArray:arr1];\nNSArray *m_arr2 = [arr1 copy];\nNSMutableArray *m_arr3 = [arr1 mutableCopy];\nprintf(\"\\n m_arr1 -> = %p \\n m_arr2 -> = %p \\n m_arr3 -> = %p\", m_arr1, m_arr2, m_arr3);\nprintf(\"\\n m_arr1 items:\");\nfor (int i = 0; i < m_arr1.count; i++) {\n    printf(\"\\n %d -> = %p\", i, m_arr1[i]);\n}\nprintf(\"\\n m_arr2 items:\");\nfor (int i = 0; i < m_arr2.count; i++) {\n    printf(\"\\n %d -> = %p\", i, m_arr2[i]);\n}\nprintf(\"\\n m_arr3 items:\");\nfor (int i = 0; i < m_arr3.count; i++) {\n    printf(\"\\n %d -> = %p\", i, m_arr3[i]);\n}\n```\n\n控制台的打印如下\n\n``` bash\nm_arr1 -> = 0x6000014900c0\nm_arr2 -> = 0x600001490090\nm_arr3 -> = 0x600001490030\nm_arr1 items:\n0 -> = 0xb690da9c196700a8\n1 -> = 0xb690da9c19670098\n2 -> = 0xb690da9c19670088\nm_arr2 items:\n0 -> = 0xb690da9c196700a8\n1 -> = 0xb690da9c19670098\n2 -> = 0xb690da9c19670088\nm_arr3 items:\n0 -> = 0xb690da9c196700a8\n1 -> = 0xb690da9c19670098\n2 -> = 0xb690da9c19670088\n```\n\n可以看出\n\n* m_arr1指向的地址和m_str2指向的地址是同一个地址. arr2开辟了新的空间.\n* m_arr1中的子元素指向的地址和m_arr2中的子元素指向的地址是同一个地址, 子元素没有开辟内存，仅仅是指针的拷贝\n* m_str1指向的地址和m_str3指向的地址不是同一个地址。str3开辟了新的空间\n* m_arr1中的子元素指向的地址和m_arr3中的子元素指向的地址是同一个地址, 子元素没有开辟内存，仅仅是指针的拷贝\n\n\n## 结论\n\n* copy产生不可变类型\n * 不可变类型 -> copy -> 不可变类型 : 不开辟空间\n * 可变类型 -> copy -> 不可变类型 : 开辟空间\n * 容器类中的子元素仅仅指针拷贝,不开辟空间\n* mutableCopy产生可变类型\n * 不可变类型 -> mutableCopy -> 可变类型 : 开辟空间\n * 可变类型 -> copy -> 可变类型 : 开辟空间\n * 容器类中的子元素仅仅指针拷贝,不开辟空间\n\n\n\n## 代码\n\n[code](https://github.com/sunnercc/Program/tree/master/copy-mutableCopy)\n\n\n\n    \n\n\n\n\n","slug":"copy-mutableCopy","published":1,"updated":"2018-12-05T08:21:54.739Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpj8w0uz00035guqq4e7wt3b","content":"<p>对于熟悉iOS开发的人的来说，copy和mutableCopy这两个词肯定不陌生。但是区别是什么呢，百度一搜一大堆，但是解释的千奇百怪，毫无真相。</p>\n<h2 id=\"首先明白两个概念\"><a href=\"#首先明白两个概念\" class=\"headerlink\" title=\"首先明白两个概念\"></a>首先明白两个概念</h2><ul>\n<li>浅拷贝: 也称为浅复制。不开辟新的内存空间。仅仅是拷贝指向对象的指针。</li>\n<li>深拷贝: 也称为深复制。开辟新的内存空间。拷贝整个对象内存到新开辟的内存中去。</li>\n</ul>\n<h2 id=\"解释一个英文单词\"><a href=\"#解释一个英文单词\" class=\"headerlink\" title=\"解释一个英文单词\"></a>解释一个英文单词</h2><ul>\n<li>mutable 可变的</li>\n</ul>\n<p>iOS开发中最常见的类就是NSString, 还有一些容器类(NSArray, NSDictionary, NSSet).我会选取经典的NSString以及容器类的代表NSArray来写4个例子。得出实验结论。</p>\n<h2 id=\"例子1\"><a href=\"#例子1\" class=\"headerlink\" title=\"例子1\"></a>例子1</h2><p>针对NSSting 写出下列测试代码：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSString</span> *str1 = <span class=\"string\">@\"123\"</span>;  <span class=\"comment\">// 常量区分配</span></span><br><span class=\"line\"><span class=\"built_in\">NSString</span> *str2 = [str1 <span class=\"keyword\">copy</span>];</span><br><span class=\"line\"><span class=\"built_in\">NSMutableString</span> *str3 = [str1 mutableCopy];</span><br><span class=\"line\">printf(<span class=\"string\">\"\\n str1 -&gt; = %p \\n str2 -&gt; = %p \\n str3 -&gt; = %p\"</span>, str1, str2, str3);</span><br></pre></td></tr></table></figure>\n<p>控制台的打印如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str1 -&gt; = 0x1072d9088</span><br><span class=\"line\">str2 -&gt; = 0x1072d9088</span><br><span class=\"line\">str3 -&gt; = 0x600001c2c000</span><br></pre></td></tr></table></figure>\n<p>可以看出：</p>\n<ul>\n<li>str1指向的地址和str2指向的地址是同一个地址.str2并没有开辟新的空间,仅仅是指针的拷贝.</li>\n<li>str1指向的地址和str3指向的地址不是同一个地址。str3开辟了新的空间.</li>\n</ul>\n<h2 id=\"例子2\"><a href=\"#例子2\" class=\"headerlink\" title=\"例子2\"></a>例子2</h2><p>针对NSMutableString 写出下列测试代码：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSString</span> *str1 = <span class=\"string\">@\"123\"</span>; <span class=\"comment\">// 常量区分配</span></span><br><span class=\"line\"><span class=\"built_in\">NSMutableString</span> *m_str1 = [<span class=\"built_in\">NSMutableString</span> stringWithString:str1];  <span class=\"comment\">// 堆区重新分配</span></span><br><span class=\"line\"><span class=\"built_in\">NSString</span> *m_str2 = [m_str1 <span class=\"keyword\">copy</span>];</span><br><span class=\"line\"><span class=\"built_in\">NSMutableString</span> *m_str3 = [m_str1 mutableCopy];</span><br><span class=\"line\">printf(<span class=\"string\">\"\\n m_str1 -&gt; = %p \\n m_str2 -&gt; = %p \\n m_str3 -&gt; = %p\"</span>, m_str1, m_str2, m_str3);</span><br></pre></td></tr></table></figure>\n<p>控制台的打印如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">m_str1 -&gt; = 0x600003143b40</span><br><span class=\"line\">m_str2 -&gt; = 0xbe9e1c56d14b79e2</span><br><span class=\"line\">m_str3 -&gt; = 0x600003143e70</span><br></pre></td></tr></table></figure>\n<p>可以看出：</p>\n<ul>\n<li>m_str1指向的地址和m_str2指向的地址不是同一个地址. m_str2开辟了新的空间.</li>\n<li>m_str1指向的地址和m_str3指向的地址不是同一个地址。m_str3开辟了新的空间.</li>\n</ul>\n<h2 id=\"例子3\"><a href=\"#例子3\" class=\"headerlink\" title=\"例子3\"></a>例子3</h2><p>针对容器类NSArray 写出下列测试代码：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSArray</span> *arr1 = @[@<span class=\"number\">1</span>, @<span class=\"number\">2</span>, @<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"built_in\">NSArray</span> *arr2 = [arr1 <span class=\"keyword\">copy</span>];</span><br><span class=\"line\"><span class=\"built_in\">NSMutableArray</span> *arr3 = [arr1 mutableCopy];</span><br><span class=\"line\">printf(<span class=\"string\">\"\\n arr1 -&gt; = %p \\n arr2 -&gt; = %p \\n arr3 -&gt; = %p\"</span>, arr1, arr2, arr3);</span><br><span class=\"line\">printf(<span class=\"string\">\"\\n arr1 items:\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr1.count; i++) &#123;</span><br><span class=\"line\">    printf(<span class=\"string\">\"\\n %d -&gt; = %p\"</span>, i, arr1[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">printf(<span class=\"string\">\"\\n arr2 items:\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr2.count; i++) &#123;</span><br><span class=\"line\">    printf(<span class=\"string\">\"\\n %d -&gt; = %p\"</span>, i, arr2[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">printf(<span class=\"string\">\"\\n arr3 items:\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr3.count; i++) &#123;</span><br><span class=\"line\">    printf(<span class=\"string\">\"\\n %d -&gt; = %p\"</span>, i, arr3[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>控制台的打印如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr1 -&gt; = 0x600001490090</span><br><span class=\"line\">arr2 -&gt; = 0x600001490090</span><br><span class=\"line\">arr3 -&gt; = 0x6000014900c0</span><br><span class=\"line\">arr1 items:</span><br><span class=\"line\">0 -&gt; = 0xb690da9c196700a8</span><br><span class=\"line\">1 -&gt; = 0xb690da9c19670098</span><br><span class=\"line\">2 -&gt; = 0xb690da9c19670088</span><br><span class=\"line\">arr2 items:</span><br><span class=\"line\">0 -&gt; = 0xb690da9c196700a8</span><br><span class=\"line\">1 -&gt; = 0xb690da9c19670098</span><br><span class=\"line\">2 -&gt; = 0xb690da9c19670088</span><br><span class=\"line\">arr3 items:</span><br><span class=\"line\">0 -&gt; = 0xb690da9c196700a8</span><br><span class=\"line\">1 -&gt; = 0xb690da9c19670098</span><br><span class=\"line\">2 -&gt; = 0xb690da9c19670088</span><br></pre></td></tr></table></figure>\n<p>可以看出：</p>\n<ul>\n<li>arr1指向的地址和arr2指向的地址是同一个地址.str2并没有开辟新的空间,仅仅是指针的拷贝.</li>\n<li>arr1中的子元素指向的地址和arr2中的子元素指向的地址是同一个地址, 子元素没有开辟内存，仅仅是指针的拷贝</li>\n<li>arr1指向的地址和str3指向的地址不是同一个地址。arr3开辟了新的空间.</li>\n<li>arr1中的子元素指向的地址和arr3中的子元素指向的地址是同一个地址, 子元素没有开辟内存，仅仅是指针的拷贝</li>\n</ul>\n<h2 id=\"例子4\"><a href=\"#例子4\" class=\"headerlink\" title=\"例子4\"></a>例子4</h2><p>针对容器类NSMutableArray 写出下列测试代码：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSArray</span> *arr1 = @[@<span class=\"number\">1</span>, @<span class=\"number\">2</span>, @<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"built_in\">NSMutableArray</span> *m_arr1 = [<span class=\"built_in\">NSMutableArray</span> arrayWithArray:arr1];</span><br><span class=\"line\"><span class=\"built_in\">NSArray</span> *m_arr2 = [arr1 <span class=\"keyword\">copy</span>];</span><br><span class=\"line\"><span class=\"built_in\">NSMutableArray</span> *m_arr3 = [arr1 mutableCopy];</span><br><span class=\"line\">printf(<span class=\"string\">\"\\n m_arr1 -&gt; = %p \\n m_arr2 -&gt; = %p \\n m_arr3 -&gt; = %p\"</span>, m_arr1, m_arr2, m_arr3);</span><br><span class=\"line\">printf(<span class=\"string\">\"\\n m_arr1 items:\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m_arr1.count; i++) &#123;</span><br><span class=\"line\">    printf(<span class=\"string\">\"\\n %d -&gt; = %p\"</span>, i, m_arr1[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">printf(<span class=\"string\">\"\\n m_arr2 items:\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m_arr2.count; i++) &#123;</span><br><span class=\"line\">    printf(<span class=\"string\">\"\\n %d -&gt; = %p\"</span>, i, m_arr2[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">printf(<span class=\"string\">\"\\n m_arr3 items:\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m_arr3.count; i++) &#123;</span><br><span class=\"line\">    printf(<span class=\"string\">\"\\n %d -&gt; = %p\"</span>, i, m_arr3[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>控制台的打印如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">m_arr1 -&gt; = 0x6000014900c0</span><br><span class=\"line\">m_arr2 -&gt; = 0x600001490090</span><br><span class=\"line\">m_arr3 -&gt; = 0x600001490030</span><br><span class=\"line\">m_arr1 items:</span><br><span class=\"line\">0 -&gt; = 0xb690da9c196700a8</span><br><span class=\"line\">1 -&gt; = 0xb690da9c19670098</span><br><span class=\"line\">2 -&gt; = 0xb690da9c19670088</span><br><span class=\"line\">m_arr2 items:</span><br><span class=\"line\">0 -&gt; = 0xb690da9c196700a8</span><br><span class=\"line\">1 -&gt; = 0xb690da9c19670098</span><br><span class=\"line\">2 -&gt; = 0xb690da9c19670088</span><br><span class=\"line\">m_arr3 items:</span><br><span class=\"line\">0 -&gt; = 0xb690da9c196700a8</span><br><span class=\"line\">1 -&gt; = 0xb690da9c19670098</span><br><span class=\"line\">2 -&gt; = 0xb690da9c19670088</span><br></pre></td></tr></table></figure>\n<p>可以看出</p>\n<ul>\n<li>m_arr1指向的地址和m_str2指向的地址是同一个地址. arr2开辟了新的空间.</li>\n<li>m_arr1中的子元素指向的地址和m_arr2中的子元素指向的地址是同一个地址, 子元素没有开辟内存，仅仅是指针的拷贝</li>\n<li>m_str1指向的地址和m_str3指向的地址不是同一个地址。str3开辟了新的空间</li>\n<li>m_arr1中的子元素指向的地址和m_arr3中的子元素指向的地址是同一个地址, 子元素没有开辟内存，仅仅是指针的拷贝</li>\n</ul>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><ul>\n<li>copy产生不可变类型<ul>\n<li>不可变类型 -&gt; copy -&gt; 不可变类型 : 不开辟空间</li>\n<li>可变类型 -&gt; copy -&gt; 不可变类型 : 开辟空间</li>\n<li>容器类中的子元素仅仅指针拷贝,不开辟空间</li>\n</ul>\n</li>\n<li>mutableCopy产生可变类型<ul>\n<li>不可变类型 -&gt; mutableCopy -&gt; 可变类型 : 开辟空间</li>\n<li>可变类型 -&gt; copy -&gt; 可变类型 : 开辟空间</li>\n<li>容器类中的子元素仅仅指针拷贝,不开辟空间</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p><a href=\"https://github.com/sunnercc/Program/tree/master/copy-mutableCopy\">code</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>对于熟悉iOS开发的人的来说，copy和mutableCopy这两个词肯定不陌生。但是区别是什么呢，百度一搜一大堆，但是解释的千奇百怪，毫无真相。</p>\n<h2 id=\"首先明白两个概念\"><a href=\"#首先明白两个概念\" class=\"headerlink\" title=\"首先明白两个概念\"></a>首先明白两个概念</h2><ul>\n<li>浅拷贝: 也称为浅复制。不开辟新的内存空间。仅仅是拷贝指向对象的指针。</li>\n<li>深拷贝: 也称为深复制。开辟新的内存空间。拷贝整个对象内存到新开辟的内存中去。</li>\n</ul>\n<h2 id=\"解释一个英文单词\"><a href=\"#解释一个英文单词\" class=\"headerlink\" title=\"解释一个英文单词\"></a>解释一个英文单词</h2><ul>\n<li>mutable 可变的</li>\n</ul>\n<p>iOS开发中最常见的类就是NSString, 还有一些容器类(NSArray, NSDictionary, NSSet).我会选取经典的NSString以及容器类的代表NSArray来写4个例子。得出实验结论。</p>\n<h2 id=\"例子1\"><a href=\"#例子1\" class=\"headerlink\" title=\"例子1\"></a>例子1</h2><p>针对NSSting 写出下列测试代码：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSString</span> *str1 = <span class=\"string\">@\"123\"</span>;  <span class=\"comment\">// 常量区分配</span></span><br><span class=\"line\"><span class=\"built_in\">NSString</span> *str2 = [str1 <span class=\"keyword\">copy</span>];</span><br><span class=\"line\"><span class=\"built_in\">NSMutableString</span> *str3 = [str1 mutableCopy];</span><br><span class=\"line\">printf(<span class=\"string\">\"\\n str1 -&gt; = %p \\n str2 -&gt; = %p \\n str3 -&gt; = %p\"</span>, str1, str2, str3);</span><br></pre></td></tr></table></figure>\n<p>控制台的打印如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str1 -&gt; = 0x1072d9088</span><br><span class=\"line\">str2 -&gt; = 0x1072d9088</span><br><span class=\"line\">str3 -&gt; = 0x600001c2c000</span><br></pre></td></tr></table></figure>\n<p>可以看出：</p>\n<ul>\n<li>str1指向的地址和str2指向的地址是同一个地址.str2并没有开辟新的空间,仅仅是指针的拷贝.</li>\n<li>str1指向的地址和str3指向的地址不是同一个地址。str3开辟了新的空间.</li>\n</ul>\n<h2 id=\"例子2\"><a href=\"#例子2\" class=\"headerlink\" title=\"例子2\"></a>例子2</h2><p>针对NSMutableString 写出下列测试代码：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSString</span> *str1 = <span class=\"string\">@\"123\"</span>; <span class=\"comment\">// 常量区分配</span></span><br><span class=\"line\"><span class=\"built_in\">NSMutableString</span> *m_str1 = [<span class=\"built_in\">NSMutableString</span> stringWithString:str1];  <span class=\"comment\">// 堆区重新分配</span></span><br><span class=\"line\"><span class=\"built_in\">NSString</span> *m_str2 = [m_str1 <span class=\"keyword\">copy</span>];</span><br><span class=\"line\"><span class=\"built_in\">NSMutableString</span> *m_str3 = [m_str1 mutableCopy];</span><br><span class=\"line\">printf(<span class=\"string\">\"\\n m_str1 -&gt; = %p \\n m_str2 -&gt; = %p \\n m_str3 -&gt; = %p\"</span>, m_str1, m_str2, m_str3);</span><br></pre></td></tr></table></figure>\n<p>控制台的打印如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">m_str1 -&gt; = 0x600003143b40</span><br><span class=\"line\">m_str2 -&gt; = 0xbe9e1c56d14b79e2</span><br><span class=\"line\">m_str3 -&gt; = 0x600003143e70</span><br></pre></td></tr></table></figure>\n<p>可以看出：</p>\n<ul>\n<li>m_str1指向的地址和m_str2指向的地址不是同一个地址. m_str2开辟了新的空间.</li>\n<li>m_str1指向的地址和m_str3指向的地址不是同一个地址。m_str3开辟了新的空间.</li>\n</ul>\n<h2 id=\"例子3\"><a href=\"#例子3\" class=\"headerlink\" title=\"例子3\"></a>例子3</h2><p>针对容器类NSArray 写出下列测试代码：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSArray</span> *arr1 = @[@<span class=\"number\">1</span>, @<span class=\"number\">2</span>, @<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"built_in\">NSArray</span> *arr2 = [arr1 <span class=\"keyword\">copy</span>];</span><br><span class=\"line\"><span class=\"built_in\">NSMutableArray</span> *arr3 = [arr1 mutableCopy];</span><br><span class=\"line\">printf(<span class=\"string\">\"\\n arr1 -&gt; = %p \\n arr2 -&gt; = %p \\n arr3 -&gt; = %p\"</span>, arr1, arr2, arr3);</span><br><span class=\"line\">printf(<span class=\"string\">\"\\n arr1 items:\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr1.count; i++) &#123;</span><br><span class=\"line\">    printf(<span class=\"string\">\"\\n %d -&gt; = %p\"</span>, i, arr1[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">printf(<span class=\"string\">\"\\n arr2 items:\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr2.count; i++) &#123;</span><br><span class=\"line\">    printf(<span class=\"string\">\"\\n %d -&gt; = %p\"</span>, i, arr2[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">printf(<span class=\"string\">\"\\n arr3 items:\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr3.count; i++) &#123;</span><br><span class=\"line\">    printf(<span class=\"string\">\"\\n %d -&gt; = %p\"</span>, i, arr3[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>控制台的打印如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr1 -&gt; = 0x600001490090</span><br><span class=\"line\">arr2 -&gt; = 0x600001490090</span><br><span class=\"line\">arr3 -&gt; = 0x6000014900c0</span><br><span class=\"line\">arr1 items:</span><br><span class=\"line\">0 -&gt; = 0xb690da9c196700a8</span><br><span class=\"line\">1 -&gt; = 0xb690da9c19670098</span><br><span class=\"line\">2 -&gt; = 0xb690da9c19670088</span><br><span class=\"line\">arr2 items:</span><br><span class=\"line\">0 -&gt; = 0xb690da9c196700a8</span><br><span class=\"line\">1 -&gt; = 0xb690da9c19670098</span><br><span class=\"line\">2 -&gt; = 0xb690da9c19670088</span><br><span class=\"line\">arr3 items:</span><br><span class=\"line\">0 -&gt; = 0xb690da9c196700a8</span><br><span class=\"line\">1 -&gt; = 0xb690da9c19670098</span><br><span class=\"line\">2 -&gt; = 0xb690da9c19670088</span><br></pre></td></tr></table></figure>\n<p>可以看出：</p>\n<ul>\n<li>arr1指向的地址和arr2指向的地址是同一个地址.str2并没有开辟新的空间,仅仅是指针的拷贝.</li>\n<li>arr1中的子元素指向的地址和arr2中的子元素指向的地址是同一个地址, 子元素没有开辟内存，仅仅是指针的拷贝</li>\n<li>arr1指向的地址和str3指向的地址不是同一个地址。arr3开辟了新的空间.</li>\n<li>arr1中的子元素指向的地址和arr3中的子元素指向的地址是同一个地址, 子元素没有开辟内存，仅仅是指针的拷贝</li>\n</ul>\n<h2 id=\"例子4\"><a href=\"#例子4\" class=\"headerlink\" title=\"例子4\"></a>例子4</h2><p>针对容器类NSMutableArray 写出下列测试代码：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSArray</span> *arr1 = @[@<span class=\"number\">1</span>, @<span class=\"number\">2</span>, @<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"built_in\">NSMutableArray</span> *m_arr1 = [<span class=\"built_in\">NSMutableArray</span> arrayWithArray:arr1];</span><br><span class=\"line\"><span class=\"built_in\">NSArray</span> *m_arr2 = [arr1 <span class=\"keyword\">copy</span>];</span><br><span class=\"line\"><span class=\"built_in\">NSMutableArray</span> *m_arr3 = [arr1 mutableCopy];</span><br><span class=\"line\">printf(<span class=\"string\">\"\\n m_arr1 -&gt; = %p \\n m_arr2 -&gt; = %p \\n m_arr3 -&gt; = %p\"</span>, m_arr1, m_arr2, m_arr3);</span><br><span class=\"line\">printf(<span class=\"string\">\"\\n m_arr1 items:\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m_arr1.count; i++) &#123;</span><br><span class=\"line\">    printf(<span class=\"string\">\"\\n %d -&gt; = %p\"</span>, i, m_arr1[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">printf(<span class=\"string\">\"\\n m_arr2 items:\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m_arr2.count; i++) &#123;</span><br><span class=\"line\">    printf(<span class=\"string\">\"\\n %d -&gt; = %p\"</span>, i, m_arr2[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">printf(<span class=\"string\">\"\\n m_arr3 items:\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m_arr3.count; i++) &#123;</span><br><span class=\"line\">    printf(<span class=\"string\">\"\\n %d -&gt; = %p\"</span>, i, m_arr3[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>控制台的打印如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">m_arr1 -&gt; = 0x6000014900c0</span><br><span class=\"line\">m_arr2 -&gt; = 0x600001490090</span><br><span class=\"line\">m_arr3 -&gt; = 0x600001490030</span><br><span class=\"line\">m_arr1 items:</span><br><span class=\"line\">0 -&gt; = 0xb690da9c196700a8</span><br><span class=\"line\">1 -&gt; = 0xb690da9c19670098</span><br><span class=\"line\">2 -&gt; = 0xb690da9c19670088</span><br><span class=\"line\">m_arr2 items:</span><br><span class=\"line\">0 -&gt; = 0xb690da9c196700a8</span><br><span class=\"line\">1 -&gt; = 0xb690da9c19670098</span><br><span class=\"line\">2 -&gt; = 0xb690da9c19670088</span><br><span class=\"line\">m_arr3 items:</span><br><span class=\"line\">0 -&gt; = 0xb690da9c196700a8</span><br><span class=\"line\">1 -&gt; = 0xb690da9c19670098</span><br><span class=\"line\">2 -&gt; = 0xb690da9c19670088</span><br></pre></td></tr></table></figure>\n<p>可以看出</p>\n<ul>\n<li>m_arr1指向的地址和m_str2指向的地址是同一个地址. arr2开辟了新的空间.</li>\n<li>m_arr1中的子元素指向的地址和m_arr2中的子元素指向的地址是同一个地址, 子元素没有开辟内存，仅仅是指针的拷贝</li>\n<li>m_str1指向的地址和m_str3指向的地址不是同一个地址。str3开辟了新的空间</li>\n<li>m_arr1中的子元素指向的地址和m_arr3中的子元素指向的地址是同一个地址, 子元素没有开辟内存，仅仅是指针的拷贝</li>\n</ul>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><ul>\n<li>copy产生不可变类型<ul>\n<li>不可变类型 -&gt; copy -&gt; 不可变类型 : 不开辟空间</li>\n<li>可变类型 -&gt; copy -&gt; 不可变类型 : 开辟空间</li>\n<li>容器类中的子元素仅仅指针拷贝,不开辟空间</li>\n</ul>\n</li>\n<li>mutableCopy产生可变类型<ul>\n<li>不可变类型 -&gt; mutableCopy -&gt; 可变类型 : 开辟空间</li>\n<li>可变类型 -&gt; copy -&gt; 可变类型 : 开辟空间</li>\n<li>容器类中的子元素仅仅指针拷贝,不开辟空间</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p><a href=\"https://github.com/sunnercc/Program/tree/master/copy-mutableCopy\">code</a></p>\n"},{"title":"duck","date":"2018-10-14T04:42:49.000Z","_content":"\n这是一只神奇的鸭子\n\n### gif2txt_gif.py\ngif转多个png文件，多个txt文件，多个txt_png文件\n\n``` bash\n$ gif2txt_gif duck.gif\n```\n\n### png2txt_png.py\npng转txt_png文件\n\n``` bash\n$ png2txt_png duck.png\n```\n\n### 神奇的鸭子\n[字符画鸭子](duck/create.gif)\n\n### 下载代码\n[code](duck/duck.zip)\n\n","source":"_posts/duck.md","raw":"---\ntitle: duck\ndate: 2018-10-14 12:42:49\ntags:\n---\n\n这是一只神奇的鸭子\n\n### gif2txt_gif.py\ngif转多个png文件，多个txt文件，多个txt_png文件\n\n``` bash\n$ gif2txt_gif duck.gif\n```\n\n### png2txt_png.py\npng转txt_png文件\n\n``` bash\n$ png2txt_png duck.png\n```\n\n### 神奇的鸭子\n[字符画鸭子](duck/create.gif)\n\n### 下载代码\n[code](duck/duck.zip)\n\n","slug":"duck","published":1,"updated":"2018-12-05T04:50:40.039Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpj8w0v100045guqjx3joqal","content":"<p>这是一只神奇的鸭子</p>\n<h3 id=\"gif2txt-gif-py\"><a href=\"#gif2txt-gif-py\" class=\"headerlink\" title=\"gif2txt_gif.py\"></a>gif2txt_gif.py</h3><p>gif转多个png文件，多个txt文件，多个txt_png文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gif2txt_gif duck.gif</span><br></pre></td></tr></table></figure>\n<h3 id=\"png2txt-png-py\"><a href=\"#png2txt-png-py\" class=\"headerlink\" title=\"png2txt_png.py\"></a>png2txt_png.py</h3><p>png转txt_png文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ png2txt_png duck.png</span><br></pre></td></tr></table></figure>\n<h3 id=\"神奇的鸭子\"><a href=\"#神奇的鸭子\" class=\"headerlink\" title=\"神奇的鸭子\"></a>神奇的鸭子</h3><p><a href=\"duck/create.gif\">字符画鸭子</a></p>\n<h3 id=\"下载代码\"><a href=\"#下载代码\" class=\"headerlink\" title=\"下载代码\"></a>下载代码</h3><p><a href=\"duck/duck.zip\">code</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>这是一只神奇的鸭子</p>\n<h3 id=\"gif2txt-gif-py\"><a href=\"#gif2txt-gif-py\" class=\"headerlink\" title=\"gif2txt_gif.py\"></a>gif2txt_gif.py</h3><p>gif转多个png文件，多个txt文件，多个txt_png文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gif2txt_gif duck.gif</span><br></pre></td></tr></table></figure>\n<h3 id=\"png2txt-png-py\"><a href=\"#png2txt-png-py\" class=\"headerlink\" title=\"png2txt_png.py\"></a>png2txt_png.py</h3><p>png转txt_png文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ png2txt_png duck.png</span><br></pre></td></tr></table></figure>\n<h3 id=\"神奇的鸭子\"><a href=\"#神奇的鸭子\" class=\"headerlink\" title=\"神奇的鸭子\"></a>神奇的鸭子</h3><p><a href=\"duck/create.gif\">字符画鸭子</a></p>\n<h3 id=\"下载代码\"><a href=\"#下载代码\" class=\"headerlink\" title=\"下载代码\"></a>下载代码</h3><p><a href=\"duck/duck.zip\">code</a></p>\n"},{"title":"frame&bounds","date":"2016-10-05T03:11:45.000Z","_content":"\n创建一个父视图(fatherView)， 一个子视图(sonView)\n\n``` objc\nlet fatherView = UIView()\nfatherView.frame = CGRect(x: 30, y: 30, width: 200, height: 200)\nfatherView.backgroundColor = .red\nself.view.addSubview(fatherView)\n\nlet sonView = UIView()\nsonView.frame = CGRect(x: 0, y: 0, width: 100, height: 100)\nsonView.backgroundColor = .yellow\nfatherView.addSubview(sonView)\n\n```\n![黑线是father的frame 坐标系 绿线是father的本地坐标系](frame-bounds/frame-bounds0.png)\n\n更改一下父视图的bounds, 相当于更改了父视图的本地坐标系，父视图的左上角不再是父视图本地坐标系的原点(bounds默认的origin是(0,0))，而是本地坐标系的bounds.origin点.子视图会根据父视图的本地坐标系去布局(frame)。所以子视图的位置会发生改变。\n\n``` objc\nlet fatherView = UIView()\nfatherView.frame = CGRect(x: 30, y: 30, width: 200, height: 200)\nfatherView.backgroundColor = .red\nself.view.addSubview(fatherView)\n\nfatherView.bounds = CGRect(x: 10, y: 10, width: 200, height: 200)\n\nlet sonView = UIView()\nsonView.frame = CGRect(x: 0, y: 0, width: 100, height: 100)\nsonView.backgroundColor = .yellow\nfatherView.addSubview(sonView)\n\n```\n![黑线是father的frame 坐标系 绿线是father的本地坐标系](frame-bounds/frame-bounds1.png)\n\n当父视图旋转之后，自己的本地坐标系会跟着旋转，相当于子视图的布局没有变化。但是父视图的frame会发生变化。\n\n``` objc\nlet fatherView = UIView()\nfatherView.frame = CGRect(x: 30, y: 30, width: 200, height: 200)\nfatherView.backgroundColor = .red\nself.view.addSubview(fatherView)\n\nfatherView.bounds = CGRect(x: 10, y: 10, width: 200, height: 200)\n\nlet sonView = UIView()\nsonView.frame = CGRect(x: 0, y: 0, width: 100, height: 100)\nsonView.backgroundColor = .yellow\nfatherView.addSubview(sonView)\n\nfatherView.transform = CGAffineTransform(rotationAngle: CGFloat(Double.pi / 4))\nprint(fatherView.bounds)\nprint(fatherView.frame)\n\n```\n![黑线是father的frame 坐标系 绿线是father的本地坐标系](frame-bounds/frame-bounds2.png)\n\n![](frame-bounds/frame-bounds3.png)\n\n","source":"_posts/frame-bounds.md","raw":"---\ntitle: frame&bounds\ndate: 2016-10-05 11:11:45\ntags:\n---\n\n创建一个父视图(fatherView)， 一个子视图(sonView)\n\n``` objc\nlet fatherView = UIView()\nfatherView.frame = CGRect(x: 30, y: 30, width: 200, height: 200)\nfatherView.backgroundColor = .red\nself.view.addSubview(fatherView)\n\nlet sonView = UIView()\nsonView.frame = CGRect(x: 0, y: 0, width: 100, height: 100)\nsonView.backgroundColor = .yellow\nfatherView.addSubview(sonView)\n\n```\n![黑线是father的frame 坐标系 绿线是father的本地坐标系](frame-bounds/frame-bounds0.png)\n\n更改一下父视图的bounds, 相当于更改了父视图的本地坐标系，父视图的左上角不再是父视图本地坐标系的原点(bounds默认的origin是(0,0))，而是本地坐标系的bounds.origin点.子视图会根据父视图的本地坐标系去布局(frame)。所以子视图的位置会发生改变。\n\n``` objc\nlet fatherView = UIView()\nfatherView.frame = CGRect(x: 30, y: 30, width: 200, height: 200)\nfatherView.backgroundColor = .red\nself.view.addSubview(fatherView)\n\nfatherView.bounds = CGRect(x: 10, y: 10, width: 200, height: 200)\n\nlet sonView = UIView()\nsonView.frame = CGRect(x: 0, y: 0, width: 100, height: 100)\nsonView.backgroundColor = .yellow\nfatherView.addSubview(sonView)\n\n```\n![黑线是father的frame 坐标系 绿线是father的本地坐标系](frame-bounds/frame-bounds1.png)\n\n当父视图旋转之后，自己的本地坐标系会跟着旋转，相当于子视图的布局没有变化。但是父视图的frame会发生变化。\n\n``` objc\nlet fatherView = UIView()\nfatherView.frame = CGRect(x: 30, y: 30, width: 200, height: 200)\nfatherView.backgroundColor = .red\nself.view.addSubview(fatherView)\n\nfatherView.bounds = CGRect(x: 10, y: 10, width: 200, height: 200)\n\nlet sonView = UIView()\nsonView.frame = CGRect(x: 0, y: 0, width: 100, height: 100)\nsonView.backgroundColor = .yellow\nfatherView.addSubview(sonView)\n\nfatherView.transform = CGAffineTransform(rotationAngle: CGFloat(Double.pi / 4))\nprint(fatherView.bounds)\nprint(fatherView.frame)\n\n```\n![黑线是father的frame 坐标系 绿线是father的本地坐标系](frame-bounds/frame-bounds2.png)\n\n![](frame-bounds/frame-bounds3.png)\n\n","slug":"frame-bounds","published":1,"updated":"2018-12-05T04:31:47.541Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpj8w0v200055guqli3707r9","content":"<p>创建一个父视图(fatherView)， 一个子视图(sonView)</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let fatherView = <span class=\"built_in\">UIView</span>()</span><br><span class=\"line\">fatherView.frame = <span class=\"built_in\">CGRect</span>(x: <span class=\"number\">30</span>, y: <span class=\"number\">30</span>, width: <span class=\"number\">200</span>, height: <span class=\"number\">200</span>)</span><br><span class=\"line\">fatherView.backgroundColor = .red</span><br><span class=\"line\"><span class=\"keyword\">self</span>.view.addSubview(fatherView)</span><br><span class=\"line\"></span><br><span class=\"line\">let sonView = <span class=\"built_in\">UIView</span>()</span><br><span class=\"line\">sonView.frame = <span class=\"built_in\">CGRect</span>(x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span>, width: <span class=\"number\">100</span>, height: <span class=\"number\">100</span>)</span><br><span class=\"line\">sonView.backgroundColor = .yellow</span><br><span class=\"line\">fatherView.addSubview(sonView)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2016/10/05/frame-bounds/frame-bounds0.png\" alt=\"黑线是father的frame 坐标系 绿线是father的本地坐标系\"></p>\n<p>更改一下父视图的bounds, 相当于更改了父视图的本地坐标系，父视图的左上角不再是父视图本地坐标系的原点(bounds默认的origin是(0,0))，而是本地坐标系的bounds.origin点.子视图会根据父视图的本地坐标系去布局(frame)。所以子视图的位置会发生改变。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let fatherView = <span class=\"built_in\">UIView</span>()</span><br><span class=\"line\">fatherView.frame = <span class=\"built_in\">CGRect</span>(x: <span class=\"number\">30</span>, y: <span class=\"number\">30</span>, width: <span class=\"number\">200</span>, height: <span class=\"number\">200</span>)</span><br><span class=\"line\">fatherView.backgroundColor = .red</span><br><span class=\"line\"><span class=\"keyword\">self</span>.view.addSubview(fatherView)</span><br><span class=\"line\"></span><br><span class=\"line\">fatherView.bounds = <span class=\"built_in\">CGRect</span>(x: <span class=\"number\">10</span>, y: <span class=\"number\">10</span>, width: <span class=\"number\">200</span>, height: <span class=\"number\">200</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">let sonView = <span class=\"built_in\">UIView</span>()</span><br><span class=\"line\">sonView.frame = <span class=\"built_in\">CGRect</span>(x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span>, width: <span class=\"number\">100</span>, height: <span class=\"number\">100</span>)</span><br><span class=\"line\">sonView.backgroundColor = .yellow</span><br><span class=\"line\">fatherView.addSubview(sonView)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2016/10/05/frame-bounds/frame-bounds1.png\" alt=\"黑线是father的frame 坐标系 绿线是father的本地坐标系\"></p>\n<p>当父视图旋转之后，自己的本地坐标系会跟着旋转，相当于子视图的布局没有变化。但是父视图的frame会发生变化。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let fatherView = <span class=\"built_in\">UIView</span>()</span><br><span class=\"line\">fatherView.frame = <span class=\"built_in\">CGRect</span>(x: <span class=\"number\">30</span>, y: <span class=\"number\">30</span>, width: <span class=\"number\">200</span>, height: <span class=\"number\">200</span>)</span><br><span class=\"line\">fatherView.backgroundColor = .red</span><br><span class=\"line\"><span class=\"keyword\">self</span>.view.addSubview(fatherView)</span><br><span class=\"line\"></span><br><span class=\"line\">fatherView.bounds = <span class=\"built_in\">CGRect</span>(x: <span class=\"number\">10</span>, y: <span class=\"number\">10</span>, width: <span class=\"number\">200</span>, height: <span class=\"number\">200</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">let sonView = <span class=\"built_in\">UIView</span>()</span><br><span class=\"line\">sonView.frame = <span class=\"built_in\">CGRect</span>(x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span>, width: <span class=\"number\">100</span>, height: <span class=\"number\">100</span>)</span><br><span class=\"line\">sonView.backgroundColor = .yellow</span><br><span class=\"line\">fatherView.addSubview(sonView)</span><br><span class=\"line\"></span><br><span class=\"line\">fatherView.transform = <span class=\"built_in\">CGAffineTransform</span>(rotationAngle: <span class=\"built_in\">CGFloat</span>(Double.pi / <span class=\"number\">4</span>))</span><br><span class=\"line\">print(fatherView.bounds)</span><br><span class=\"line\">print(fatherView.frame)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2016/10/05/frame-bounds/frame-bounds2.png\" alt=\"黑线是father的frame 坐标系 绿线是father的本地坐标系\"></p>\n<p><img src=\"/2016/10/05/frame-bounds/frame-bounds3.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>创建一个父视图(fatherView)， 一个子视图(sonView)</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let fatherView = <span class=\"built_in\">UIView</span>()</span><br><span class=\"line\">fatherView.frame = <span class=\"built_in\">CGRect</span>(x: <span class=\"number\">30</span>, y: <span class=\"number\">30</span>, width: <span class=\"number\">200</span>, height: <span class=\"number\">200</span>)</span><br><span class=\"line\">fatherView.backgroundColor = .red</span><br><span class=\"line\"><span class=\"keyword\">self</span>.view.addSubview(fatherView)</span><br><span class=\"line\"></span><br><span class=\"line\">let sonView = <span class=\"built_in\">UIView</span>()</span><br><span class=\"line\">sonView.frame = <span class=\"built_in\">CGRect</span>(x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span>, width: <span class=\"number\">100</span>, height: <span class=\"number\">100</span>)</span><br><span class=\"line\">sonView.backgroundColor = .yellow</span><br><span class=\"line\">fatherView.addSubview(sonView)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2016/10/05/frame-bounds/frame-bounds0.png\" alt=\"黑线是father的frame 坐标系 绿线是father的本地坐标系\"></p>\n<p>更改一下父视图的bounds, 相当于更改了父视图的本地坐标系，父视图的左上角不再是父视图本地坐标系的原点(bounds默认的origin是(0,0))，而是本地坐标系的bounds.origin点.子视图会根据父视图的本地坐标系去布局(frame)。所以子视图的位置会发生改变。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let fatherView = <span class=\"built_in\">UIView</span>()</span><br><span class=\"line\">fatherView.frame = <span class=\"built_in\">CGRect</span>(x: <span class=\"number\">30</span>, y: <span class=\"number\">30</span>, width: <span class=\"number\">200</span>, height: <span class=\"number\">200</span>)</span><br><span class=\"line\">fatherView.backgroundColor = .red</span><br><span class=\"line\"><span class=\"keyword\">self</span>.view.addSubview(fatherView)</span><br><span class=\"line\"></span><br><span class=\"line\">fatherView.bounds = <span class=\"built_in\">CGRect</span>(x: <span class=\"number\">10</span>, y: <span class=\"number\">10</span>, width: <span class=\"number\">200</span>, height: <span class=\"number\">200</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">let sonView = <span class=\"built_in\">UIView</span>()</span><br><span class=\"line\">sonView.frame = <span class=\"built_in\">CGRect</span>(x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span>, width: <span class=\"number\">100</span>, height: <span class=\"number\">100</span>)</span><br><span class=\"line\">sonView.backgroundColor = .yellow</span><br><span class=\"line\">fatherView.addSubview(sonView)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2016/10/05/frame-bounds/frame-bounds1.png\" alt=\"黑线是father的frame 坐标系 绿线是father的本地坐标系\"></p>\n<p>当父视图旋转之后，自己的本地坐标系会跟着旋转，相当于子视图的布局没有变化。但是父视图的frame会发生变化。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let fatherView = <span class=\"built_in\">UIView</span>()</span><br><span class=\"line\">fatherView.frame = <span class=\"built_in\">CGRect</span>(x: <span class=\"number\">30</span>, y: <span class=\"number\">30</span>, width: <span class=\"number\">200</span>, height: <span class=\"number\">200</span>)</span><br><span class=\"line\">fatherView.backgroundColor = .red</span><br><span class=\"line\"><span class=\"keyword\">self</span>.view.addSubview(fatherView)</span><br><span class=\"line\"></span><br><span class=\"line\">fatherView.bounds = <span class=\"built_in\">CGRect</span>(x: <span class=\"number\">10</span>, y: <span class=\"number\">10</span>, width: <span class=\"number\">200</span>, height: <span class=\"number\">200</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">let sonView = <span class=\"built_in\">UIView</span>()</span><br><span class=\"line\">sonView.frame = <span class=\"built_in\">CGRect</span>(x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span>, width: <span class=\"number\">100</span>, height: <span class=\"number\">100</span>)</span><br><span class=\"line\">sonView.backgroundColor = .yellow</span><br><span class=\"line\">fatherView.addSubview(sonView)</span><br><span class=\"line\"></span><br><span class=\"line\">fatherView.transform = <span class=\"built_in\">CGAffineTransform</span>(rotationAngle: <span class=\"built_in\">CGFloat</span>(Double.pi / <span class=\"number\">4</span>))</span><br><span class=\"line\">print(fatherView.bounds)</span><br><span class=\"line\">print(fatherView.frame)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2016/10/05/frame-bounds/frame-bounds2.png\" alt=\"黑线是father的frame 坐标系 绿线是father的本地坐标系\"></p>\n<p><img src=\"/2016/10/05/frame-bounds/frame-bounds3.png\" alt=\"\"></p>\n"},{"title":"http","date":"2017-12-05T03:12:03.000Z","_content":"\n![](http/http.png)\n","source":"_posts/http.md","raw":"---\ntitle: http\ndate: 2017-12-05 11:12:03\ntags:\n---\n\n![](http/http.png)\n","slug":"http","published":1,"updated":"2018-12-05T04:31:49.859Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpj8w0v300065guqwcmkw68v","content":"<p><img src=\"http/http.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http/http.png\" alt=\"\"></p>\n"},{"title":"lipo","date":"2017-04-05T03:12:13.000Z","_content":"\n\n根据公司项目的需求，需要把核心代码封装成SDK(framework)。为了能够使得真机和模拟器共用，需要将SDK(framework)做成共用版本。这时候lipo就派上用场了。\n\n### 查看SDK支持的架构(模拟器)\n\n``` bash\nifuwo:B ifuwo$ lipo -info MeasureSDK.framework/MeasureSDK_B \nArchitectures in the fat file: MeasureSDK.framework/MeasureSDK_B are: i386 x86_64\n```\n\n### 查看SDK支持的架构(真机)\n\n``` bash\nifuwo:B ifuwo$ lipo -info MeasureSDK_B.framework/MeasureSDK_B \nArchitectures in the fat file: MeasureSDK_B.framework/MeasureSDK_B are: armv7 arm64\n```\n\n### 合并\n\n``` bash\nifuwo:B ifuwo$ lipo -create MeasureSDK.framework/MeasureSDK_B MeasureSDK_B.framework/MeasureSDK_B -output MeasureSDK_B\n```\n### 合并之后查看SDK支持的架构(模拟器真机共用)\n\n``` bash\nifuwo:B ifuwo$ lipo -info MeasureSDK_B.framework/MeasureSDK_B \nArchitectures in the fat file: MeasureSDK_B.framework/MeasureSDK_B are: armv7 arm64 i386 x86_64\n```\n\n### 遇到的问题\n\nSDK的使用过程中没有任何问题，模拟器和真机都可以正常使用。但是在提交苹果审核的时候，却报错了。大概意思是说苹果不支持x86_64和i386架构。后来的解决方案就是把x86_64和i386重新剔除掉了。\n\t\n``` bash\nERROR ITMS-90087:\"Unsupported Architectures.The executable for ..../..SDK.framework contains unsupported architectures '[x86_64, i386]'\"\n```\n\n### 后来得知一种解决方法:\n 1. 制作一个release版本的真机SDK\n 2. 制作一个debug版本的模拟器SDK\n 3. 合并\n","source":"_posts/lipo.md","raw":"---\ntitle: lipo\ndate: 2017-04-05 11:12:13\ntags:\n---\n\n\n根据公司项目的需求，需要把核心代码封装成SDK(framework)。为了能够使得真机和模拟器共用，需要将SDK(framework)做成共用版本。这时候lipo就派上用场了。\n\n### 查看SDK支持的架构(模拟器)\n\n``` bash\nifuwo:B ifuwo$ lipo -info MeasureSDK.framework/MeasureSDK_B \nArchitectures in the fat file: MeasureSDK.framework/MeasureSDK_B are: i386 x86_64\n```\n\n### 查看SDK支持的架构(真机)\n\n``` bash\nifuwo:B ifuwo$ lipo -info MeasureSDK_B.framework/MeasureSDK_B \nArchitectures in the fat file: MeasureSDK_B.framework/MeasureSDK_B are: armv7 arm64\n```\n\n### 合并\n\n``` bash\nifuwo:B ifuwo$ lipo -create MeasureSDK.framework/MeasureSDK_B MeasureSDK_B.framework/MeasureSDK_B -output MeasureSDK_B\n```\n### 合并之后查看SDK支持的架构(模拟器真机共用)\n\n``` bash\nifuwo:B ifuwo$ lipo -info MeasureSDK_B.framework/MeasureSDK_B \nArchitectures in the fat file: MeasureSDK_B.framework/MeasureSDK_B are: armv7 arm64 i386 x86_64\n```\n\n### 遇到的问题\n\nSDK的使用过程中没有任何问题，模拟器和真机都可以正常使用。但是在提交苹果审核的时候，却报错了。大概意思是说苹果不支持x86_64和i386架构。后来的解决方案就是把x86_64和i386重新剔除掉了。\n\t\n``` bash\nERROR ITMS-90087:\"Unsupported Architectures.The executable for ..../..SDK.framework contains unsupported architectures '[x86_64, i386]'\"\n```\n\n### 后来得知一种解决方法:\n 1. 制作一个release版本的真机SDK\n 2. 制作一个debug版本的模拟器SDK\n 3. 合并\n","slug":"lipo","published":1,"updated":"2018-12-05T04:31:51.408Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpj8w0v500075guqj9n6ut4r","content":"<p>根据公司项目的需求，需要把核心代码封装成SDK(framework)。为了能够使得真机和模拟器共用，需要将SDK(framework)做成共用版本。这时候lipo就派上用场了。</p>\n<h3 id=\"查看SDK支持的架构-模拟器\"><a href=\"#查看SDK支持的架构-模拟器\" class=\"headerlink\" title=\"查看SDK支持的架构(模拟器)\"></a>查看SDK支持的架构(模拟器)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifuwo:B ifuwo$ lipo -info MeasureSDK.framework/MeasureSDK_B </span><br><span class=\"line\">Architectures <span class=\"keyword\">in</span> the fat file: MeasureSDK.framework/MeasureSDK_B are: i386 x86_64</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看SDK支持的架构-真机\"><a href=\"#查看SDK支持的架构-真机\" class=\"headerlink\" title=\"查看SDK支持的架构(真机)\"></a>查看SDK支持的架构(真机)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifuwo:B ifuwo$ lipo -info MeasureSDK_B.framework/MeasureSDK_B </span><br><span class=\"line\">Architectures <span class=\"keyword\">in</span> the fat file: MeasureSDK_B.framework/MeasureSDK_B are: armv7 arm64</span><br></pre></td></tr></table></figure>\n<h3 id=\"合并\"><a href=\"#合并\" class=\"headerlink\" title=\"合并\"></a>合并</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifuwo:B ifuwo$ lipo -create MeasureSDK.framework/MeasureSDK_B MeasureSDK_B.framework/MeasureSDK_B -output MeasureSDK_B</span><br></pre></td></tr></table></figure>\n<h3 id=\"合并之后查看SDK支持的架构-模拟器真机共用\"><a href=\"#合并之后查看SDK支持的架构-模拟器真机共用\" class=\"headerlink\" title=\"合并之后查看SDK支持的架构(模拟器真机共用)\"></a>合并之后查看SDK支持的架构(模拟器真机共用)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifuwo:B ifuwo$ lipo -info MeasureSDK_B.framework/MeasureSDK_B </span><br><span class=\"line\">Architectures <span class=\"keyword\">in</span> the fat file: MeasureSDK_B.framework/MeasureSDK_B are: armv7 arm64 i386 x86_64</span><br></pre></td></tr></table></figure>\n<h3 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h3><p>SDK的使用过程中没有任何问题，模拟器和真机都可以正常使用。但是在提交苹果审核的时候，却报错了。大概意思是说苹果不支持x86_64和i386架构。后来的解决方案就是把x86_64和i386重新剔除掉了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR ITMS-90087:<span class=\"string\">\"Unsupported Architectures.The executable for ..../..SDK.framework contains unsupported architectures '[x86_64, i386]'\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"后来得知一种解决方法\"><a href=\"#后来得知一种解决方法\" class=\"headerlink\" title=\"后来得知一种解决方法:\"></a>后来得知一种解决方法:</h3><ol>\n<li>制作一个release版本的真机SDK</li>\n<li>制作一个debug版本的模拟器SDK</li>\n<li>合并</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>根据公司项目的需求，需要把核心代码封装成SDK(framework)。为了能够使得真机和模拟器共用，需要将SDK(framework)做成共用版本。这时候lipo就派上用场了。</p>\n<h3 id=\"查看SDK支持的架构-模拟器\"><a href=\"#查看SDK支持的架构-模拟器\" class=\"headerlink\" title=\"查看SDK支持的架构(模拟器)\"></a>查看SDK支持的架构(模拟器)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifuwo:B ifuwo$ lipo -info MeasureSDK.framework/MeasureSDK_B </span><br><span class=\"line\">Architectures <span class=\"keyword\">in</span> the fat file: MeasureSDK.framework/MeasureSDK_B are: i386 x86_64</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看SDK支持的架构-真机\"><a href=\"#查看SDK支持的架构-真机\" class=\"headerlink\" title=\"查看SDK支持的架构(真机)\"></a>查看SDK支持的架构(真机)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifuwo:B ifuwo$ lipo -info MeasureSDK_B.framework/MeasureSDK_B </span><br><span class=\"line\">Architectures <span class=\"keyword\">in</span> the fat file: MeasureSDK_B.framework/MeasureSDK_B are: armv7 arm64</span><br></pre></td></tr></table></figure>\n<h3 id=\"合并\"><a href=\"#合并\" class=\"headerlink\" title=\"合并\"></a>合并</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifuwo:B ifuwo$ lipo -create MeasureSDK.framework/MeasureSDK_B MeasureSDK_B.framework/MeasureSDK_B -output MeasureSDK_B</span><br></pre></td></tr></table></figure>\n<h3 id=\"合并之后查看SDK支持的架构-模拟器真机共用\"><a href=\"#合并之后查看SDK支持的架构-模拟器真机共用\" class=\"headerlink\" title=\"合并之后查看SDK支持的架构(模拟器真机共用)\"></a>合并之后查看SDK支持的架构(模拟器真机共用)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifuwo:B ifuwo$ lipo -info MeasureSDK_B.framework/MeasureSDK_B </span><br><span class=\"line\">Architectures <span class=\"keyword\">in</span> the fat file: MeasureSDK_B.framework/MeasureSDK_B are: armv7 arm64 i386 x86_64</span><br></pre></td></tr></table></figure>\n<h3 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h3><p>SDK的使用过程中没有任何问题，模拟器和真机都可以正常使用。但是在提交苹果审核的时候，却报错了。大概意思是说苹果不支持x86_64和i386架构。后来的解决方案就是把x86_64和i386重新剔除掉了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR ITMS-90087:<span class=\"string\">\"Unsupported Architectures.The executable for ..../..SDK.framework contains unsupported architectures '[x86_64, i386]'\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"后来得知一种解决方法\"><a href=\"#后来得知一种解决方法\" class=\"headerlink\" title=\"后来得知一种解决方法:\"></a>后来得知一种解决方法:</h3><ol>\n<li>制作一个release版本的真机SDK</li>\n<li>制作一个debug版本的模拟器SDK</li>\n<li>合并</li>\n</ol>\n"},{"title":"POST","date":"2017-11-05T03:12:53.000Z","_content":"\n     #define Boundary @\"--dagdsadgsahsdahdsfagd\"\n     \n     Content-Type: multipart/form-data;boundary=--Boundary\n     \n     --Boundary\\r\\n\n     Content-Disposition:form-data;name='参数key';filename='上传文件名'\\r\\n\n     Content-Type:application/zip\\r\\n\n     \\r\\n\n     二进制文件数据\\r\\n\n     \n     --Boundary\\r\\n\n     Content-Disposition:form-data;name='参数key'\\r\\n\n     \\r\\n\n     参数value\\r\\n\n     \n     --Boundary\\r\\n\n     Content-Disposition:form-data;name='参数key'\\r\\n\n     \\r\\n\n     参数value\\r\\n\n     \n     --Boundary\\r\\n\n     Content-Disposition:form-data;name='参数key'\\r\\n\n     \\r\\n\n     参数value\\r\\n\n     \n     --Boundary--\\r\\n\n","source":"_posts/post.md","raw":"---\ntitle: POST\ndate: 2017-11-05 11:12:53\ntags:\n---\n\n     #define Boundary @\"--dagdsadgsahsdahdsfagd\"\n     \n     Content-Type: multipart/form-data;boundary=--Boundary\n     \n     --Boundary\\r\\n\n     Content-Disposition:form-data;name='参数key';filename='上传文件名'\\r\\n\n     Content-Type:application/zip\\r\\n\n     \\r\\n\n     二进制文件数据\\r\\n\n     \n     --Boundary\\r\\n\n     Content-Disposition:form-data;name='参数key'\\r\\n\n     \\r\\n\n     参数value\\r\\n\n     \n     --Boundary\\r\\n\n     Content-Disposition:form-data;name='参数key'\\r\\n\n     \\r\\n\n     参数value\\r\\n\n     \n     --Boundary\\r\\n\n     Content-Disposition:form-data;name='参数key'\\r\\n\n     \\r\\n\n     参数value\\r\\n\n     \n     --Boundary--\\r\\n\n","slug":"post","published":1,"updated":"2018-12-05T04:33:42.228Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpj8w0v800085guqbfda0rky","content":"<pre><code>#define Boundary @&quot;--dagdsadgsahsdahdsfagd&quot;\n\nContent-Type: multipart/form-data;boundary=--Boundary\n\n--Boundary\\r\\n\nContent-Disposition:form-data;name=&apos;参数key&apos;;filename=&apos;上传文件名&apos;\\r\\n\nContent-Type:application/zip\\r\\n\n\\r\\n\n二进制文件数据\\r\\n\n\n--Boundary\\r\\n\nContent-Disposition:form-data;name=&apos;参数key&apos;\\r\\n\n\\r\\n\n参数value\\r\\n\n\n--Boundary\\r\\n\nContent-Disposition:form-data;name=&apos;参数key&apos;\\r\\n\n\\r\\n\n参数value\\r\\n\n\n--Boundary\\r\\n\nContent-Disposition:form-data;name=&apos;参数key&apos;\\r\\n\n\\r\\n\n参数value\\r\\n\n\n--Boundary--\\r\\n\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<pre><code>#define Boundary @&quot;--dagdsadgsahsdahdsfagd&quot;\n\nContent-Type: multipart/form-data;boundary=--Boundary\n\n--Boundary\\r\\n\nContent-Disposition:form-data;name=&apos;参数key&apos;;filename=&apos;上传文件名&apos;\\r\\n\nContent-Type:application/zip\\r\\n\n\\r\\n\n二进制文件数据\\r\\n\n\n--Boundary\\r\\n\nContent-Disposition:form-data;name=&apos;参数key&apos;\\r\\n\n\\r\\n\n参数value\\r\\n\n\n--Boundary\\r\\n\nContent-Disposition:form-data;name=&apos;参数key&apos;\\r\\n\n\\r\\n\n参数value\\r\\n\n\n--Boundary\\r\\n\nContent-Disposition:form-data;name=&apos;参数key&apos;\\r\\n\n\\r\\n\n参数value\\r\\n\n\n--Boundary--\\r\\n\n</code></pre>"},{"title":"markdown-highlight","date":"2018-09-28T04:38:10.000Z","_content":"\n| language | key |\n| ------ | ------ |\n| 1C | 1c |\n |ActionScript|actionscript|\n |Apache|apache|\n |AppleScript|applescript|\n |AsciiDoc|asciidoc|\n |AspectJ|asciidoc|\n |AutoHotkey|autohotkey|\n |AVR Assembler|avrasm|\n |Axapta|axapta|\n |Bash|bash|\n |BrainFuck|brainfuck|\n |Cap’n Proto|capnproto|\n |Clojure REPL|clojure|\n |Clojure|clojure|\n |CMake|cmake|\n |CoffeeScript|coffeescript|\n |C++|cpp|\n |C#|cs|\n |CSS|css|\n |D|d|\n |Dart|d|\n |Delphi|delphi|\n |Diff|diff|\n |Django|django|\n |DOS.bat|dos|\n |Dust|dust|\n |Elixir|elixir|\n |ERB(Embedded Ruby)|erb|\n |Erlang REPL|erlang-repl|\n |Erlang|erlang|\n |FIX|fix|\n |F#|fsharp|\n |G-code(ISO 6983)|gcode|\n |Gherkin|gherkin|\n |GLSL|glsl|\n |Go|go|\n |Gradle|gradle|\n |Groovy|groovy|\n |Haml|haml|\n |Handlebars|handlebars|\n |Haskell|haskell|\n |Haxe|haxe|\n |HTML|html|\n |HTTP|http|\n |Ini file|ini|\n |Java|java|\n |JavaScript|javascript|\n |JSON|json|\n |Lasso|lasso|\n |Less|less|\n |Lisp|lisp|\n |LiveCode|livecodeserver|\n |LiveScript|livescript|\n |Lua|lua|\n |Makefile|makefile|\n |Markdown|markdown|\n |Mathematica|mathematica|\n |Matlab|matlab|\n |MEL (Maya Embedded Language)|mel|\n |Mercury|mercury|\n |Mizar|mizar|\n |Monkey|monkey|\n |Nginx|nginx|\n |Nimrod|nimrod|\n |Nix|nix|\n |NSIS|nsis|\n |Objective C|objectivec|\n |OCaml|ocaml|\n |Oxygene|oxygene|\n |Parser 3|parser3|\n |Perl|perl|\n |PHP|php|\n |PowerShell|powershell|\n |Processing|processing|\n |Python’s profiler output|profile|\n |Protocol Buffers|protobuf|\n |Puppet|puppet|\n |Python|python|\n |Q|q|\n |R|r|\n |RenderMan RIB|rib|\n |Roboconf|roboconf|\n |RenderMan RSL|rsl|\n |Ruby|ruby|\n |Oracle Rules Language|ruleslanguage|\n |Rust|rust|\n |Scala|scala|\n |Scheme|scheme|\n |Scilab|scilab|\n |SCSS|scss|\n |Smali|smali|\n |SmallTalk|smalltalk|\n |SML|sml|\n |SQL|sql|\n |Stata|stata|\n |STEP Part21(ISO 10303-21)|step21|\n |Stylus|stylus|\n |Swift|swift|\n |Tcl|tcl|\n |Tex|tex|\n |text|text/plain|\n |Thrift|thrift|\n |Twig|twig|\n |TypeScript|typescript|\n |Vala|vala|\n |VB.NET|vbnet|\n |VBScript in HTML|vbscript-html|\n |VBScript|vbscript|\n |Verilog|verilog|\n |VHDL|vhdl|\n |Vim Script|vim|\n |Intel x86 Assembly|x86asm|\n |XL|xl|\n |XML|xml|\n |YAML|yml|\n\n\n","source":"_posts/markdown-highlight.md","raw":"---\ntitle: markdown-highlight\ndate: 2018-09-28 12:38:10\ntags:\n---\n\n| language | key |\n| ------ | ------ |\n| 1C | 1c |\n |ActionScript|actionscript|\n |Apache|apache|\n |AppleScript|applescript|\n |AsciiDoc|asciidoc|\n |AspectJ|asciidoc|\n |AutoHotkey|autohotkey|\n |AVR Assembler|avrasm|\n |Axapta|axapta|\n |Bash|bash|\n |BrainFuck|brainfuck|\n |Cap’n Proto|capnproto|\n |Clojure REPL|clojure|\n |Clojure|clojure|\n |CMake|cmake|\n |CoffeeScript|coffeescript|\n |C++|cpp|\n |C#|cs|\n |CSS|css|\n |D|d|\n |Dart|d|\n |Delphi|delphi|\n |Diff|diff|\n |Django|django|\n |DOS.bat|dos|\n |Dust|dust|\n |Elixir|elixir|\n |ERB(Embedded Ruby)|erb|\n |Erlang REPL|erlang-repl|\n |Erlang|erlang|\n |FIX|fix|\n |F#|fsharp|\n |G-code(ISO 6983)|gcode|\n |Gherkin|gherkin|\n |GLSL|glsl|\n |Go|go|\n |Gradle|gradle|\n |Groovy|groovy|\n |Haml|haml|\n |Handlebars|handlebars|\n |Haskell|haskell|\n |Haxe|haxe|\n |HTML|html|\n |HTTP|http|\n |Ini file|ini|\n |Java|java|\n |JavaScript|javascript|\n |JSON|json|\n |Lasso|lasso|\n |Less|less|\n |Lisp|lisp|\n |LiveCode|livecodeserver|\n |LiveScript|livescript|\n |Lua|lua|\n |Makefile|makefile|\n |Markdown|markdown|\n |Mathematica|mathematica|\n |Matlab|matlab|\n |MEL (Maya Embedded Language)|mel|\n |Mercury|mercury|\n |Mizar|mizar|\n |Monkey|monkey|\n |Nginx|nginx|\n |Nimrod|nimrod|\n |Nix|nix|\n |NSIS|nsis|\n |Objective C|objectivec|\n |OCaml|ocaml|\n |Oxygene|oxygene|\n |Parser 3|parser3|\n |Perl|perl|\n |PHP|php|\n |PowerShell|powershell|\n |Processing|processing|\n |Python’s profiler output|profile|\n |Protocol Buffers|protobuf|\n |Puppet|puppet|\n |Python|python|\n |Q|q|\n |R|r|\n |RenderMan RIB|rib|\n |Roboconf|roboconf|\n |RenderMan RSL|rsl|\n |Ruby|ruby|\n |Oracle Rules Language|ruleslanguage|\n |Rust|rust|\n |Scala|scala|\n |Scheme|scheme|\n |Scilab|scilab|\n |SCSS|scss|\n |Smali|smali|\n |SmallTalk|smalltalk|\n |SML|sml|\n |SQL|sql|\n |Stata|stata|\n |STEP Part21(ISO 10303-21)|step21|\n |Stylus|stylus|\n |Swift|swift|\n |Tcl|tcl|\n |Tex|tex|\n |text|text/plain|\n |Thrift|thrift|\n |Twig|twig|\n |TypeScript|typescript|\n |Vala|vala|\n |VB.NET|vbnet|\n |VBScript in HTML|vbscript-html|\n |VBScript|vbscript|\n |Verilog|verilog|\n |VHDL|vhdl|\n |Vim Script|vim|\n |Intel x86 Assembly|x86asm|\n |XL|xl|\n |XML|xml|\n |YAML|yml|\n\n\n","slug":"markdown-highlight","published":1,"updated":"2018-12-05T04:38:51.106Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpj8w0va00095guqd6no4c99","content":"<table>\n<thead>\n<tr>\n<th>language</th>\n<th>key</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1C</td>\n<td>1c</td>\n</tr>\n<tr>\n<td>ActionScript</td>\n<td>actionscript</td>\n</tr>\n<tr>\n<td>Apache</td>\n<td>apache</td>\n</tr>\n<tr>\n<td>AppleScript</td>\n<td>applescript</td>\n</tr>\n<tr>\n<td>AsciiDoc</td>\n<td>asciidoc</td>\n</tr>\n<tr>\n<td>AspectJ</td>\n<td>asciidoc</td>\n</tr>\n<tr>\n<td>AutoHotkey</td>\n<td>autohotkey</td>\n</tr>\n<tr>\n<td>AVR Assembler</td>\n<td>avrasm</td>\n</tr>\n<tr>\n<td>Axapta</td>\n<td>axapta</td>\n</tr>\n<tr>\n<td>Bash</td>\n<td>bash</td>\n</tr>\n<tr>\n<td>BrainFuck</td>\n<td>brainfuck</td>\n</tr>\n<tr>\n<td>Cap’n Proto</td>\n<td>capnproto</td>\n</tr>\n<tr>\n<td>Clojure REPL</td>\n<td>clojure</td>\n</tr>\n<tr>\n<td>Clojure</td>\n<td>clojure</td>\n</tr>\n<tr>\n<td>CMake</td>\n<td>cmake</td>\n</tr>\n<tr>\n<td>CoffeeScript</td>\n<td>coffeescript</td>\n</tr>\n<tr>\n<td>C++</td>\n<td>cpp</td>\n</tr>\n<tr>\n<td>C#</td>\n<td>cs</td>\n</tr>\n<tr>\n<td>CSS</td>\n<td>css</td>\n</tr>\n<tr>\n<td>D</td>\n<td>d</td>\n</tr>\n<tr>\n<td>Dart</td>\n<td>d</td>\n</tr>\n<tr>\n<td>Delphi</td>\n<td>delphi</td>\n</tr>\n<tr>\n<td>Diff</td>\n<td>diff</td>\n</tr>\n<tr>\n<td>Django</td>\n<td>django</td>\n</tr>\n<tr>\n<td>DOS.bat</td>\n<td>dos</td>\n</tr>\n<tr>\n<td>Dust</td>\n<td>dust</td>\n</tr>\n<tr>\n<td>Elixir</td>\n<td>elixir</td>\n</tr>\n<tr>\n<td>ERB(Embedded Ruby)</td>\n<td>erb</td>\n</tr>\n<tr>\n<td>Erlang REPL</td>\n<td>erlang-repl</td>\n</tr>\n<tr>\n<td>Erlang</td>\n<td>erlang</td>\n</tr>\n<tr>\n<td>FIX</td>\n<td>fix</td>\n</tr>\n<tr>\n<td>F#</td>\n<td>fsharp</td>\n</tr>\n<tr>\n<td>G-code(ISO 6983)</td>\n<td>gcode</td>\n</tr>\n<tr>\n<td>Gherkin</td>\n<td>gherkin</td>\n</tr>\n<tr>\n<td>GLSL</td>\n<td>glsl</td>\n</tr>\n<tr>\n<td>Go</td>\n<td>go</td>\n</tr>\n<tr>\n<td>Gradle</td>\n<td>gradle</td>\n</tr>\n<tr>\n<td>Groovy</td>\n<td>groovy</td>\n</tr>\n<tr>\n<td>Haml</td>\n<td>haml</td>\n</tr>\n<tr>\n<td>Handlebars</td>\n<td>handlebars</td>\n</tr>\n<tr>\n<td>Haskell</td>\n<td>haskell</td>\n</tr>\n<tr>\n<td>Haxe</td>\n<td>haxe</td>\n</tr>\n<tr>\n<td>HTML</td>\n<td>html</td>\n</tr>\n<tr>\n<td>HTTP</td>\n<td>http</td>\n</tr>\n<tr>\n<td>Ini file</td>\n<td>ini</td>\n</tr>\n<tr>\n<td>Java</td>\n<td>java</td>\n</tr>\n<tr>\n<td>JavaScript</td>\n<td>javascript</td>\n</tr>\n<tr>\n<td>JSON</td>\n<td>json</td>\n</tr>\n<tr>\n<td>Lasso</td>\n<td>lasso</td>\n</tr>\n<tr>\n<td>Less</td>\n<td>less</td>\n</tr>\n<tr>\n<td>Lisp</td>\n<td>lisp</td>\n</tr>\n<tr>\n<td>LiveCode</td>\n<td>livecodeserver</td>\n</tr>\n<tr>\n<td>LiveScript</td>\n<td>livescript</td>\n</tr>\n<tr>\n<td>Lua</td>\n<td>lua</td>\n</tr>\n<tr>\n<td>Makefile</td>\n<td>makefile</td>\n</tr>\n<tr>\n<td>Markdown</td>\n<td>markdown</td>\n</tr>\n<tr>\n<td>Mathematica</td>\n<td>mathematica</td>\n</tr>\n<tr>\n<td>Matlab</td>\n<td>matlab</td>\n</tr>\n<tr>\n<td>MEL (Maya Embedded Language)</td>\n<td>mel</td>\n</tr>\n<tr>\n<td>Mercury</td>\n<td>mercury</td>\n</tr>\n<tr>\n<td>Mizar</td>\n<td>mizar</td>\n</tr>\n<tr>\n<td>Monkey</td>\n<td>monkey</td>\n</tr>\n<tr>\n<td>Nginx</td>\n<td>nginx</td>\n</tr>\n<tr>\n<td>Nimrod</td>\n<td>nimrod</td>\n</tr>\n<tr>\n<td>Nix</td>\n<td>nix</td>\n</tr>\n<tr>\n<td>NSIS</td>\n<td>nsis</td>\n</tr>\n<tr>\n<td>Objective C</td>\n<td>objectivec</td>\n</tr>\n<tr>\n<td>OCaml</td>\n<td>ocaml</td>\n</tr>\n<tr>\n<td>Oxygene</td>\n<td>oxygene</td>\n</tr>\n<tr>\n<td>Parser 3</td>\n<td>parser3</td>\n</tr>\n<tr>\n<td>Perl</td>\n<td>perl</td>\n</tr>\n<tr>\n<td>PHP</td>\n<td>php</td>\n</tr>\n<tr>\n<td>PowerShell</td>\n<td>powershell</td>\n</tr>\n<tr>\n<td>Processing</td>\n<td>processing</td>\n</tr>\n<tr>\n<td>Python’s profiler output</td>\n<td>profile</td>\n</tr>\n<tr>\n<td>Protocol Buffers</td>\n<td>protobuf</td>\n</tr>\n<tr>\n<td>Puppet</td>\n<td>puppet</td>\n</tr>\n<tr>\n<td>Python</td>\n<td>python</td>\n</tr>\n<tr>\n<td>Q</td>\n<td>q</td>\n</tr>\n<tr>\n<td>R</td>\n<td>r</td>\n</tr>\n<tr>\n<td>RenderMan RIB</td>\n<td>rib</td>\n</tr>\n<tr>\n<td>Roboconf</td>\n<td>roboconf</td>\n</tr>\n<tr>\n<td>RenderMan RSL</td>\n<td>rsl</td>\n</tr>\n<tr>\n<td>Ruby</td>\n<td>ruby</td>\n</tr>\n<tr>\n<td>Oracle Rules Language</td>\n<td>ruleslanguage</td>\n</tr>\n<tr>\n<td>Rust</td>\n<td>rust</td>\n</tr>\n<tr>\n<td>Scala</td>\n<td>scala</td>\n</tr>\n<tr>\n<td>Scheme</td>\n<td>scheme</td>\n</tr>\n<tr>\n<td>Scilab</td>\n<td>scilab</td>\n</tr>\n<tr>\n<td>SCSS</td>\n<td>scss</td>\n</tr>\n<tr>\n<td>Smali</td>\n<td>smali</td>\n</tr>\n<tr>\n<td>SmallTalk</td>\n<td>smalltalk</td>\n</tr>\n<tr>\n<td>SML</td>\n<td>sml</td>\n</tr>\n<tr>\n<td>SQL</td>\n<td>sql</td>\n</tr>\n<tr>\n<td>Stata</td>\n<td>stata</td>\n</tr>\n<tr>\n<td>STEP Part21(ISO 10303-21)</td>\n<td>step21</td>\n</tr>\n<tr>\n<td>Stylus</td>\n<td>stylus</td>\n</tr>\n<tr>\n<td>Swift</td>\n<td>swift</td>\n</tr>\n<tr>\n<td>Tcl</td>\n<td>tcl</td>\n</tr>\n<tr>\n<td>Tex</td>\n<td>tex</td>\n</tr>\n<tr>\n<td>text</td>\n<td>text/plain</td>\n</tr>\n<tr>\n<td>Thrift</td>\n<td>thrift</td>\n</tr>\n<tr>\n<td>Twig</td>\n<td>twig</td>\n</tr>\n<tr>\n<td>TypeScript</td>\n<td>typescript</td>\n</tr>\n<tr>\n<td>Vala</td>\n<td>vala</td>\n</tr>\n<tr>\n<td>VB.NET</td>\n<td>vbnet</td>\n</tr>\n<tr>\n<td>VBScript in HTML</td>\n<td>vbscript-html</td>\n</tr>\n<tr>\n<td>VBScript</td>\n<td>vbscript</td>\n</tr>\n<tr>\n<td>Verilog</td>\n<td>verilog</td>\n</tr>\n<tr>\n<td>VHDL</td>\n<td>vhdl</td>\n</tr>\n<tr>\n<td>Vim Script</td>\n<td>vim</td>\n</tr>\n<tr>\n<td>Intel x86 Assembly</td>\n<td>x86asm</td>\n</tr>\n<tr>\n<td>XL</td>\n<td>xl</td>\n</tr>\n<tr>\n<td>XML</td>\n<td>xml</td>\n</tr>\n<tr>\n<td>YAML</td>\n<td>yml</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<table>\n<thead>\n<tr>\n<th>language</th>\n<th>key</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1C</td>\n<td>1c</td>\n</tr>\n<tr>\n<td>ActionScript</td>\n<td>actionscript</td>\n</tr>\n<tr>\n<td>Apache</td>\n<td>apache</td>\n</tr>\n<tr>\n<td>AppleScript</td>\n<td>applescript</td>\n</tr>\n<tr>\n<td>AsciiDoc</td>\n<td>asciidoc</td>\n</tr>\n<tr>\n<td>AspectJ</td>\n<td>asciidoc</td>\n</tr>\n<tr>\n<td>AutoHotkey</td>\n<td>autohotkey</td>\n</tr>\n<tr>\n<td>AVR Assembler</td>\n<td>avrasm</td>\n</tr>\n<tr>\n<td>Axapta</td>\n<td>axapta</td>\n</tr>\n<tr>\n<td>Bash</td>\n<td>bash</td>\n</tr>\n<tr>\n<td>BrainFuck</td>\n<td>brainfuck</td>\n</tr>\n<tr>\n<td>Cap’n Proto</td>\n<td>capnproto</td>\n</tr>\n<tr>\n<td>Clojure REPL</td>\n<td>clojure</td>\n</tr>\n<tr>\n<td>Clojure</td>\n<td>clojure</td>\n</tr>\n<tr>\n<td>CMake</td>\n<td>cmake</td>\n</tr>\n<tr>\n<td>CoffeeScript</td>\n<td>coffeescript</td>\n</tr>\n<tr>\n<td>C++</td>\n<td>cpp</td>\n</tr>\n<tr>\n<td>C#</td>\n<td>cs</td>\n</tr>\n<tr>\n<td>CSS</td>\n<td>css</td>\n</tr>\n<tr>\n<td>D</td>\n<td>d</td>\n</tr>\n<tr>\n<td>Dart</td>\n<td>d</td>\n</tr>\n<tr>\n<td>Delphi</td>\n<td>delphi</td>\n</tr>\n<tr>\n<td>Diff</td>\n<td>diff</td>\n</tr>\n<tr>\n<td>Django</td>\n<td>django</td>\n</tr>\n<tr>\n<td>DOS.bat</td>\n<td>dos</td>\n</tr>\n<tr>\n<td>Dust</td>\n<td>dust</td>\n</tr>\n<tr>\n<td>Elixir</td>\n<td>elixir</td>\n</tr>\n<tr>\n<td>ERB(Embedded Ruby)</td>\n<td>erb</td>\n</tr>\n<tr>\n<td>Erlang REPL</td>\n<td>erlang-repl</td>\n</tr>\n<tr>\n<td>Erlang</td>\n<td>erlang</td>\n</tr>\n<tr>\n<td>FIX</td>\n<td>fix</td>\n</tr>\n<tr>\n<td>F#</td>\n<td>fsharp</td>\n</tr>\n<tr>\n<td>G-code(ISO 6983)</td>\n<td>gcode</td>\n</tr>\n<tr>\n<td>Gherkin</td>\n<td>gherkin</td>\n</tr>\n<tr>\n<td>GLSL</td>\n<td>glsl</td>\n</tr>\n<tr>\n<td>Go</td>\n<td>go</td>\n</tr>\n<tr>\n<td>Gradle</td>\n<td>gradle</td>\n</tr>\n<tr>\n<td>Groovy</td>\n<td>groovy</td>\n</tr>\n<tr>\n<td>Haml</td>\n<td>haml</td>\n</tr>\n<tr>\n<td>Handlebars</td>\n<td>handlebars</td>\n</tr>\n<tr>\n<td>Haskell</td>\n<td>haskell</td>\n</tr>\n<tr>\n<td>Haxe</td>\n<td>haxe</td>\n</tr>\n<tr>\n<td>HTML</td>\n<td>html</td>\n</tr>\n<tr>\n<td>HTTP</td>\n<td>http</td>\n</tr>\n<tr>\n<td>Ini file</td>\n<td>ini</td>\n</tr>\n<tr>\n<td>Java</td>\n<td>java</td>\n</tr>\n<tr>\n<td>JavaScript</td>\n<td>javascript</td>\n</tr>\n<tr>\n<td>JSON</td>\n<td>json</td>\n</tr>\n<tr>\n<td>Lasso</td>\n<td>lasso</td>\n</tr>\n<tr>\n<td>Less</td>\n<td>less</td>\n</tr>\n<tr>\n<td>Lisp</td>\n<td>lisp</td>\n</tr>\n<tr>\n<td>LiveCode</td>\n<td>livecodeserver</td>\n</tr>\n<tr>\n<td>LiveScript</td>\n<td>livescript</td>\n</tr>\n<tr>\n<td>Lua</td>\n<td>lua</td>\n</tr>\n<tr>\n<td>Makefile</td>\n<td>makefile</td>\n</tr>\n<tr>\n<td>Markdown</td>\n<td>markdown</td>\n</tr>\n<tr>\n<td>Mathematica</td>\n<td>mathematica</td>\n</tr>\n<tr>\n<td>Matlab</td>\n<td>matlab</td>\n</tr>\n<tr>\n<td>MEL (Maya Embedded Language)</td>\n<td>mel</td>\n</tr>\n<tr>\n<td>Mercury</td>\n<td>mercury</td>\n</tr>\n<tr>\n<td>Mizar</td>\n<td>mizar</td>\n</tr>\n<tr>\n<td>Monkey</td>\n<td>monkey</td>\n</tr>\n<tr>\n<td>Nginx</td>\n<td>nginx</td>\n</tr>\n<tr>\n<td>Nimrod</td>\n<td>nimrod</td>\n</tr>\n<tr>\n<td>Nix</td>\n<td>nix</td>\n</tr>\n<tr>\n<td>NSIS</td>\n<td>nsis</td>\n</tr>\n<tr>\n<td>Objective C</td>\n<td>objectivec</td>\n</tr>\n<tr>\n<td>OCaml</td>\n<td>ocaml</td>\n</tr>\n<tr>\n<td>Oxygene</td>\n<td>oxygene</td>\n</tr>\n<tr>\n<td>Parser 3</td>\n<td>parser3</td>\n</tr>\n<tr>\n<td>Perl</td>\n<td>perl</td>\n</tr>\n<tr>\n<td>PHP</td>\n<td>php</td>\n</tr>\n<tr>\n<td>PowerShell</td>\n<td>powershell</td>\n</tr>\n<tr>\n<td>Processing</td>\n<td>processing</td>\n</tr>\n<tr>\n<td>Python’s profiler output</td>\n<td>profile</td>\n</tr>\n<tr>\n<td>Protocol Buffers</td>\n<td>protobuf</td>\n</tr>\n<tr>\n<td>Puppet</td>\n<td>puppet</td>\n</tr>\n<tr>\n<td>Python</td>\n<td>python</td>\n</tr>\n<tr>\n<td>Q</td>\n<td>q</td>\n</tr>\n<tr>\n<td>R</td>\n<td>r</td>\n</tr>\n<tr>\n<td>RenderMan RIB</td>\n<td>rib</td>\n</tr>\n<tr>\n<td>Roboconf</td>\n<td>roboconf</td>\n</tr>\n<tr>\n<td>RenderMan RSL</td>\n<td>rsl</td>\n</tr>\n<tr>\n<td>Ruby</td>\n<td>ruby</td>\n</tr>\n<tr>\n<td>Oracle Rules Language</td>\n<td>ruleslanguage</td>\n</tr>\n<tr>\n<td>Rust</td>\n<td>rust</td>\n</tr>\n<tr>\n<td>Scala</td>\n<td>scala</td>\n</tr>\n<tr>\n<td>Scheme</td>\n<td>scheme</td>\n</tr>\n<tr>\n<td>Scilab</td>\n<td>scilab</td>\n</tr>\n<tr>\n<td>SCSS</td>\n<td>scss</td>\n</tr>\n<tr>\n<td>Smali</td>\n<td>smali</td>\n</tr>\n<tr>\n<td>SmallTalk</td>\n<td>smalltalk</td>\n</tr>\n<tr>\n<td>SML</td>\n<td>sml</td>\n</tr>\n<tr>\n<td>SQL</td>\n<td>sql</td>\n</tr>\n<tr>\n<td>Stata</td>\n<td>stata</td>\n</tr>\n<tr>\n<td>STEP Part21(ISO 10303-21)</td>\n<td>step21</td>\n</tr>\n<tr>\n<td>Stylus</td>\n<td>stylus</td>\n</tr>\n<tr>\n<td>Swift</td>\n<td>swift</td>\n</tr>\n<tr>\n<td>Tcl</td>\n<td>tcl</td>\n</tr>\n<tr>\n<td>Tex</td>\n<td>tex</td>\n</tr>\n<tr>\n<td>text</td>\n<td>text/plain</td>\n</tr>\n<tr>\n<td>Thrift</td>\n<td>thrift</td>\n</tr>\n<tr>\n<td>Twig</td>\n<td>twig</td>\n</tr>\n<tr>\n<td>TypeScript</td>\n<td>typescript</td>\n</tr>\n<tr>\n<td>Vala</td>\n<td>vala</td>\n</tr>\n<tr>\n<td>VB.NET</td>\n<td>vbnet</td>\n</tr>\n<tr>\n<td>VBScript in HTML</td>\n<td>vbscript-html</td>\n</tr>\n<tr>\n<td>VBScript</td>\n<td>vbscript</td>\n</tr>\n<tr>\n<td>Verilog</td>\n<td>verilog</td>\n</tr>\n<tr>\n<td>VHDL</td>\n<td>vhdl</td>\n</tr>\n<tr>\n<td>Vim Script</td>\n<td>vim</td>\n</tr>\n<tr>\n<td>Intel x86 Assembly</td>\n<td>x86asm</td>\n</tr>\n<tr>\n<td>XL</td>\n<td>xl</td>\n</tr>\n<tr>\n<td>XML</td>\n<td>xml</td>\n</tr>\n<tr>\n<td>YAML</td>\n<td>yml</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"runtime","date":"2018-07-05T03:12:39.000Z","_content":"\n``` Objc\n/* Types */\n\n#if !OBJC_TYPES_DEFINED\n\n/// An opaque type that represents a method in a class definition.\ntypedef struct objc_method *Method;\n\n/// An opaque type that represents an instance variable.\ntypedef struct objc_ivar *Ivar;\n\n/// An opaque type that represents a category.\ntypedef struct objc_category *Category;\n\n/// An opaque type that represents an Objective-C declared property.\ntypedef struct objc_property *objc_property_t;\n\nstruct objc_class {\n    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;\n\n#if !__OBJC2__\n    Class _Nullable super_class                              OBJC2_UNAVAILABLE;\n    const char * _Nonnull name                               OBJC2_UNAVAILABLE;\n    long version                                             OBJC2_UNAVAILABLE;\n    long info                                                OBJC2_UNAVAILABLE;\n    long instance_size                                       OBJC2_UNAVAILABLE;\n    struct objc_ivar_list * _Nullable ivars                  OBJC2_UNAVAILABLE;\n    struct objc_method_list * _Nullable * _Nullable methodLists                    OBJC2_UNAVAILABLE;\n    struct objc_cache * _Nonnull cache                       OBJC2_UNAVAILABLE;\n    struct objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;\n#endif\n\n} OBJC2_UNAVAILABLE;\n/* Use `Class` instead of `struct objc_class *` */\n\n#endif\n\n#ifdef __OBJC__\n@class Protocol;\n#else\ntypedef struct objc_object Protocol;\n#endif\n\n/// Defines a method\nstruct objc_method_description {\n    SEL _Nullable name;               /**< The name of the method */\n    char * _Nullable types;           /**< The types of the method arguments */\n};\n\n/// Defines a property attribute\ntypedef struct {\n    const char * _Nonnull name;           /**< The name of the attribute */\n    const char * _Nonnull value;          /**< The value of the attribute (usually empty) */\n} objc_property_attribute_t;\n\nstruct objc_method_description_list {\n    int count;\n    struct objc_method_description list[1];\n};\n\n\nstruct objc_protocol_list {\n    struct objc_protocol_list * _Nullable next;\n    long count;\n    __unsafe_unretained Protocol * _Nullable list[1];\n};\n\n\nstruct objc_category {\n    char * _Nonnull category_name                            OBJC2_UNAVAILABLE;\n    char * _Nonnull class_name                               OBJC2_UNAVAILABLE;\n    struct objc_method_list * _Nullable instance_methods     OBJC2_UNAVAILABLE;\n    struct objc_method_list * _Nullable class_methods        OBJC2_UNAVAILABLE;\n    struct objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;\n}                                                            OBJC2_UNAVAILABLE;\n\n\nstruct objc_ivar {\n    char * _Nullable ivar_name                               OBJC2_UNAVAILABLE;\n    char * _Nullable ivar_type                               OBJC2_UNAVAILABLE;\n    int ivar_offset                                          OBJC2_UNAVAILABLE;\n#ifdef __LP64__\n    int space                                                OBJC2_UNAVAILABLE;\n#endif\n}                                                            OBJC2_UNAVAILABLE;\n\nstruct objc_ivar_list {\n    int ivar_count                                           OBJC2_UNAVAILABLE;\n#ifdef __LP64__\n    int space                                                OBJC2_UNAVAILABLE;\n#endif\n    /* variable length structure */\n    struct objc_ivar ivar_list[1]                            OBJC2_UNAVAILABLE;\n}                                                            OBJC2_UNAVAILABLE;\n\n\nstruct objc_method {\n    SEL _Nonnull method_name                                 OBJC2_UNAVAILABLE;\n    char * _Nullable method_types                            OBJC2_UNAVAILABLE;\n    IMP _Nonnull method_imp                                  OBJC2_UNAVAILABLE;\n}                                                            OBJC2_UNAVAILABLE;\n\nstruct objc_method_list {\n    struct objc_method_list * _Nullable obsolete             OBJC2_UNAVAILABLE;\n\n    int method_count                                         OBJC2_UNAVAILABLE;\n#ifdef __LP64__\n    int space                                                OBJC2_UNAVAILABLE;\n#endif\n    /* variable length structure */\n    struct objc_method method_list[1]                        OBJC2_UNAVAILABLE;\n}                                                            OBJC2_UNAVAILABLE;\n\n\ntypedef struct objc_symtab *Symtab                           OBJC2_UNAVAILABLE;\n\nstruct objc_symtab {\n    unsigned long sel_ref_cnt                                OBJC2_UNAVAILABLE;\n    SEL _Nonnull * _Nullable refs                            OBJC2_UNAVAILABLE;\n    unsigned short cls_def_cnt                               OBJC2_UNAVAILABLE;\n    unsigned short cat_def_cnt                               OBJC2_UNAVAILABLE;\n    void * _Nullable defs[1] /* variable size */             OBJC2_UNAVAILABLE;\n}                                                            OBJC2_UNAVAILABLE;\n\n\ntypedef struct objc_cache *Cache                             OBJC2_UNAVAILABLE;\n\n#define CACHE_BUCKET_NAME(B)  ((B)->method_name)\n#define CACHE_BUCKET_IMP(B)   ((B)->method_imp)\n#define CACHE_BUCKET_VALID(B) (B)\n#ifndef __LP64__\n#define CACHE_HASH(sel, mask) (((uintptr_t)(sel)>>2) & (mask))\n#else\n#define CACHE_HASH(sel, mask) (((unsigned int)((uintptr_t)(sel)>>3)) & (mask))\n#endif\nstruct objc_cache {\n    unsigned int mask /* total = mask + 1 */                 OBJC2_UNAVAILABLE;\n    unsigned int occupied                                    OBJC2_UNAVAILABLE;\n    Method _Nullable buckets[1]                              OBJC2_UNAVAILABLE;\n};\n\n\ntypedef struct objc_module *Module                           OBJC2_UNAVAILABLE;\n\nstruct objc_module {\n    unsigned long version                                    OBJC2_UNAVAILABLE;\n    unsigned long size                                       OBJC2_UNAVAILABLE;\n    const char * _Nullable name                              OBJC2_UNAVAILABLE;\n    Symtab _Nullable symtab                                  OBJC2_UNAVAILABLE;\n}                                                            OBJC2_UNAVAILABLE;\n\n#else\n\nstruct objc_method_list;\n\n#endif\n```\n\n![](runtime/instance%26class%26metaclass.png)\n\n![](runtime/isa%26superclass.png)\n\n","source":"_posts/runtime.md","raw":"---\ntitle: runtime\ndate: 2018-07-05 11:12:39\ntags:\n---\n\n``` Objc\n/* Types */\n\n#if !OBJC_TYPES_DEFINED\n\n/// An opaque type that represents a method in a class definition.\ntypedef struct objc_method *Method;\n\n/// An opaque type that represents an instance variable.\ntypedef struct objc_ivar *Ivar;\n\n/// An opaque type that represents a category.\ntypedef struct objc_category *Category;\n\n/// An opaque type that represents an Objective-C declared property.\ntypedef struct objc_property *objc_property_t;\n\nstruct objc_class {\n    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;\n\n#if !__OBJC2__\n    Class _Nullable super_class                              OBJC2_UNAVAILABLE;\n    const char * _Nonnull name                               OBJC2_UNAVAILABLE;\n    long version                                             OBJC2_UNAVAILABLE;\n    long info                                                OBJC2_UNAVAILABLE;\n    long instance_size                                       OBJC2_UNAVAILABLE;\n    struct objc_ivar_list * _Nullable ivars                  OBJC2_UNAVAILABLE;\n    struct objc_method_list * _Nullable * _Nullable methodLists                    OBJC2_UNAVAILABLE;\n    struct objc_cache * _Nonnull cache                       OBJC2_UNAVAILABLE;\n    struct objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;\n#endif\n\n} OBJC2_UNAVAILABLE;\n/* Use `Class` instead of `struct objc_class *` */\n\n#endif\n\n#ifdef __OBJC__\n@class Protocol;\n#else\ntypedef struct objc_object Protocol;\n#endif\n\n/// Defines a method\nstruct objc_method_description {\n    SEL _Nullable name;               /**< The name of the method */\n    char * _Nullable types;           /**< The types of the method arguments */\n};\n\n/// Defines a property attribute\ntypedef struct {\n    const char * _Nonnull name;           /**< The name of the attribute */\n    const char * _Nonnull value;          /**< The value of the attribute (usually empty) */\n} objc_property_attribute_t;\n\nstruct objc_method_description_list {\n    int count;\n    struct objc_method_description list[1];\n};\n\n\nstruct objc_protocol_list {\n    struct objc_protocol_list * _Nullable next;\n    long count;\n    __unsafe_unretained Protocol * _Nullable list[1];\n};\n\n\nstruct objc_category {\n    char * _Nonnull category_name                            OBJC2_UNAVAILABLE;\n    char * _Nonnull class_name                               OBJC2_UNAVAILABLE;\n    struct objc_method_list * _Nullable instance_methods     OBJC2_UNAVAILABLE;\n    struct objc_method_list * _Nullable class_methods        OBJC2_UNAVAILABLE;\n    struct objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;\n}                                                            OBJC2_UNAVAILABLE;\n\n\nstruct objc_ivar {\n    char * _Nullable ivar_name                               OBJC2_UNAVAILABLE;\n    char * _Nullable ivar_type                               OBJC2_UNAVAILABLE;\n    int ivar_offset                                          OBJC2_UNAVAILABLE;\n#ifdef __LP64__\n    int space                                                OBJC2_UNAVAILABLE;\n#endif\n}                                                            OBJC2_UNAVAILABLE;\n\nstruct objc_ivar_list {\n    int ivar_count                                           OBJC2_UNAVAILABLE;\n#ifdef __LP64__\n    int space                                                OBJC2_UNAVAILABLE;\n#endif\n    /* variable length structure */\n    struct objc_ivar ivar_list[1]                            OBJC2_UNAVAILABLE;\n}                                                            OBJC2_UNAVAILABLE;\n\n\nstruct objc_method {\n    SEL _Nonnull method_name                                 OBJC2_UNAVAILABLE;\n    char * _Nullable method_types                            OBJC2_UNAVAILABLE;\n    IMP _Nonnull method_imp                                  OBJC2_UNAVAILABLE;\n}                                                            OBJC2_UNAVAILABLE;\n\nstruct objc_method_list {\n    struct objc_method_list * _Nullable obsolete             OBJC2_UNAVAILABLE;\n\n    int method_count                                         OBJC2_UNAVAILABLE;\n#ifdef __LP64__\n    int space                                                OBJC2_UNAVAILABLE;\n#endif\n    /* variable length structure */\n    struct objc_method method_list[1]                        OBJC2_UNAVAILABLE;\n}                                                            OBJC2_UNAVAILABLE;\n\n\ntypedef struct objc_symtab *Symtab                           OBJC2_UNAVAILABLE;\n\nstruct objc_symtab {\n    unsigned long sel_ref_cnt                                OBJC2_UNAVAILABLE;\n    SEL _Nonnull * _Nullable refs                            OBJC2_UNAVAILABLE;\n    unsigned short cls_def_cnt                               OBJC2_UNAVAILABLE;\n    unsigned short cat_def_cnt                               OBJC2_UNAVAILABLE;\n    void * _Nullable defs[1] /* variable size */             OBJC2_UNAVAILABLE;\n}                                                            OBJC2_UNAVAILABLE;\n\n\ntypedef struct objc_cache *Cache                             OBJC2_UNAVAILABLE;\n\n#define CACHE_BUCKET_NAME(B)  ((B)->method_name)\n#define CACHE_BUCKET_IMP(B)   ((B)->method_imp)\n#define CACHE_BUCKET_VALID(B) (B)\n#ifndef __LP64__\n#define CACHE_HASH(sel, mask) (((uintptr_t)(sel)>>2) & (mask))\n#else\n#define CACHE_HASH(sel, mask) (((unsigned int)((uintptr_t)(sel)>>3)) & (mask))\n#endif\nstruct objc_cache {\n    unsigned int mask /* total = mask + 1 */                 OBJC2_UNAVAILABLE;\n    unsigned int occupied                                    OBJC2_UNAVAILABLE;\n    Method _Nullable buckets[1]                              OBJC2_UNAVAILABLE;\n};\n\n\ntypedef struct objc_module *Module                           OBJC2_UNAVAILABLE;\n\nstruct objc_module {\n    unsigned long version                                    OBJC2_UNAVAILABLE;\n    unsigned long size                                       OBJC2_UNAVAILABLE;\n    const char * _Nullable name                              OBJC2_UNAVAILABLE;\n    Symtab _Nullable symtab                                  OBJC2_UNAVAILABLE;\n}                                                            OBJC2_UNAVAILABLE;\n\n#else\n\nstruct objc_method_list;\n\n#endif\n```\n\n![](runtime/instance%26class%26metaclass.png)\n\n![](runtime/isa%26superclass.png)\n\n","slug":"runtime","published":1,"updated":"2018-12-05T04:35:33.011Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpj8w0vc000a5guqvw309cmh","content":"<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Types */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#if !OBJC_TYPES_DEFINED</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/// An opaque type that represents a method in a class definition.</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_method *Method;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/// An opaque type that represents an instance variable.</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_ivar *Ivar;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/// An opaque type that represents a category.</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_category *Category;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/// An opaque type that represents an Objective-C declared property.</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_property *objc_property_t;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> objc_class &#123;</span><br><span class=\"line\">    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#if !__OBJC2__</span></span><br><span class=\"line\">    Class _Nullable super_class                              OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * _Nonnull name                               OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> version                                             OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> info                                                OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> instance_size                                       OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> objc_ivar_list * _Nullable ivars                  OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> objc_method_list * _Nullable * _Nullable methodLists                    OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> objc_cache * _Nonnull cache                       OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;</span><br><span class=\"line\"><span class=\"meta\">#endif</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125; OBJC2_UNAVAILABLE;</span><br><span class=\"line\"><span class=\"comment\">/* Use `Class` instead of `struct objc_class *` */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#endif</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#ifdef __OBJC__</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@class</span> <span class=\"title\">Protocol</span>;</span></span><br><span class=\"line\"><span class=\"meta\">#else</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_object Protocol;</span><br><span class=\"line\"><span class=\"meta\">#endif</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/// Defines a method</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> objc_method_description &#123;</span><br><span class=\"line\">    SEL _Nullable name;               <span class=\"comment\">/**&lt; The name of the method */</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> * _Nullable types;           <span class=\"comment\">/**&lt; The types of the method arguments */</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/// Defines a property attribute</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * _Nonnull name;           <span class=\"comment\">/**&lt; The name of the attribute */</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * _Nonnull value;          <span class=\"comment\">/**&lt; The value of the attribute (usually empty) */</span></span><br><span class=\"line\">&#125; objc_property_attribute_t;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> objc_method_description_list &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> objc_method_description list[<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> objc_protocol_list &#123;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> objc_protocol_list * _Nullable next;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> count;</span><br><span class=\"line\">    __<span class=\"keyword\">unsafe_unretained</span> Protocol * _Nullable list[<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> objc_category &#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> * _Nonnull category_name                            OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> * _Nonnull class_name                               OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> objc_method_list * _Nullable instance_methods     OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> objc_method_list * _Nullable class_methods        OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;</span><br><span class=\"line\">&#125;                                                            OBJC2_UNAVAILABLE;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> objc_ivar &#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> * _Nullable ivar_name                               OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> * _Nullable ivar_type                               OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ivar_offset                                          OBJC2_UNAVAILABLE;</span><br><span class=\"line\"><span class=\"meta\">#ifdef __LP64__</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> space                                                OBJC2_UNAVAILABLE;</span><br><span class=\"line\"><span class=\"meta\">#endif</span></span><br><span class=\"line\">&#125;                                                            OBJC2_UNAVAILABLE;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> objc_ivar_list &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ivar_count                                           OBJC2_UNAVAILABLE;</span><br><span class=\"line\"><span class=\"meta\">#ifdef __LP64__</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> space                                                OBJC2_UNAVAILABLE;</span><br><span class=\"line\"><span class=\"meta\">#endif</span></span><br><span class=\"line\">    <span class=\"comment\">/* variable length structure */</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> objc_ivar ivar_list[<span class=\"number\">1</span>]                            OBJC2_UNAVAILABLE;</span><br><span class=\"line\">&#125;                                                            OBJC2_UNAVAILABLE;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> objc_method &#123;</span><br><span class=\"line\">    SEL _Nonnull method_name                                 OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> * _Nullable method_types                            OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    IMP _Nonnull method_imp                                  OBJC2_UNAVAILABLE;</span><br><span class=\"line\">&#125;                                                            OBJC2_UNAVAILABLE;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> objc_method_list &#123;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> objc_method_list * _Nullable obsolete             OBJC2_UNAVAILABLE;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> method_count                                         OBJC2_UNAVAILABLE;</span><br><span class=\"line\"><span class=\"meta\">#ifdef __LP64__</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> space                                                OBJC2_UNAVAILABLE;</span><br><span class=\"line\"><span class=\"meta\">#endif</span></span><br><span class=\"line\">    <span class=\"comment\">/* variable length structure */</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> objc_method method_list[<span class=\"number\">1</span>]                        OBJC2_UNAVAILABLE;</span><br><span class=\"line\">&#125;                                                            OBJC2_UNAVAILABLE;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_symtab *Symtab                           OBJC2_UNAVAILABLE;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> objc_symtab &#123;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> sel_ref_cnt                                OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    SEL _Nonnull * _Nullable refs                            OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">short</span> cls_def_cnt                               OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">short</span> cat_def_cnt                               OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> * _Nullable defs[<span class=\"number\">1</span>] <span class=\"comment\">/* variable size */</span>             OBJC2_UNAVAILABLE;</span><br><span class=\"line\">&#125;                                                            OBJC2_UNAVAILABLE;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_cache *Cache                             OBJC2_UNAVAILABLE;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#define CACHE_BUCKET_NAME(B)  ((B)-&gt;method_name)</span></span><br><span class=\"line\"><span class=\"meta\">#define CACHE_BUCKET_IMP(B)   ((B)-&gt;method_imp)</span></span><br><span class=\"line\"><span class=\"meta\">#define CACHE_BUCKET_VALID(B) (B)</span></span><br><span class=\"line\"><span class=\"meta\">#ifndef __LP64__</span></span><br><span class=\"line\"><span class=\"meta\">#define CACHE_HASH(sel, mask) (((uintptr_t)(sel)&gt;&gt;2) &amp; (mask))</span></span><br><span class=\"line\"><span class=\"meta\">#else</span></span><br><span class=\"line\"><span class=\"meta\">#define CACHE_HASH(sel, mask) (((unsigned int)((uintptr_t)(sel)&gt;&gt;3)) &amp; (mask))</span></span><br><span class=\"line\"><span class=\"meta\">#endif</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> objc_cache &#123;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> mask <span class=\"comment\">/* total = mask + 1 */</span>                 OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> occupied                                    OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    Method _Nullable buckets[<span class=\"number\">1</span>]                              OBJC2_UNAVAILABLE;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_module *Module                           OBJC2_UNAVAILABLE;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> objc_module &#123;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> version                                    OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> size                                       OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * _Nullable name                              OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    Symtab _Nullable symtab                                  OBJC2_UNAVAILABLE;</span><br><span class=\"line\">&#125;                                                            OBJC2_UNAVAILABLE;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#else</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> objc_method_list;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#endif</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2018/07/05/runtime/instance%26class%26metaclass.png\" alt=\"\"></p>\n<p><img src=\"/2018/07/05/runtime/isa%26superclass.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Types */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#if !OBJC_TYPES_DEFINED</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/// An opaque type that represents a method in a class definition.</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_method *Method;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/// An opaque type that represents an instance variable.</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_ivar *Ivar;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/// An opaque type that represents a category.</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_category *Category;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/// An opaque type that represents an Objective-C declared property.</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_property *objc_property_t;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> objc_class &#123;</span><br><span class=\"line\">    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#if !__OBJC2__</span></span><br><span class=\"line\">    Class _Nullable super_class                              OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * _Nonnull name                               OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> version                                             OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> info                                                OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> instance_size                                       OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> objc_ivar_list * _Nullable ivars                  OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> objc_method_list * _Nullable * _Nullable methodLists                    OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> objc_cache * _Nonnull cache                       OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;</span><br><span class=\"line\"><span class=\"meta\">#endif</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125; OBJC2_UNAVAILABLE;</span><br><span class=\"line\"><span class=\"comment\">/* Use `Class` instead of `struct objc_class *` */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#endif</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#ifdef __OBJC__</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@class</span> <span class=\"title\">Protocol</span>;</span></span><br><span class=\"line\"><span class=\"meta\">#else</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_object Protocol;</span><br><span class=\"line\"><span class=\"meta\">#endif</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/// Defines a method</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> objc_method_description &#123;</span><br><span class=\"line\">    SEL _Nullable name;               <span class=\"comment\">/**&lt; The name of the method */</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> * _Nullable types;           <span class=\"comment\">/**&lt; The types of the method arguments */</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/// Defines a property attribute</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * _Nonnull name;           <span class=\"comment\">/**&lt; The name of the attribute */</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * _Nonnull value;          <span class=\"comment\">/**&lt; The value of the attribute (usually empty) */</span></span><br><span class=\"line\">&#125; objc_property_attribute_t;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> objc_method_description_list &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> objc_method_description list[<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> objc_protocol_list &#123;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> objc_protocol_list * _Nullable next;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> count;</span><br><span class=\"line\">    __<span class=\"keyword\">unsafe_unretained</span> Protocol * _Nullable list[<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> objc_category &#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> * _Nonnull category_name                            OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> * _Nonnull class_name                               OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> objc_method_list * _Nullable instance_methods     OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> objc_method_list * _Nullable class_methods        OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;</span><br><span class=\"line\">&#125;                                                            OBJC2_UNAVAILABLE;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> objc_ivar &#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> * _Nullable ivar_name                               OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> * _Nullable ivar_type                               OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ivar_offset                                          OBJC2_UNAVAILABLE;</span><br><span class=\"line\"><span class=\"meta\">#ifdef __LP64__</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> space                                                OBJC2_UNAVAILABLE;</span><br><span class=\"line\"><span class=\"meta\">#endif</span></span><br><span class=\"line\">&#125;                                                            OBJC2_UNAVAILABLE;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> objc_ivar_list &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ivar_count                                           OBJC2_UNAVAILABLE;</span><br><span class=\"line\"><span class=\"meta\">#ifdef __LP64__</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> space                                                OBJC2_UNAVAILABLE;</span><br><span class=\"line\"><span class=\"meta\">#endif</span></span><br><span class=\"line\">    <span class=\"comment\">/* variable length structure */</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> objc_ivar ivar_list[<span class=\"number\">1</span>]                            OBJC2_UNAVAILABLE;</span><br><span class=\"line\">&#125;                                                            OBJC2_UNAVAILABLE;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> objc_method &#123;</span><br><span class=\"line\">    SEL _Nonnull method_name                                 OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> * _Nullable method_types                            OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    IMP _Nonnull method_imp                                  OBJC2_UNAVAILABLE;</span><br><span class=\"line\">&#125;                                                            OBJC2_UNAVAILABLE;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> objc_method_list &#123;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> objc_method_list * _Nullable obsolete             OBJC2_UNAVAILABLE;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> method_count                                         OBJC2_UNAVAILABLE;</span><br><span class=\"line\"><span class=\"meta\">#ifdef __LP64__</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> space                                                OBJC2_UNAVAILABLE;</span><br><span class=\"line\"><span class=\"meta\">#endif</span></span><br><span class=\"line\">    <span class=\"comment\">/* variable length structure */</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> objc_method method_list[<span class=\"number\">1</span>]                        OBJC2_UNAVAILABLE;</span><br><span class=\"line\">&#125;                                                            OBJC2_UNAVAILABLE;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_symtab *Symtab                           OBJC2_UNAVAILABLE;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> objc_symtab &#123;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> sel_ref_cnt                                OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    SEL _Nonnull * _Nullable refs                            OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">short</span> cls_def_cnt                               OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">short</span> cat_def_cnt                               OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> * _Nullable defs[<span class=\"number\">1</span>] <span class=\"comment\">/* variable size */</span>             OBJC2_UNAVAILABLE;</span><br><span class=\"line\">&#125;                                                            OBJC2_UNAVAILABLE;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_cache *Cache                             OBJC2_UNAVAILABLE;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#define CACHE_BUCKET_NAME(B)  ((B)-&gt;method_name)</span></span><br><span class=\"line\"><span class=\"meta\">#define CACHE_BUCKET_IMP(B)   ((B)-&gt;method_imp)</span></span><br><span class=\"line\"><span class=\"meta\">#define CACHE_BUCKET_VALID(B) (B)</span></span><br><span class=\"line\"><span class=\"meta\">#ifndef __LP64__</span></span><br><span class=\"line\"><span class=\"meta\">#define CACHE_HASH(sel, mask) (((uintptr_t)(sel)&gt;&gt;2) &amp; (mask))</span></span><br><span class=\"line\"><span class=\"meta\">#else</span></span><br><span class=\"line\"><span class=\"meta\">#define CACHE_HASH(sel, mask) (((unsigned int)((uintptr_t)(sel)&gt;&gt;3)) &amp; (mask))</span></span><br><span class=\"line\"><span class=\"meta\">#endif</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> objc_cache &#123;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> mask <span class=\"comment\">/* total = mask + 1 */</span>                 OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> occupied                                    OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    Method _Nullable buckets[<span class=\"number\">1</span>]                              OBJC2_UNAVAILABLE;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_module *Module                           OBJC2_UNAVAILABLE;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> objc_module &#123;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> version                                    OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> size                                       OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * _Nullable name                              OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    Symtab _Nullable symtab                                  OBJC2_UNAVAILABLE;</span><br><span class=\"line\">&#125;                                                            OBJC2_UNAVAILABLE;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#else</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> objc_method_list;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#endif</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2018/07/05/runtime/instance%26class%26metaclass.png\" alt=\"\"></p>\n<p><img src=\"/2018/07/05/runtime/isa%26superclass.png\" alt=\"\"></p>\n"},{"title":"swift-protocol-extentsion","date":"2017-08-05T03:13:17.000Z","_content":"\n协议在我的理解中就是一个定义好的规范，相当于C++的抽象类，Java的接口。定义好这个规范之后，其他类可以去遵循这个协议，去实现协议中的方法和属性。但是如果有很多类对协议方法的方法体都一样，这样就会写大量重复代码，浪费实现和精力，这个时候协议的extension就起作用了，extension可以给协议扩展一个协议方法的默认实现，这样其他类就可以不用实现了，使用extension中的默认实现就可以了。\n\n\n``` swift\nimport UIKit\n\nprotocol Motion {\n    \n    /// 重力感应 透视\n    func motion(effectOffset: CGFloat, target: UIView)\n}\n\nextension Motion {\n    \n    /// 重力感应 透视\n    func motion(effectOffset: CGFloat, target: UIView) {\n        \n        let motionX = UIInterpolatingMotionEffect(keyPath: \"center.x\", type: .tiltAlongHorizontalAxis)\n        motionX.maximumRelativeValue = effectOffset\n        motionX.minimumRelativeValue = -effectOffset\n        \n        let motionY = UIInterpolatingMotionEffect(keyPath: \"center.y\", type: .tiltAlongVerticalAxis)\n        motionY.maximumRelativeValue = effectOffset\n        motionY.minimumRelativeValue = -effectOffset\n        \n        let motionGroup = UIMotionEffectGroup()\n        motionGroup.motionEffects = [motionX, motionY]\n        \n        target.addMotionEffect(motionGroup)\n    }\n}\n\n```\n","source":"_posts/swift-protocol-extentsion.md","raw":"---\ntitle: swift-protocol-extentsion\ndate: 2017-08-05 11:13:17\ntags:\n---\n\n协议在我的理解中就是一个定义好的规范，相当于C++的抽象类，Java的接口。定义好这个规范之后，其他类可以去遵循这个协议，去实现协议中的方法和属性。但是如果有很多类对协议方法的方法体都一样，这样就会写大量重复代码，浪费实现和精力，这个时候协议的extension就起作用了，extension可以给协议扩展一个协议方法的默认实现，这样其他类就可以不用实现了，使用extension中的默认实现就可以了。\n\n\n``` swift\nimport UIKit\n\nprotocol Motion {\n    \n    /// 重力感应 透视\n    func motion(effectOffset: CGFloat, target: UIView)\n}\n\nextension Motion {\n    \n    /// 重力感应 透视\n    func motion(effectOffset: CGFloat, target: UIView) {\n        \n        let motionX = UIInterpolatingMotionEffect(keyPath: \"center.x\", type: .tiltAlongHorizontalAxis)\n        motionX.maximumRelativeValue = effectOffset\n        motionX.minimumRelativeValue = -effectOffset\n        \n        let motionY = UIInterpolatingMotionEffect(keyPath: \"center.y\", type: .tiltAlongVerticalAxis)\n        motionY.maximumRelativeValue = effectOffset\n        motionY.minimumRelativeValue = -effectOffset\n        \n        let motionGroup = UIMotionEffectGroup()\n        motionGroup.motionEffects = [motionX, motionY]\n        \n        target.addMotionEffect(motionGroup)\n    }\n}\n\n```\n","slug":"swift-protocol-extentsion","published":1,"updated":"2018-12-05T04:31:56.446Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpj8w0ve000b5guqjq1l6iiw","content":"<p>协议在我的理解中就是一个定义好的规范，相当于C++的抽象类，Java的接口。定义好这个规范之后，其他类可以去遵循这个协议，去实现协议中的方法和属性。但是如果有很多类对协议方法的方法体都一样，这样就会写大量重复代码，浪费实现和精力，这个时候协议的extension就起作用了，extension可以给协议扩展一个协议方法的默认实现，这样其他类就可以不用实现了，使用extension中的默认实现就可以了。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Motion</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/// 重力感应 透视</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">motion</span><span class=\"params\">(effectOffset: CGFloat, target: UIView)</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Motion</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/// 重力感应 透视</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">motion</span><span class=\"params\">(effectOffset: CGFloat, target: UIView)</span></span> &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">let</span> motionX = <span class=\"type\">UIInterpolatingMotionEffect</span>(keyPath: <span class=\"string\">\"center.x\"</span>, type: .tiltAlongHorizontalAxis)</span><br><span class=\"line\">        motionX.maximumRelativeValue = effectOffset</span><br><span class=\"line\">        motionX.minimumRelativeValue = -effectOffset</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">let</span> motionY = <span class=\"type\">UIInterpolatingMotionEffect</span>(keyPath: <span class=\"string\">\"center.y\"</span>, type: .tiltAlongVerticalAxis)</span><br><span class=\"line\">        motionY.maximumRelativeValue = effectOffset</span><br><span class=\"line\">        motionY.minimumRelativeValue = -effectOffset</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">let</span> motionGroup = <span class=\"type\">UIMotionEffectGroup</span>()</span><br><span class=\"line\">        motionGroup.motionEffects = [motionX, motionY]</span><br><span class=\"line\">        </span><br><span class=\"line\">        target.addMotionEffect(motionGroup)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>协议在我的理解中就是一个定义好的规范，相当于C++的抽象类，Java的接口。定义好这个规范之后，其他类可以去遵循这个协议，去实现协议中的方法和属性。但是如果有很多类对协议方法的方法体都一样，这样就会写大量重复代码，浪费实现和精力，这个时候协议的extension就起作用了，extension可以给协议扩展一个协议方法的默认实现，这样其他类就可以不用实现了，使用extension中的默认实现就可以了。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Motion</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/// 重力感应 透视</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">motion</span><span class=\"params\">(effectOffset: CGFloat, target: UIView)</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Motion</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/// 重力感应 透视</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">motion</span><span class=\"params\">(effectOffset: CGFloat, target: UIView)</span></span> &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">let</span> motionX = <span class=\"type\">UIInterpolatingMotionEffect</span>(keyPath: <span class=\"string\">\"center.x\"</span>, type: .tiltAlongHorizontalAxis)</span><br><span class=\"line\">        motionX.maximumRelativeValue = effectOffset</span><br><span class=\"line\">        motionX.minimumRelativeValue = -effectOffset</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">let</span> motionY = <span class=\"type\">UIInterpolatingMotionEffect</span>(keyPath: <span class=\"string\">\"center.y\"</span>, type: .tiltAlongVerticalAxis)</span><br><span class=\"line\">        motionY.maximumRelativeValue = effectOffset</span><br><span class=\"line\">        motionY.minimumRelativeValue = -effectOffset</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">let</span> motionGroup = <span class=\"type\">UIMotionEffectGroup</span>()</span><br><span class=\"line\">        motionGroup.motionEffects = [motionX, motionY]</span><br><span class=\"line\">        </span><br><span class=\"line\">        target.addMotionEffect(motionGroup)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"swift循环引用","date":"2017-10-05T03:13:29.000Z","_content":"\n### weak\n在我理解中，weak和oc中的weak没有任何区别，弱引用，引用基数不会加1，当引用的对象释放的时候，指针会被置为nil、避免僵尸对象的产生\n### unowned\n这个很有意思，相当于oc中unsafe-unretain，也就是不安全不retain, 不安全就是当引用的对象释放的时候，指针不会被置为nil，会产生也僵尸对象。不retain也就是弱引用，引用计数不会加1.\n\n苹果有一个customer和card的例子,一个customer不一定拥有card，所以customer使用可选类型的strong指针引用card，一个card一定联系一个customer，所以card使用unowned引用customer。\n> “The relationship between Customer and CreditCard is slightly different from the relationship between Apartment and Person seen in the weak reference example above. In this data model, a customer may or may not have a credit card, but a credit card will always be associated with a customer. A CreditCard instance never outlives the Customer that it refers to. To represent this, the Customer class has an optional card property, but the CreditCard class has an unowned (and nonoptional) customer property.”\n\n``` swift\nclass Customer {\n    let name: String\n    var card: CreditCard?\n    init(name: String) {\n        self.name = name\n    }\n    deinit { print(\"\\(name) is being deinitialized\") }\n}\n \nclass CreditCard {\n    let number: UInt64\n    unowned let customer: Customer\n    init(number: UInt64, customer: Customer) {\n        self.number = number\n        self.customer = customer\n    }\n    deinit { print(\"Card #\\(number) is being deinitialized\") }\n}\n\n```\n\n![](swift循环引用/swiftUnown.png)\n\n","source":"_posts/swift循环引用.md","raw":"---\ntitle: swift循环引用\ndate: 2017-10-05 11:13:29\ntags:\n---\n\n### weak\n在我理解中，weak和oc中的weak没有任何区别，弱引用，引用基数不会加1，当引用的对象释放的时候，指针会被置为nil、避免僵尸对象的产生\n### unowned\n这个很有意思，相当于oc中unsafe-unretain，也就是不安全不retain, 不安全就是当引用的对象释放的时候，指针不会被置为nil，会产生也僵尸对象。不retain也就是弱引用，引用计数不会加1.\n\n苹果有一个customer和card的例子,一个customer不一定拥有card，所以customer使用可选类型的strong指针引用card，一个card一定联系一个customer，所以card使用unowned引用customer。\n> “The relationship between Customer and CreditCard is slightly different from the relationship between Apartment and Person seen in the weak reference example above. In this data model, a customer may or may not have a credit card, but a credit card will always be associated with a customer. A CreditCard instance never outlives the Customer that it refers to. To represent this, the Customer class has an optional card property, but the CreditCard class has an unowned (and nonoptional) customer property.”\n\n``` swift\nclass Customer {\n    let name: String\n    var card: CreditCard?\n    init(name: String) {\n        self.name = name\n    }\n    deinit { print(\"\\(name) is being deinitialized\") }\n}\n \nclass CreditCard {\n    let number: UInt64\n    unowned let customer: Customer\n    init(number: UInt64, customer: Customer) {\n        self.number = number\n        self.customer = customer\n    }\n    deinit { print(\"Card #\\(number) is being deinitialized\") }\n}\n\n```\n\n![](swift循环引用/swiftUnown.png)\n\n","slug":"swift循环引用","published":1,"updated":"2018-12-05T04:31:57.955Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpj8w0vf000c5guq79vq7w9u","content":"<h3 id=\"weak\"><a href=\"#weak\" class=\"headerlink\" title=\"weak\"></a>weak</h3><p>在我理解中，weak和oc中的weak没有任何区别，弱引用，引用基数不会加1，当引用的对象释放的时候，指针会被置为nil、避免僵尸对象的产生</p>\n<h3 id=\"unowned\"><a href=\"#unowned\" class=\"headerlink\" title=\"unowned\"></a>unowned</h3><p>这个很有意思，相当于oc中unsafe-unretain，也就是不安全不retain, 不安全就是当引用的对象释放的时候，指针不会被置为nil，会产生也僵尸对象。不retain也就是弱引用，引用计数不会加1.</p>\n<p>苹果有一个customer和card的例子,一个customer不一定拥有card，所以customer使用可选类型的strong指针引用card，一个card一定联系一个customer，所以card使用unowned引用customer。</p>\n<blockquote>\n<p>“The relationship between Customer and CreditCard is slightly different from the relationship between Apartment and Person seen in the weak reference example above. In this data model, a customer may or may not have a credit card, but a credit card will always be associated with a customer. A CreditCard instance never outlives the Customer that it refers to. To represent this, the Customer class has an optional card property, but the CreditCard class has an unowned (and nonoptional) customer property.”</p>\n</blockquote>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Customer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> name: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> card: <span class=\"type\">CreditCard</span>?</span><br><span class=\"line\">    <span class=\"keyword\">init</span>(name: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.name = name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">deinit</span> &#123; <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(name) is being deinitialized\"</span>) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CreditCard</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> number: <span class=\"type\">UInt64</span></span><br><span class=\"line\">    <span class=\"keyword\">unowned</span> <span class=\"keyword\">let</span> customer: <span class=\"type\">Customer</span></span><br><span class=\"line\">    <span class=\"keyword\">init</span>(number: <span class=\"type\">UInt64</span>, customer: <span class=\"type\">Customer</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.number = number</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.customer = customer</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">deinit</span> &#123; <span class=\"built_in\">print</span>(<span class=\"string\">\"Card #\\(number) is being deinitialized\"</span>) &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2017/10/05/swift循环引用/swiftUnown.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"weak\"><a href=\"#weak\" class=\"headerlink\" title=\"weak\"></a>weak</h3><p>在我理解中，weak和oc中的weak没有任何区别，弱引用，引用基数不会加1，当引用的对象释放的时候，指针会被置为nil、避免僵尸对象的产生</p>\n<h3 id=\"unowned\"><a href=\"#unowned\" class=\"headerlink\" title=\"unowned\"></a>unowned</h3><p>这个很有意思，相当于oc中unsafe-unretain，也就是不安全不retain, 不安全就是当引用的对象释放的时候，指针不会被置为nil，会产生也僵尸对象。不retain也就是弱引用，引用计数不会加1.</p>\n<p>苹果有一个customer和card的例子,一个customer不一定拥有card，所以customer使用可选类型的strong指针引用card，一个card一定联系一个customer，所以card使用unowned引用customer。</p>\n<blockquote>\n<p>“The relationship between Customer and CreditCard is slightly different from the relationship between Apartment and Person seen in the weak reference example above. In this data model, a customer may or may not have a credit card, but a credit card will always be associated with a customer. A CreditCard instance never outlives the Customer that it refers to. To represent this, the Customer class has an optional card property, but the CreditCard class has an unowned (and nonoptional) customer property.”</p>\n</blockquote>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Customer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> name: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> card: <span class=\"type\">CreditCard</span>?</span><br><span class=\"line\">    <span class=\"keyword\">init</span>(name: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.name = name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">deinit</span> &#123; <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(name) is being deinitialized\"</span>) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CreditCard</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> number: <span class=\"type\">UInt64</span></span><br><span class=\"line\">    <span class=\"keyword\">unowned</span> <span class=\"keyword\">let</span> customer: <span class=\"type\">Customer</span></span><br><span class=\"line\">    <span class=\"keyword\">init</span>(number: <span class=\"type\">UInt64</span>, customer: <span class=\"type\">Customer</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.number = number</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.customer = customer</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">deinit</span> &#123; <span class=\"built_in\">print</span>(<span class=\"string\">\"Card #\\(number) is being deinitialized\"</span>) &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2017/10/05/swift循环引用/swiftUnown.png\" alt=\"\"></p>\n"},{"title":"京东和喜马拉雅面试题目","date":"2017-03-05T03:11:14.000Z","_content":"\n## 关键字的区别\n\nreadonly\n\n* 修饰任何类型，仅仅生成get方法\n\t\nreadwrite\n\n* 修饰任何类型，生成get方法，又生成set方法\n\nstrong\n\n* 修饰对象类型. 强引用被修饰对象\n\ncopy\n\n* 修饰不可变对象类型。强引用被修饰对象\n\nweak \n\n* 修饰对象类型。弱引用被修饰对象，当被修饰对象释放的时候，weak修饰的对象指针会指向nil\n\nunsafe_unretained (不safe不retain)\n\n* 修饰对象类型。弱引用被修饰对象。与weak相似。区别在于:当被修饰对象释放的时候，weak修饰的对象指针不会指向nil,会造成野指针。\n\n## mrc到arc的转化过程\n## arc如何实现weak\n## releasepool的底层实现\n## 如何统计错误日志\n## corefoundation的内存管理\n## 从cf对象转化为oc对象，内存如何管理\n## view的drewrect为何会占用内存\n## view和layer的关系\n## view可以没有layer吗\n## 响应链过程\n## 多线程\n## 多线程和数据库的同时访问问题\n## 数据库锁机制\n## http udp tcp\n## http响应体，响应头 请求头 请求体\n## __block\n## 循环引用原理\n## 设计一个播放器架构\n## 堆区栈区。。的不同\n## 单粒的内存分配原理\n## 设计模式\n## 通知是异步还是同步\n## 异步和同步解释\n## runloop\n## 常用runtime\n## category实现属性，内存管理过程\n## sdk架构相关\n## block底层实现\n## 解决手势冲突\n## define和const\n\n","source":"_posts/京东和喜马拉雅面试题目.md","raw":"---\ntitle: 京东和喜马拉雅面试题目\ndate: 2017-03-05 11:11:14\ntags:\n---\n\n## 关键字的区别\n\nreadonly\n\n* 修饰任何类型，仅仅生成get方法\n\t\nreadwrite\n\n* 修饰任何类型，生成get方法，又生成set方法\n\nstrong\n\n* 修饰对象类型. 强引用被修饰对象\n\ncopy\n\n* 修饰不可变对象类型。强引用被修饰对象\n\nweak \n\n* 修饰对象类型。弱引用被修饰对象，当被修饰对象释放的时候，weak修饰的对象指针会指向nil\n\nunsafe_unretained (不safe不retain)\n\n* 修饰对象类型。弱引用被修饰对象。与weak相似。区别在于:当被修饰对象释放的时候，weak修饰的对象指针不会指向nil,会造成野指针。\n\n## mrc到arc的转化过程\n## arc如何实现weak\n## releasepool的底层实现\n## 如何统计错误日志\n## corefoundation的内存管理\n## 从cf对象转化为oc对象，内存如何管理\n## view的drewrect为何会占用内存\n## view和layer的关系\n## view可以没有layer吗\n## 响应链过程\n## 多线程\n## 多线程和数据库的同时访问问题\n## 数据库锁机制\n## http udp tcp\n## http响应体，响应头 请求头 请求体\n## __block\n## 循环引用原理\n## 设计一个播放器架构\n## 堆区栈区。。的不同\n## 单粒的内存分配原理\n## 设计模式\n## 通知是异步还是同步\n## 异步和同步解释\n## runloop\n## 常用runtime\n## category实现属性，内存管理过程\n## sdk架构相关\n## block底层实现\n## 解决手势冲突\n## define和const\n\n","slug":"京东和喜马拉雅面试题目","published":1,"updated":"2018-12-06T02:17:10.600Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpj8w0vg000d5guqnmgqdyfr","content":"<h2 id=\"关键字的区别\"><a href=\"#关键字的区别\" class=\"headerlink\" title=\"关键字的区别\"></a>关键字的区别</h2><p>readonly</p>\n<ul>\n<li>修饰任何类型，仅仅生成get方法</li>\n</ul>\n<p>readwrite</p>\n<ul>\n<li>修饰任何类型，生成get方法，又生成set方法</li>\n</ul>\n<p>strong</p>\n<ul>\n<li>修饰对象类型. 强引用被修饰对象</li>\n</ul>\n<p>copy</p>\n<ul>\n<li>修饰不可变对象类型。强引用被修饰对象</li>\n</ul>\n<p>weak </p>\n<ul>\n<li>修饰对象类型。弱引用被修饰对象，当被修饰对象释放的时候，weak修饰的对象指针会指向nil</li>\n</ul>\n<p>unsafe_unretained (不safe不retain)</p>\n<ul>\n<li>修饰对象类型。弱引用被修饰对象。与weak相似。区别在于:当被修饰对象释放的时候，weak修饰的对象指针不会指向nil,会造成野指针。</li>\n</ul>\n<h2 id=\"mrc到arc的转化过程\"><a href=\"#mrc到arc的转化过程\" class=\"headerlink\" title=\"mrc到arc的转化过程\"></a>mrc到arc的转化过程</h2><h2 id=\"arc如何实现weak\"><a href=\"#arc如何实现weak\" class=\"headerlink\" title=\"arc如何实现weak\"></a>arc如何实现weak</h2><h2 id=\"releasepool的底层实现\"><a href=\"#releasepool的底层实现\" class=\"headerlink\" title=\"releasepool的底层实现\"></a>releasepool的底层实现</h2><h2 id=\"如何统计错误日志\"><a href=\"#如何统计错误日志\" class=\"headerlink\" title=\"如何统计错误日志\"></a>如何统计错误日志</h2><h2 id=\"corefoundation的内存管理\"><a href=\"#corefoundation的内存管理\" class=\"headerlink\" title=\"corefoundation的内存管理\"></a>corefoundation的内存管理</h2><h2 id=\"从cf对象转化为oc对象，内存如何管理\"><a href=\"#从cf对象转化为oc对象，内存如何管理\" class=\"headerlink\" title=\"从cf对象转化为oc对象，内存如何管理\"></a>从cf对象转化为oc对象，内存如何管理</h2><h2 id=\"view的drewrect为何会占用内存\"><a href=\"#view的drewrect为何会占用内存\" class=\"headerlink\" title=\"view的drewrect为何会占用内存\"></a>view的drewrect为何会占用内存</h2><h2 id=\"view和layer的关系\"><a href=\"#view和layer的关系\" class=\"headerlink\" title=\"view和layer的关系\"></a>view和layer的关系</h2><h2 id=\"view可以没有layer吗\"><a href=\"#view可以没有layer吗\" class=\"headerlink\" title=\"view可以没有layer吗\"></a>view可以没有layer吗</h2><h2 id=\"响应链过程\"><a href=\"#响应链过程\" class=\"headerlink\" title=\"响应链过程\"></a>响应链过程</h2><h2 id=\"多线程\"><a href=\"#多线程\" class=\"headerlink\" title=\"多线程\"></a>多线程</h2><h2 id=\"多线程和数据库的同时访问问题\"><a href=\"#多线程和数据库的同时访问问题\" class=\"headerlink\" title=\"多线程和数据库的同时访问问题\"></a>多线程和数据库的同时访问问题</h2><h2 id=\"数据库锁机制\"><a href=\"#数据库锁机制\" class=\"headerlink\" title=\"数据库锁机制\"></a>数据库锁机制</h2><h2 id=\"http-udp-tcp\"><a href=\"#http-udp-tcp\" class=\"headerlink\" title=\"http udp tcp\"></a>http udp tcp</h2><h2 id=\"http响应体，响应头-请求头-请求体\"><a href=\"#http响应体，响应头-请求头-请求体\" class=\"headerlink\" title=\"http响应体，响应头 请求头 请求体\"></a>http响应体，响应头 请求头 请求体</h2><h2 id=\"block\"><a href=\"#block\" class=\"headerlink\" title=\"__block\"></a>__block</h2><h2 id=\"循环引用原理\"><a href=\"#循环引用原理\" class=\"headerlink\" title=\"循环引用原理\"></a>循环引用原理</h2><h2 id=\"设计一个播放器架构\"><a href=\"#设计一个播放器架构\" class=\"headerlink\" title=\"设计一个播放器架构\"></a>设计一个播放器架构</h2><h2 id=\"堆区栈区。。的不同\"><a href=\"#堆区栈区。。的不同\" class=\"headerlink\" title=\"堆区栈区。。的不同\"></a>堆区栈区。。的不同</h2><h2 id=\"单粒的内存分配原理\"><a href=\"#单粒的内存分配原理\" class=\"headerlink\" title=\"单粒的内存分配原理\"></a>单粒的内存分配原理</h2><h2 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h2><h2 id=\"通知是异步还是同步\"><a href=\"#通知是异步还是同步\" class=\"headerlink\" title=\"通知是异步还是同步\"></a>通知是异步还是同步</h2><h2 id=\"异步和同步解释\"><a href=\"#异步和同步解释\" class=\"headerlink\" title=\"异步和同步解释\"></a>异步和同步解释</h2><h2 id=\"runloop\"><a href=\"#runloop\" class=\"headerlink\" title=\"runloop\"></a>runloop</h2><h2 id=\"常用runtime\"><a href=\"#常用runtime\" class=\"headerlink\" title=\"常用runtime\"></a>常用runtime</h2><h2 id=\"category实现属性，内存管理过程\"><a href=\"#category实现属性，内存管理过程\" class=\"headerlink\" title=\"category实现属性，内存管理过程\"></a>category实现属性，内存管理过程</h2><h2 id=\"sdk架构相关\"><a href=\"#sdk架构相关\" class=\"headerlink\" title=\"sdk架构相关\"></a>sdk架构相关</h2><h2 id=\"block底层实现\"><a href=\"#block底层实现\" class=\"headerlink\" title=\"block底层实现\"></a>block底层实现</h2><h2 id=\"解决手势冲突\"><a href=\"#解决手势冲突\" class=\"headerlink\" title=\"解决手势冲突\"></a>解决手势冲突</h2><h2 id=\"define和const\"><a href=\"#define和const\" class=\"headerlink\" title=\"define和const\"></a>define和const</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"关键字的区别\"><a href=\"#关键字的区别\" class=\"headerlink\" title=\"关键字的区别\"></a>关键字的区别</h2><p>readonly</p>\n<ul>\n<li>修饰任何类型，仅仅生成get方法</li>\n</ul>\n<p>readwrite</p>\n<ul>\n<li>修饰任何类型，生成get方法，又生成set方法</li>\n</ul>\n<p>strong</p>\n<ul>\n<li>修饰对象类型. 强引用被修饰对象</li>\n</ul>\n<p>copy</p>\n<ul>\n<li>修饰不可变对象类型。强引用被修饰对象</li>\n</ul>\n<p>weak </p>\n<ul>\n<li>修饰对象类型。弱引用被修饰对象，当被修饰对象释放的时候，weak修饰的对象指针会指向nil</li>\n</ul>\n<p>unsafe_unretained (不safe不retain)</p>\n<ul>\n<li>修饰对象类型。弱引用被修饰对象。与weak相似。区别在于:当被修饰对象释放的时候，weak修饰的对象指针不会指向nil,会造成野指针。</li>\n</ul>\n<h2 id=\"mrc到arc的转化过程\"><a href=\"#mrc到arc的转化过程\" class=\"headerlink\" title=\"mrc到arc的转化过程\"></a>mrc到arc的转化过程</h2><h2 id=\"arc如何实现weak\"><a href=\"#arc如何实现weak\" class=\"headerlink\" title=\"arc如何实现weak\"></a>arc如何实现weak</h2><h2 id=\"releasepool的底层实现\"><a href=\"#releasepool的底层实现\" class=\"headerlink\" title=\"releasepool的底层实现\"></a>releasepool的底层实现</h2><h2 id=\"如何统计错误日志\"><a href=\"#如何统计错误日志\" class=\"headerlink\" title=\"如何统计错误日志\"></a>如何统计错误日志</h2><h2 id=\"corefoundation的内存管理\"><a href=\"#corefoundation的内存管理\" class=\"headerlink\" title=\"corefoundation的内存管理\"></a>corefoundation的内存管理</h2><h2 id=\"从cf对象转化为oc对象，内存如何管理\"><a href=\"#从cf对象转化为oc对象，内存如何管理\" class=\"headerlink\" title=\"从cf对象转化为oc对象，内存如何管理\"></a>从cf对象转化为oc对象，内存如何管理</h2><h2 id=\"view的drewrect为何会占用内存\"><a href=\"#view的drewrect为何会占用内存\" class=\"headerlink\" title=\"view的drewrect为何会占用内存\"></a>view的drewrect为何会占用内存</h2><h2 id=\"view和layer的关系\"><a href=\"#view和layer的关系\" class=\"headerlink\" title=\"view和layer的关系\"></a>view和layer的关系</h2><h2 id=\"view可以没有layer吗\"><a href=\"#view可以没有layer吗\" class=\"headerlink\" title=\"view可以没有layer吗\"></a>view可以没有layer吗</h2><h2 id=\"响应链过程\"><a href=\"#响应链过程\" class=\"headerlink\" title=\"响应链过程\"></a>响应链过程</h2><h2 id=\"多线程\"><a href=\"#多线程\" class=\"headerlink\" title=\"多线程\"></a>多线程</h2><h2 id=\"多线程和数据库的同时访问问题\"><a href=\"#多线程和数据库的同时访问问题\" class=\"headerlink\" title=\"多线程和数据库的同时访问问题\"></a>多线程和数据库的同时访问问题</h2><h2 id=\"数据库锁机制\"><a href=\"#数据库锁机制\" class=\"headerlink\" title=\"数据库锁机制\"></a>数据库锁机制</h2><h2 id=\"http-udp-tcp\"><a href=\"#http-udp-tcp\" class=\"headerlink\" title=\"http udp tcp\"></a>http udp tcp</h2><h2 id=\"http响应体，响应头-请求头-请求体\"><a href=\"#http响应体，响应头-请求头-请求体\" class=\"headerlink\" title=\"http响应体，响应头 请求头 请求体\"></a>http响应体，响应头 请求头 请求体</h2><h2 id=\"block\"><a href=\"#block\" class=\"headerlink\" title=\"__block\"></a>__block</h2><h2 id=\"循环引用原理\"><a href=\"#循环引用原理\" class=\"headerlink\" title=\"循环引用原理\"></a>循环引用原理</h2><h2 id=\"设计一个播放器架构\"><a href=\"#设计一个播放器架构\" class=\"headerlink\" title=\"设计一个播放器架构\"></a>设计一个播放器架构</h2><h2 id=\"堆区栈区。。的不同\"><a href=\"#堆区栈区。。的不同\" class=\"headerlink\" title=\"堆区栈区。。的不同\"></a>堆区栈区。。的不同</h2><h2 id=\"单粒的内存分配原理\"><a href=\"#单粒的内存分配原理\" class=\"headerlink\" title=\"单粒的内存分配原理\"></a>单粒的内存分配原理</h2><h2 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h2><h2 id=\"通知是异步还是同步\"><a href=\"#通知是异步还是同步\" class=\"headerlink\" title=\"通知是异步还是同步\"></a>通知是异步还是同步</h2><h2 id=\"异步和同步解释\"><a href=\"#异步和同步解释\" class=\"headerlink\" title=\"异步和同步解释\"></a>异步和同步解释</h2><h2 id=\"runloop\"><a href=\"#runloop\" class=\"headerlink\" title=\"runloop\"></a>runloop</h2><h2 id=\"常用runtime\"><a href=\"#常用runtime\" class=\"headerlink\" title=\"常用runtime\"></a>常用runtime</h2><h2 id=\"category实现属性，内存管理过程\"><a href=\"#category实现属性，内存管理过程\" class=\"headerlink\" title=\"category实现属性，内存管理过程\"></a>category实现属性，内存管理过程</h2><h2 id=\"sdk架构相关\"><a href=\"#sdk架构相关\" class=\"headerlink\" title=\"sdk架构相关\"></a>sdk架构相关</h2><h2 id=\"block底层实现\"><a href=\"#block底层实现\" class=\"headerlink\" title=\"block底层实现\"></a>block底层实现</h2><h2 id=\"解决手势冲突\"><a href=\"#解决手势冲突\" class=\"headerlink\" title=\"解决手势冲突\"></a>解决手势冲突</h2><h2 id=\"define和const\"><a href=\"#define和const\" class=\"headerlink\" title=\"define和const\"></a>define和const</h2>"},{"title":"内存分配","date":"2017-06-21T03:11:32.000Z","_content":"\n![](内存分配/cmem.png)\n\n``` c\nint main()\n{\n    int a = 4;\n    int b = 5;\n    return 0;\n}\n```\n* 设置断点运行\n* 找到xcode的导航条\n* Debug->Debug Workflow-> Always show Dissambly(勾选)\n\n```\nTets`main:\n    0x100000f90 <+0>:  pushq  %rbp\n    0x100000f91 <+1>:  movq   %rsp, %rbp\n    0x100000f94 <+4>:  xorl   %eax, %eax\n    0x100000f96 <+6>:  movl   $0x0, -0x4(%rbp)\n    0x100000f9d <+13>: movl   $0x4, -0x8(%rbp)\n    0x100000fa4 <+20>: movl   $0x5, -0xc(%rbp)\n    0x100000fab <+27>: popq   %rbp\n    0x100000fac <+28>: retq  \n```\n\n![](内存分配/cms.png)\n","source":"_posts/内存分配.md","raw":"---\ntitle: 内存分配\ndate: 2017-06-21 11:11:32\ntags:\n---\n\n![](内存分配/cmem.png)\n\n``` c\nint main()\n{\n    int a = 4;\n    int b = 5;\n    return 0;\n}\n```\n* 设置断点运行\n* 找到xcode的导航条\n* Debug->Debug Workflow-> Always show Dissambly(勾选)\n\n```\nTets`main:\n    0x100000f90 <+0>:  pushq  %rbp\n    0x100000f91 <+1>:  movq   %rsp, %rbp\n    0x100000f94 <+4>:  xorl   %eax, %eax\n    0x100000f96 <+6>:  movl   $0x0, -0x4(%rbp)\n    0x100000f9d <+13>: movl   $0x4, -0x8(%rbp)\n    0x100000fa4 <+20>: movl   $0x5, -0xc(%rbp)\n    0x100000fab <+27>: popq   %rbp\n    0x100000fac <+28>: retq  \n```\n\n![](内存分配/cms.png)\n","slug":"内存分配","published":1,"updated":"2018-12-05T04:34:05.693Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpj8w0vh000e5guqbthtgm7u","content":"<p><img src=\"/2017/06/21/内存分配/cmem.png\" alt=\"\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> b = <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>设置断点运行</li>\n<li>找到xcode的导航条</li>\n<li>Debug-&gt;Debug Workflow-&gt; Always show Dissambly(勾选)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Tets`main:</span><br><span class=\"line\">    0x100000f90 &lt;+0&gt;:  pushq  %rbp</span><br><span class=\"line\">    0x100000f91 &lt;+1&gt;:  movq   %rsp, %rbp</span><br><span class=\"line\">    0x100000f94 &lt;+4&gt;:  xorl   %eax, %eax</span><br><span class=\"line\">    0x100000f96 &lt;+6&gt;:  movl   $0x0, -0x4(%rbp)</span><br><span class=\"line\">    0x100000f9d &lt;+13&gt;: movl   $0x4, -0x8(%rbp)</span><br><span class=\"line\">    0x100000fa4 &lt;+20&gt;: movl   $0x5, -0xc(%rbp)</span><br><span class=\"line\">    0x100000fab &lt;+27&gt;: popq   %rbp</span><br><span class=\"line\">    0x100000fac &lt;+28&gt;: retq</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2017/06/21/内存分配/cms.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/2017/06/21/内存分配/cmem.png\" alt=\"\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> b = <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>设置断点运行</li>\n<li>找到xcode的导航条</li>\n<li>Debug-&gt;Debug Workflow-&gt; Always show Dissambly(勾选)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Tets`main:</span><br><span class=\"line\">    0x100000f90 &lt;+0&gt;:  pushq  %rbp</span><br><span class=\"line\">    0x100000f91 &lt;+1&gt;:  movq   %rsp, %rbp</span><br><span class=\"line\">    0x100000f94 &lt;+4&gt;:  xorl   %eax, %eax</span><br><span class=\"line\">    0x100000f96 &lt;+6&gt;:  movl   $0x0, -0x4(%rbp)</span><br><span class=\"line\">    0x100000f9d &lt;+13&gt;: movl   $0x4, -0x8(%rbp)</span><br><span class=\"line\">    0x100000fa4 &lt;+20&gt;: movl   $0x5, -0xc(%rbp)</span><br><span class=\"line\">    0x100000fab &lt;+27&gt;: popq   %rbp</span><br><span class=\"line\">    0x100000fac &lt;+28&gt;: retq</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2017/06/21/内存分配/cms.png\" alt=\"\"></p>\n"},{"title":"博客搭建","date":"2018-10-13T04:39:16.000Z","_content":"\n闲暇之余，想搭建一个属于自己的网站，用来记录自己的学习过程，以及自己的学习心得。\n### 思路\n  目前比较流行的写博客的格式都是markdown，我希望实现的效果是编辑一篇.md文档，直接commit-push就万事大吉。\n  \n  首先确定使用GithubPage来搭建，GithubPage会首先解析index.html，所以可以在index.html中来做文章。\n  \n  bootstrap是一个流行的前端框架，我准备利用bootstrap来布局样式。\n\n  marked.js是一个markdown解析库，简单来说，就是可以把.md文件解析为html。\n  \n### 实现\n.md里面的链接地址写成?md=*.md这种格式，这样以来，md=*.md就会变成get请求的参数，url地址就会变成https://sunnercc.github.io/index.html?md=*.md\n```\nhello-world [link](?md=hello-world.md)\n```\n取出url地址参数中md对应的value就可以获取到文件名，然后拼接需要解析的.md文件的请求路径url。\n\n```\n  var url = \"https://raw.githubusercontent.com/sunnercc/sunnercc.github.io/master/post/about.md\"\n  var param = location.search.split(\"?md=\")[1]\n  if (param) {\n    url = \"https://raw.githubusercontent.com/sunnercc/sunnercc.github.io/master/post/\" + param\n  }\n```\n请求拼接后的url，获取文件内容，然后利用marked解析获取结果，替换content标签中的内容。\n```\n xmlhttp = new XMLHttpRequest();\n xmlhttp.open(\"GET\", url, false);\n xmlhttp.send();\n document.getElementById('content').innerHTML = marked(xmlhttp.responseText);\n```\n\n### 总结\n主要是利用marked来解析.md文档生成html，利用bootstrap搭建做了一些简单样式，\n还可以利用highlight.js来实现markdown代码块的高亮显示，但是我觉得太丑了，所以就没有使用.\n","source":"_posts/博客搭建.md","raw":"---\ntitle: 博客搭建\ndate: 2018-10-13 12:39:16\ntags:\n---\n\n闲暇之余，想搭建一个属于自己的网站，用来记录自己的学习过程，以及自己的学习心得。\n### 思路\n  目前比较流行的写博客的格式都是markdown，我希望实现的效果是编辑一篇.md文档，直接commit-push就万事大吉。\n  \n  首先确定使用GithubPage来搭建，GithubPage会首先解析index.html，所以可以在index.html中来做文章。\n  \n  bootstrap是一个流行的前端框架，我准备利用bootstrap来布局样式。\n\n  marked.js是一个markdown解析库，简单来说，就是可以把.md文件解析为html。\n  \n### 实现\n.md里面的链接地址写成?md=*.md这种格式，这样以来，md=*.md就会变成get请求的参数，url地址就会变成https://sunnercc.github.io/index.html?md=*.md\n```\nhello-world [link](?md=hello-world.md)\n```\n取出url地址参数中md对应的value就可以获取到文件名，然后拼接需要解析的.md文件的请求路径url。\n\n```\n  var url = \"https://raw.githubusercontent.com/sunnercc/sunnercc.github.io/master/post/about.md\"\n  var param = location.search.split(\"?md=\")[1]\n  if (param) {\n    url = \"https://raw.githubusercontent.com/sunnercc/sunnercc.github.io/master/post/\" + param\n  }\n```\n请求拼接后的url，获取文件内容，然后利用marked解析获取结果，替换content标签中的内容。\n```\n xmlhttp = new XMLHttpRequest();\n xmlhttp.open(\"GET\", url, false);\n xmlhttp.send();\n document.getElementById('content').innerHTML = marked(xmlhttp.responseText);\n```\n\n### 总结\n主要是利用marked来解析.md文档生成html，利用bootstrap搭建做了一些简单样式，\n还可以利用highlight.js来实现markdown代码块的高亮显示，但是我觉得太丑了，所以就没有使用.\n","slug":"博客搭建","published":1,"updated":"2018-12-05T04:40:01.388Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpj8w0vi000f5guqiviyfcny","content":"<p>闲暇之余，想搭建一个属于自己的网站，用来记录自己的学习过程，以及自己的学习心得。</p>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>  目前比较流行的写博客的格式都是markdown，我希望实现的效果是编辑一篇.md文档，直接commit-push就万事大吉。</p>\n<p>  首先确定使用GithubPage来搭建，GithubPage会首先解析index.html，所以可以在index.html中来做文章。</p>\n<p>  bootstrap是一个流行的前端框架，我准备利用bootstrap来布局样式。</p>\n<p>  marked.js是一个markdown解析库，简单来说，就是可以把.md文件解析为html。</p>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>.md里面的链接地址写成?md=<em>.md这种格式，这样以来，md=</em>.md就会变成get请求的参数，url地址就会变成<a href=\"https://sunnercc.github.io/index.html?md=*.md\" target=\"_blank\" rel=\"noopener\">https://sunnercc.github.io/index.html?md=*.md</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello-world [link](?md=hello-world.md)</span><br></pre></td></tr></table></figure></p>\n<p>取出url地址参数中md对应的value就可以获取到文件名，然后拼接需要解析的.md文件的请求路径url。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var url = &quot;https://raw.githubusercontent.com/sunnercc/sunnercc.github.io/master/post/about.md&quot;</span><br><span class=\"line\">var param = location.search.split(&quot;?md=&quot;)[1]</span><br><span class=\"line\">if (param) &#123;</span><br><span class=\"line\">  url = &quot;https://raw.githubusercontent.com/sunnercc/sunnercc.github.io/master/post/&quot; + param</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>请求拼接后的url，获取文件内容，然后利用marked解析获取结果，替换content标签中的内容。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xmlhttp = new XMLHttpRequest();</span><br><span class=\"line\">xmlhttp.open(&quot;GET&quot;, url, false);</span><br><span class=\"line\">xmlhttp.send();</span><br><span class=\"line\">document.getElementById(&apos;content&apos;).innerHTML = marked(xmlhttp.responseText);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>主要是利用marked来解析.md文档生成html，利用bootstrap搭建做了一些简单样式，<br>还可以利用highlight.js来实现markdown代码块的高亮显示，但是我觉得太丑了，所以就没有使用.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>闲暇之余，想搭建一个属于自己的网站，用来记录自己的学习过程，以及自己的学习心得。</p>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>  目前比较流行的写博客的格式都是markdown，我希望实现的效果是编辑一篇.md文档，直接commit-push就万事大吉。</p>\n<p>  首先确定使用GithubPage来搭建，GithubPage会首先解析index.html，所以可以在index.html中来做文章。</p>\n<p>  bootstrap是一个流行的前端框架，我准备利用bootstrap来布局样式。</p>\n<p>  marked.js是一个markdown解析库，简单来说，就是可以把.md文件解析为html。</p>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>.md里面的链接地址写成?md=<em>.md这种格式，这样以来，md=</em>.md就会变成get请求的参数，url地址就会变成<a href=\"https://sunnercc.github.io/index.html?md=*.md\" target=\"_blank\" rel=\"noopener\">https://sunnercc.github.io/index.html?md=*.md</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello-world [link](?md=hello-world.md)</span><br></pre></td></tr></table></figure></p>\n<p>取出url地址参数中md对应的value就可以获取到文件名，然后拼接需要解析的.md文件的请求路径url。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var url = &quot;https://raw.githubusercontent.com/sunnercc/sunnercc.github.io/master/post/about.md&quot;</span><br><span class=\"line\">var param = location.search.split(&quot;?md=&quot;)[1]</span><br><span class=\"line\">if (param) &#123;</span><br><span class=\"line\">  url = &quot;https://raw.githubusercontent.com/sunnercc/sunnercc.github.io/master/post/&quot; + param</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>请求拼接后的url，获取文件内容，然后利用marked解析获取结果，替换content标签中的内容。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xmlhttp = new XMLHttpRequest();</span><br><span class=\"line\">xmlhttp.open(&quot;GET&quot;, url, false);</span><br><span class=\"line\">xmlhttp.send();</span><br><span class=\"line\">document.getElementById(&apos;content&apos;).innerHTML = marked(xmlhttp.responseText);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>主要是利用marked来解析.md文档生成html，利用bootstrap搭建做了一些简单样式，<br>还可以利用highlight.js来实现markdown代码块的高亮显示，但是我觉得太丑了，所以就没有使用.</p>\n"},{"title":"引用计数","date":"2018-05-05T03:10:32.000Z","_content":"\n## 苹果的引用计数\n![](引用计数/appleRetainCount.png)\n\n## GUN的引用计数\n\n![](引用计数/gunretainCount.png)\n\n分配内存\n``` objc\n+ (id) alloc\n{\n  return [self allocWithZone: NSDefaultMallocZone()];\n}\n\n+ (id) allocWithZone: (NSZone*)z\n{\n  return NSAllocateObject (self, 0, z);\n}\n\nstruct obj_layout {\n  char\tpadding[__BIGGEST_ALIGNMENT__ - ((UNP % __BIGGEST_ALIGNMENT__)\n    ? (UNP % __BIGGEST_ALIGNMENT__) : __BIGGEST_ALIGNMENT__)];\n  gsrefcount_t\tretained;\n};\ntypedef\tstruct obj_layout *obj;\n\ninline id\nNSAllocateObject (Class aClass, NSUInteger extraBytes, NSZone *zone)\n{\n  id\tnew;\n  int\tsize;\n\n  NSCAssert((!class_isMetaClass(aClass)), @\"Bad class for new object\");\n  size = class_getInstanceSize(aClass) + extraBytes + sizeof(struct obj_layout);\n  if (zone == 0)\n    {\n      zone = NSDefaultMallocZone();\n    }\n  new = NSZoneMalloc(zone, size);\n  if (new != nil)\n    {\n      memset (new, 0, size);\n      new = (id)&((obj)new)[1];\n      object_setClass(new, aClass);\n      AADD(aClass, new);\n    }\n\n  /* Don't bother doing this in a thread-safe way, because the cost of locking\n   * will be a lot more than the cost of doing the same call in two threads.\n   * The returned selector will persist and the runtime will ensure that both\n   * calls return the same selector, so we don't need to bother doing it\n   * ourselves.\n   */\n  if (0 == cxx_construct)\n    {\n      cxx_construct = sel_registerName(\".cxx_construct\");\n      cxx_destruct = sel_registerName(\".cxx_destruct\");\n    }\n  callCXXConstructors(aClass, new);\n\n  return new;\n}\n```\nretain操作\n``` objc\n- (id) retain\n{\n  NSIncrementExtraRefCount(self);\n  return self;\n}\n\ninline void\nNSIncrementExtraRefCount(id anObject)\n{\n#if\tdefined(GSATOMICREAD)\n  /* I've seen comments saying that some platforms only support up to\n   * 24 bits in atomic locking, so raise an exception if we try to\n   * go beyond 0xfffffe.\n   */\n  if (GSAtomicIncrement((gsatomic_t)&(((obj)anObject)[-1].retained))\n    > 0xfffffe)\n    {\n      [NSException raise: NSInternalInconsistencyException\n        format: @\"NSIncrementExtraRefCount() asked to increment too far\"];\n    }\n#else\t/* GSATOMICREAD */\n  NSLock *theLock = GSAllocationLockForObject(anObject);\n\n  [theLock lock];\n  if (((obj)anObject)[-1].retained > 0xfffffe)\n    {\n      [theLock unlock];\n      [NSException raise: NSInternalInconsistencyException\n        format: @\"NSIncrementExtraRefCount() asked to increment too far\"];\n    }\n  ((obj)anObject)[-1].retained++;\n  [theLock unlock];\n#endif\t/* GSATOMICREAD */\n}\n```\nrelease操作\n``` objc\n- (oneway void) release\n{\n  if (NSDecrementExtraRefCountWasZero(self))\n    {\n#  ifdef OBJC_CAP_ARC\n      objc_delete_weak_refs(self);\n#  endif\n      [self dealloc];\n    }\n}\n\ninline BOOL\nNSDecrementExtraRefCountWasZero(id anObject)\n{\n  if (double_release_check_enabled)\n    {\n      NSUInteger release_count;\n      NSUInteger retain_count = [anObject retainCount];\n      release_count = [autorelease_class autoreleaseCountForObject: anObject];\n      if (release_count >= retain_count)\n        [NSException raise: NSGenericException\n\t\t    format: @\"Release would release object too many times.\"];\n    }\n  {\n#if\tdefined(GSATOMICREAD)\n    gsrefcount_t\tresult;\n\n    result = GSAtomicDecrement((gsatomic_t)&(((obj)anObject)[-1].retained));\n    if (result < 0)\n      {\n        if (result != -1)\n          {\n            [NSException raise: NSInternalInconsistencyException\n              format: @\"NSDecrementExtraRefCount() decremented too far\"];\n          }\n        /* The counter has become negative so it must have been zero.\n         * We reset it and return YES ... in a correctly operating\n         * process we know we can safely reset back to zero without\n         * worrying about atomicity, since there can be no other\n         * thread accessing the object (or its reference count would\n         * have been greater than zero)\n         */\n        (((obj)anObject)[-1].retained) = 0;\n        return YES;\n      }\n#else\t/* GSATOMICREAD */\n    NSLock *theLock = GSAllocationLockForObject(anObject);\n\n    [theLock lock];\n    if (((obj)anObject)[-1].retained == 0)\n      {\n        [theLock unlock];\n        return YES;\n      }\n    else\n      {\n        ((obj)anObject)[-1].retained--;\n        [theLock unlock];\n        return NO;\n      }\n#endif\t/* GSATOMICREAD */\n  }\n  return NO;\n}\n```\n\nautorelease操作\n``` objc\n- (id) autorelease\n{\n  if (double_release_check_enabled)\n    {\n      NSUInteger release_count;\n      NSUInteger retain_count = [self retainCount];\n      release_count = [autorelease_class autoreleaseCountForObject:self];\n      if (release_count > retain_count)\n        [NSException\n\t  raise: NSGenericException\n\t  format: @\"Autorelease would release object too many times.\\n\"\n\t  @\"%\"PRIuPTR\" release(s) versus %\"PRIuPTR\" retain(s)\",\n\t  release_count, retain_count];\n    }\n\n  (*autorelease_imp)(autorelease_class, autorelease_sel, self);\n  return self;\n}\n\n```\n\n获取引用计数\n``` objc \n- (NSUInteger) retainCount\n{\n  return NSExtraRefCount(self) + 1;\n}\n\ninline NSUInteger\nNSExtraRefCount(id anObject)\n{\n  return ((obj)anObject)[-1].retained;\n}\n\n```\n\n对象释放\n``` objc\ninline void\nNSDeallocateObject(id anObject)\n{\n  Class aClass = object_getClass(anObject);\n\n  if ((anObject != nil) && !class_isMetaClass(aClass))\n    {\n      obj\to = &((obj)anObject)[-1];\n      NSZone\t*z = NSZoneFromPointer(o);\n\n      /* Call the default finalizer to handle C++ destructors.\n       */\n      (*finalize_imp)(anObject, finalize_sel);\n\n      AREM(aClass, (id)anObject);\n      if (NSZombieEnabled == YES)\n\t{\n\t  GSMakeZombie(anObject, aClass);\n\t  if (NSDeallocateZombies == YES)\n\t    {\n\t      NSZoneFree(z, o);\n\t    }\n\t}\n      else\n\t{\n\t  object_setClass((id)anObject, (Class)(void*)0xdeadface);\n\t  NSZoneFree(z, o);\n\t}\n    }\n  return;\n}\n\n```\n***\n\n","source":"_posts/引用计数.md","raw":"---\ntitle: 引用计数\ndate: 2018-05-05 11:10:32\ntags:\n---\n\n## 苹果的引用计数\n![](引用计数/appleRetainCount.png)\n\n## GUN的引用计数\n\n![](引用计数/gunretainCount.png)\n\n分配内存\n``` objc\n+ (id) alloc\n{\n  return [self allocWithZone: NSDefaultMallocZone()];\n}\n\n+ (id) allocWithZone: (NSZone*)z\n{\n  return NSAllocateObject (self, 0, z);\n}\n\nstruct obj_layout {\n  char\tpadding[__BIGGEST_ALIGNMENT__ - ((UNP % __BIGGEST_ALIGNMENT__)\n    ? (UNP % __BIGGEST_ALIGNMENT__) : __BIGGEST_ALIGNMENT__)];\n  gsrefcount_t\tretained;\n};\ntypedef\tstruct obj_layout *obj;\n\ninline id\nNSAllocateObject (Class aClass, NSUInteger extraBytes, NSZone *zone)\n{\n  id\tnew;\n  int\tsize;\n\n  NSCAssert((!class_isMetaClass(aClass)), @\"Bad class for new object\");\n  size = class_getInstanceSize(aClass) + extraBytes + sizeof(struct obj_layout);\n  if (zone == 0)\n    {\n      zone = NSDefaultMallocZone();\n    }\n  new = NSZoneMalloc(zone, size);\n  if (new != nil)\n    {\n      memset (new, 0, size);\n      new = (id)&((obj)new)[1];\n      object_setClass(new, aClass);\n      AADD(aClass, new);\n    }\n\n  /* Don't bother doing this in a thread-safe way, because the cost of locking\n   * will be a lot more than the cost of doing the same call in two threads.\n   * The returned selector will persist and the runtime will ensure that both\n   * calls return the same selector, so we don't need to bother doing it\n   * ourselves.\n   */\n  if (0 == cxx_construct)\n    {\n      cxx_construct = sel_registerName(\".cxx_construct\");\n      cxx_destruct = sel_registerName(\".cxx_destruct\");\n    }\n  callCXXConstructors(aClass, new);\n\n  return new;\n}\n```\nretain操作\n``` objc\n- (id) retain\n{\n  NSIncrementExtraRefCount(self);\n  return self;\n}\n\ninline void\nNSIncrementExtraRefCount(id anObject)\n{\n#if\tdefined(GSATOMICREAD)\n  /* I've seen comments saying that some platforms only support up to\n   * 24 bits in atomic locking, so raise an exception if we try to\n   * go beyond 0xfffffe.\n   */\n  if (GSAtomicIncrement((gsatomic_t)&(((obj)anObject)[-1].retained))\n    > 0xfffffe)\n    {\n      [NSException raise: NSInternalInconsistencyException\n        format: @\"NSIncrementExtraRefCount() asked to increment too far\"];\n    }\n#else\t/* GSATOMICREAD */\n  NSLock *theLock = GSAllocationLockForObject(anObject);\n\n  [theLock lock];\n  if (((obj)anObject)[-1].retained > 0xfffffe)\n    {\n      [theLock unlock];\n      [NSException raise: NSInternalInconsistencyException\n        format: @\"NSIncrementExtraRefCount() asked to increment too far\"];\n    }\n  ((obj)anObject)[-1].retained++;\n  [theLock unlock];\n#endif\t/* GSATOMICREAD */\n}\n```\nrelease操作\n``` objc\n- (oneway void) release\n{\n  if (NSDecrementExtraRefCountWasZero(self))\n    {\n#  ifdef OBJC_CAP_ARC\n      objc_delete_weak_refs(self);\n#  endif\n      [self dealloc];\n    }\n}\n\ninline BOOL\nNSDecrementExtraRefCountWasZero(id anObject)\n{\n  if (double_release_check_enabled)\n    {\n      NSUInteger release_count;\n      NSUInteger retain_count = [anObject retainCount];\n      release_count = [autorelease_class autoreleaseCountForObject: anObject];\n      if (release_count >= retain_count)\n        [NSException raise: NSGenericException\n\t\t    format: @\"Release would release object too many times.\"];\n    }\n  {\n#if\tdefined(GSATOMICREAD)\n    gsrefcount_t\tresult;\n\n    result = GSAtomicDecrement((gsatomic_t)&(((obj)anObject)[-1].retained));\n    if (result < 0)\n      {\n        if (result != -1)\n          {\n            [NSException raise: NSInternalInconsistencyException\n              format: @\"NSDecrementExtraRefCount() decremented too far\"];\n          }\n        /* The counter has become negative so it must have been zero.\n         * We reset it and return YES ... in a correctly operating\n         * process we know we can safely reset back to zero without\n         * worrying about atomicity, since there can be no other\n         * thread accessing the object (or its reference count would\n         * have been greater than zero)\n         */\n        (((obj)anObject)[-1].retained) = 0;\n        return YES;\n      }\n#else\t/* GSATOMICREAD */\n    NSLock *theLock = GSAllocationLockForObject(anObject);\n\n    [theLock lock];\n    if (((obj)anObject)[-1].retained == 0)\n      {\n        [theLock unlock];\n        return YES;\n      }\n    else\n      {\n        ((obj)anObject)[-1].retained--;\n        [theLock unlock];\n        return NO;\n      }\n#endif\t/* GSATOMICREAD */\n  }\n  return NO;\n}\n```\n\nautorelease操作\n``` objc\n- (id) autorelease\n{\n  if (double_release_check_enabled)\n    {\n      NSUInteger release_count;\n      NSUInteger retain_count = [self retainCount];\n      release_count = [autorelease_class autoreleaseCountForObject:self];\n      if (release_count > retain_count)\n        [NSException\n\t  raise: NSGenericException\n\t  format: @\"Autorelease would release object too many times.\\n\"\n\t  @\"%\"PRIuPTR\" release(s) versus %\"PRIuPTR\" retain(s)\",\n\t  release_count, retain_count];\n    }\n\n  (*autorelease_imp)(autorelease_class, autorelease_sel, self);\n  return self;\n}\n\n```\n\n获取引用计数\n``` objc \n- (NSUInteger) retainCount\n{\n  return NSExtraRefCount(self) + 1;\n}\n\ninline NSUInteger\nNSExtraRefCount(id anObject)\n{\n  return ((obj)anObject)[-1].retained;\n}\n\n```\n\n对象释放\n``` objc\ninline void\nNSDeallocateObject(id anObject)\n{\n  Class aClass = object_getClass(anObject);\n\n  if ((anObject != nil) && !class_isMetaClass(aClass))\n    {\n      obj\to = &((obj)anObject)[-1];\n      NSZone\t*z = NSZoneFromPointer(o);\n\n      /* Call the default finalizer to handle C++ destructors.\n       */\n      (*finalize_imp)(anObject, finalize_sel);\n\n      AREM(aClass, (id)anObject);\n      if (NSZombieEnabled == YES)\n\t{\n\t  GSMakeZombie(anObject, aClass);\n\t  if (NSDeallocateZombies == YES)\n\t    {\n\t      NSZoneFree(z, o);\n\t    }\n\t}\n      else\n\t{\n\t  object_setClass((id)anObject, (Class)(void*)0xdeadface);\n\t  NSZoneFree(z, o);\n\t}\n    }\n  return;\n}\n\n```\n***\n\n","slug":"引用计数","published":1,"updated":"2018-12-05T05:04:50.039Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpj8w0vj000g5guq1nb28t4a","content":"<h2 id=\"苹果的引用计数\"><a href=\"#苹果的引用计数\" class=\"headerlink\" title=\"苹果的引用计数\"></a>苹果的引用计数</h2><p><img src=\"/2018/05/05/引用计数/appleRetainCount.png\" alt=\"\"></p>\n<h2 id=\"GUN的引用计数\"><a href=\"#GUN的引用计数\" class=\"headerlink\" title=\"GUN的引用计数\"></a>GUN的引用计数</h2><p><img src=\"/2018/05/05/引用计数/gunretainCount.png\" alt=\"\"></p>\n<p>分配内存<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (<span class=\"keyword\">id</span>) alloc</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [<span class=\"keyword\">self</span> allocWithZone: <span class=\"built_in\">NSDefaultMallocZone</span>()];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+ (<span class=\"keyword\">id</span>) allocWithZone: (<span class=\"built_in\">NSZone</span>*)z</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">NSAllocateObject</span> (<span class=\"keyword\">self</span>, <span class=\"number\">0</span>, z);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> obj_layout &#123;</span><br><span class=\"line\">  <span class=\"keyword\">char</span>\tpadding[__BIGGEST_ALIGNMENT__ - ((UNP % __BIGGEST_ALIGNMENT__)</span><br><span class=\"line\">    ? (UNP % __BIGGEST_ALIGNMENT__) : __BIGGEST_ALIGNMENT__)];</span><br><span class=\"line\">  gsrefcount_t\tretained;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span>\t<span class=\"keyword\">struct</span> obj_layout *obj;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keyword\">id</span></span><br><span class=\"line\"><span class=\"built_in\">NSAllocateObject</span> (Class aClass, <span class=\"built_in\">NSUInteger</span> extraBytes, <span class=\"built_in\">NSZone</span> *zone)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">id</span>\tnew;</span><br><span class=\"line\">  <span class=\"keyword\">int</span>\tsize;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">NSCAssert</span>((!class_isMetaClass(aClass)), <span class=\"string\">@\"Bad class for new object\"</span>);</span><br><span class=\"line\">  size = class_getInstanceSize(aClass) + extraBytes + <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> obj_layout);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (zone == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      zone = <span class=\"built_in\">NSDefaultMallocZone</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  new = <span class=\"built_in\">NSZoneMalloc</span>(zone, size);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (new != <span class=\"literal\">nil</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      memset (new, <span class=\"number\">0</span>, size);</span><br><span class=\"line\">      new = (<span class=\"keyword\">id</span>)&amp;((obj)new)[<span class=\"number\">1</span>];</span><br><span class=\"line\">      object_setClass(new, aClass);</span><br><span class=\"line\">      AADD(aClass, new);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Don't bother doing this in a thread-safe way, because the cost of locking</span></span><br><span class=\"line\"><span class=\"comment\">   * will be a lot more than the cost of doing the same call in two threads.</span></span><br><span class=\"line\"><span class=\"comment\">   * The returned selector will persist and the runtime will ensure that both</span></span><br><span class=\"line\"><span class=\"comment\">   * calls return the same selector, so we don't need to bother doing it</span></span><br><span class=\"line\"><span class=\"comment\">   * ourselves.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"number\">0</span> == cxx_construct)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      cxx_construct = sel_registerName(<span class=\"string\">\".cxx_construct\"</span>);</span><br><span class=\"line\">      cxx_destruct = sel_registerName(<span class=\"string\">\".cxx_destruct\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  callCXXConstructors(aClass, new);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> new;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>retain操作<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">id</span>) <span class=\"keyword\">retain</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"built_in\">NSIncrementExtraRefCount</span>(<span class=\"keyword\">self</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span></span><br><span class=\"line\"><span class=\"built_in\">NSIncrementExtraRefCount</span>(<span class=\"keyword\">id</span> anObject)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"meta\">#if\tdefined(GSATOMICREAD)</span></span><br><span class=\"line\">  <span class=\"comment\">/* I've seen comments saying that some platforms only support up to</span></span><br><span class=\"line\"><span class=\"comment\">   * 24 bits in atomic locking, so raise an exception if we try to</span></span><br><span class=\"line\"><span class=\"comment\">   * go beyond 0xfffffe.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (GSAtomicIncrement((gsatomic_t)&amp;(((obj)anObject)[<span class=\"number\">-1</span>].retained))</span><br><span class=\"line\">    &gt; <span class=\"number\">0xfffffe</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      [<span class=\"built_in\">NSException</span> raise: <span class=\"built_in\">NSInternalInconsistencyException</span></span><br><span class=\"line\">        format: <span class=\"string\">@\"NSIncrementExtraRefCount() asked to increment too far\"</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"meta\">#else\t/* GSATOMICREAD */</span></span><br><span class=\"line\">  <span class=\"built_in\">NSLock</span> *theLock = GSAllocationLockForObject(anObject);</span><br><span class=\"line\"></span><br><span class=\"line\">  [theLock lock];</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (((obj)anObject)[<span class=\"number\">-1</span>].retained &gt; <span class=\"number\">0xfffffe</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      [theLock unlock];</span><br><span class=\"line\">      [<span class=\"built_in\">NSException</span> raise: <span class=\"built_in\">NSInternalInconsistencyException</span></span><br><span class=\"line\">        format: <span class=\"string\">@\"NSIncrementExtraRefCount() asked to increment too far\"</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ((obj)anObject)[<span class=\"number\">-1</span>].retained++;</span><br><span class=\"line\">  [theLock unlock];</span><br><span class=\"line\"><span class=\"meta\">#endif\t/* GSATOMICREAD */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>release操作<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">oneway</span> <span class=\"keyword\">void</span>) release</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">NSDecrementExtraRefCountWasZero</span>(<span class=\"keyword\">self</span>))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"><span class=\"meta\">#  ifdef OBJC_CAP_ARC</span></span><br><span class=\"line\">      objc_delete_weak_refs(<span class=\"keyword\">self</span>);</span><br><span class=\"line\"><span class=\"meta\">#  endif</span></span><br><span class=\"line\">      [<span class=\"keyword\">self</span> dealloc];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"built_in\">BOOL</span></span><br><span class=\"line\"><span class=\"built_in\">NSDecrementExtraRefCountWasZero</span>(<span class=\"keyword\">id</span> anObject)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (double_release_check_enabled)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"built_in\">NSUInteger</span> release_count;</span><br><span class=\"line\">      <span class=\"built_in\">NSUInteger</span> retain_count = [anObject retainCount];</span><br><span class=\"line\">      release_count = [autorelease_class autoreleaseCountForObject: anObject];</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (release_count &gt;= retain_count)</span><br><span class=\"line\">        [<span class=\"built_in\">NSException</span> raise: <span class=\"built_in\">NSGenericException</span></span><br><span class=\"line\">\t\t    format: <span class=\"string\">@\"Release would release object too many times.\"</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\"><span class=\"meta\">#if\tdefined(GSATOMICREAD)</span></span><br><span class=\"line\">    gsrefcount_t\tresult;</span><br><span class=\"line\"></span><br><span class=\"line\">    result = GSAtomicDecrement((gsatomic_t)&amp;(((obj)anObject)[<span class=\"number\">-1</span>].retained));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (result &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (result != <span class=\"number\">-1</span>)</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            [<span class=\"built_in\">NSException</span> raise: <span class=\"built_in\">NSInternalInconsistencyException</span></span><br><span class=\"line\">              format: <span class=\"string\">@\"NSDecrementExtraRefCount() decremented too far\"</span>];</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        <span class=\"comment\">/* The counter has become negative so it must have been zero.</span></span><br><span class=\"line\"><span class=\"comment\">         * We reset it and return YES ... in a correctly operating</span></span><br><span class=\"line\"><span class=\"comment\">         * process we know we can safely reset back to zero without</span></span><br><span class=\"line\"><span class=\"comment\">         * worrying about atomicity, since there can be no other</span></span><br><span class=\"line\"><span class=\"comment\">         * thread accessing the object (or its reference count would</span></span><br><span class=\"line\"><span class=\"comment\">         * have been greater than zero)</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        (((obj)anObject)[<span class=\"number\">-1</span>].retained) = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"><span class=\"meta\">#else\t/* GSATOMICREAD */</span></span><br><span class=\"line\">    <span class=\"built_in\">NSLock</span> *theLock = GSAllocationLockForObject(anObject);</span><br><span class=\"line\"></span><br><span class=\"line\">    [theLock lock];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (((obj)anObject)[<span class=\"number\">-1</span>].retained == <span class=\"number\">0</span>)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        [theLock unlock];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        ((obj)anObject)[<span class=\"number\">-1</span>].retained--;</span><br><span class=\"line\">        [theLock unlock];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"><span class=\"meta\">#endif\t/* GSATOMICREAD */</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>autorelease操作<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">id</span>) autorelease</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (double_release_check_enabled)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"built_in\">NSUInteger</span> release_count;</span><br><span class=\"line\">      <span class=\"built_in\">NSUInteger</span> retain_count = [<span class=\"keyword\">self</span> retainCount];</span><br><span class=\"line\">      release_count = [autorelease_class autoreleaseCountForObject:<span class=\"keyword\">self</span>];</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (release_count &gt; retain_count)</span><br><span class=\"line\">        [<span class=\"built_in\">NSException</span></span><br><span class=\"line\">\t  raise: <span class=\"built_in\">NSGenericException</span></span><br><span class=\"line\">\t  format: <span class=\"string\">@\"Autorelease would release object too many times.\\n\"</span></span><br><span class=\"line\">\t  <span class=\"string\">@\"%\"</span>PRIuPTR<span class=\"string\">\" release(s) versus %\"</span>PRIuPTR<span class=\"string\">\" retain(s)\"</span>,</span><br><span class=\"line\">\t  release_count, retain_count];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  (*autorelease_imp)(autorelease_class, autorelease_sel, <span class=\"keyword\">self</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>获取引用计数<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"built_in\">NSUInteger</span>) retainCount</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">NSExtraRefCount</span>(<span class=\"keyword\">self</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"built_in\">NSUInteger</span></span><br><span class=\"line\"><span class=\"built_in\">NSExtraRefCount</span>(<span class=\"keyword\">id</span> anObject)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ((obj)anObject)[<span class=\"number\">-1</span>].retained;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>对象释放<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span></span><br><span class=\"line\"><span class=\"built_in\">NSDeallocateObject</span>(<span class=\"keyword\">id</span> anObject)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  Class aClass = object_getClass(anObject);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ((anObject != <span class=\"literal\">nil</span>) &amp;&amp; !class_isMetaClass(aClass))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      obj\to = &amp;((obj)anObject)[<span class=\"number\">-1</span>];</span><br><span class=\"line\">      <span class=\"built_in\">NSZone</span>\t*z = <span class=\"built_in\">NSZoneFromPointer</span>(o);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* Call the default finalizer to handle C++ destructors.</span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\">      (*finalize_imp)(anObject, finalize_sel);</span><br><span class=\"line\"></span><br><span class=\"line\">      AREM(aClass, (<span class=\"keyword\">id</span>)anObject);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">NSZombieEnabled</span> == <span class=\"literal\">YES</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t  GSMakeZombie(anObject, aClass);</span><br><span class=\"line\">\t  <span class=\"keyword\">if</span> (<span class=\"built_in\">NSDeallocateZombies</span> == <span class=\"literal\">YES</span>)</span><br><span class=\"line\">\t    &#123;</span><br><span class=\"line\">\t      <span class=\"built_in\">NSZoneFree</span>(z, o);</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t  object_setClass((<span class=\"keyword\">id</span>)anObject, (Class)(<span class=\"keyword\">void</span>*)<span class=\"number\">0xdeadface</span>);</span><br><span class=\"line\">\t  <span class=\"built_in\">NSZoneFree</span>(z, o);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"苹果的引用计数\"><a href=\"#苹果的引用计数\" class=\"headerlink\" title=\"苹果的引用计数\"></a>苹果的引用计数</h2><p><img src=\"/2018/05/05/引用计数/appleRetainCount.png\" alt=\"\"></p>\n<h2 id=\"GUN的引用计数\"><a href=\"#GUN的引用计数\" class=\"headerlink\" title=\"GUN的引用计数\"></a>GUN的引用计数</h2><p><img src=\"/2018/05/05/引用计数/gunretainCount.png\" alt=\"\"></p>\n<p>分配内存<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (<span class=\"keyword\">id</span>) alloc</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [<span class=\"keyword\">self</span> allocWithZone: <span class=\"built_in\">NSDefaultMallocZone</span>()];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+ (<span class=\"keyword\">id</span>) allocWithZone: (<span class=\"built_in\">NSZone</span>*)z</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">NSAllocateObject</span> (<span class=\"keyword\">self</span>, <span class=\"number\">0</span>, z);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> obj_layout &#123;</span><br><span class=\"line\">  <span class=\"keyword\">char</span>\tpadding[__BIGGEST_ALIGNMENT__ - ((UNP % __BIGGEST_ALIGNMENT__)</span><br><span class=\"line\">    ? (UNP % __BIGGEST_ALIGNMENT__) : __BIGGEST_ALIGNMENT__)];</span><br><span class=\"line\">  gsrefcount_t\tretained;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span>\t<span class=\"keyword\">struct</span> obj_layout *obj;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keyword\">id</span></span><br><span class=\"line\"><span class=\"built_in\">NSAllocateObject</span> (Class aClass, <span class=\"built_in\">NSUInteger</span> extraBytes, <span class=\"built_in\">NSZone</span> *zone)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">id</span>\tnew;</span><br><span class=\"line\">  <span class=\"keyword\">int</span>\tsize;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">NSCAssert</span>((!class_isMetaClass(aClass)), <span class=\"string\">@\"Bad class for new object\"</span>);</span><br><span class=\"line\">  size = class_getInstanceSize(aClass) + extraBytes + <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> obj_layout);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (zone == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      zone = <span class=\"built_in\">NSDefaultMallocZone</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  new = <span class=\"built_in\">NSZoneMalloc</span>(zone, size);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (new != <span class=\"literal\">nil</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      memset (new, <span class=\"number\">0</span>, size);</span><br><span class=\"line\">      new = (<span class=\"keyword\">id</span>)&amp;((obj)new)[<span class=\"number\">1</span>];</span><br><span class=\"line\">      object_setClass(new, aClass);</span><br><span class=\"line\">      AADD(aClass, new);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Don't bother doing this in a thread-safe way, because the cost of locking</span></span><br><span class=\"line\"><span class=\"comment\">   * will be a lot more than the cost of doing the same call in two threads.</span></span><br><span class=\"line\"><span class=\"comment\">   * The returned selector will persist and the runtime will ensure that both</span></span><br><span class=\"line\"><span class=\"comment\">   * calls return the same selector, so we don't need to bother doing it</span></span><br><span class=\"line\"><span class=\"comment\">   * ourselves.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"number\">0</span> == cxx_construct)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      cxx_construct = sel_registerName(<span class=\"string\">\".cxx_construct\"</span>);</span><br><span class=\"line\">      cxx_destruct = sel_registerName(<span class=\"string\">\".cxx_destruct\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  callCXXConstructors(aClass, new);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> new;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>retain操作<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">id</span>) <span class=\"keyword\">retain</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"built_in\">NSIncrementExtraRefCount</span>(<span class=\"keyword\">self</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span></span><br><span class=\"line\"><span class=\"built_in\">NSIncrementExtraRefCount</span>(<span class=\"keyword\">id</span> anObject)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"meta\">#if\tdefined(GSATOMICREAD)</span></span><br><span class=\"line\">  <span class=\"comment\">/* I've seen comments saying that some platforms only support up to</span></span><br><span class=\"line\"><span class=\"comment\">   * 24 bits in atomic locking, so raise an exception if we try to</span></span><br><span class=\"line\"><span class=\"comment\">   * go beyond 0xfffffe.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (GSAtomicIncrement((gsatomic_t)&amp;(((obj)anObject)[<span class=\"number\">-1</span>].retained))</span><br><span class=\"line\">    &gt; <span class=\"number\">0xfffffe</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      [<span class=\"built_in\">NSException</span> raise: <span class=\"built_in\">NSInternalInconsistencyException</span></span><br><span class=\"line\">        format: <span class=\"string\">@\"NSIncrementExtraRefCount() asked to increment too far\"</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"meta\">#else\t/* GSATOMICREAD */</span></span><br><span class=\"line\">  <span class=\"built_in\">NSLock</span> *theLock = GSAllocationLockForObject(anObject);</span><br><span class=\"line\"></span><br><span class=\"line\">  [theLock lock];</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (((obj)anObject)[<span class=\"number\">-1</span>].retained &gt; <span class=\"number\">0xfffffe</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      [theLock unlock];</span><br><span class=\"line\">      [<span class=\"built_in\">NSException</span> raise: <span class=\"built_in\">NSInternalInconsistencyException</span></span><br><span class=\"line\">        format: <span class=\"string\">@\"NSIncrementExtraRefCount() asked to increment too far\"</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ((obj)anObject)[<span class=\"number\">-1</span>].retained++;</span><br><span class=\"line\">  [theLock unlock];</span><br><span class=\"line\"><span class=\"meta\">#endif\t/* GSATOMICREAD */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>release操作<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">oneway</span> <span class=\"keyword\">void</span>) release</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">NSDecrementExtraRefCountWasZero</span>(<span class=\"keyword\">self</span>))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"><span class=\"meta\">#  ifdef OBJC_CAP_ARC</span></span><br><span class=\"line\">      objc_delete_weak_refs(<span class=\"keyword\">self</span>);</span><br><span class=\"line\"><span class=\"meta\">#  endif</span></span><br><span class=\"line\">      [<span class=\"keyword\">self</span> dealloc];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"built_in\">BOOL</span></span><br><span class=\"line\"><span class=\"built_in\">NSDecrementExtraRefCountWasZero</span>(<span class=\"keyword\">id</span> anObject)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (double_release_check_enabled)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"built_in\">NSUInteger</span> release_count;</span><br><span class=\"line\">      <span class=\"built_in\">NSUInteger</span> retain_count = [anObject retainCount];</span><br><span class=\"line\">      release_count = [autorelease_class autoreleaseCountForObject: anObject];</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (release_count &gt;= retain_count)</span><br><span class=\"line\">        [<span class=\"built_in\">NSException</span> raise: <span class=\"built_in\">NSGenericException</span></span><br><span class=\"line\">\t\t    format: <span class=\"string\">@\"Release would release object too many times.\"</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\"><span class=\"meta\">#if\tdefined(GSATOMICREAD)</span></span><br><span class=\"line\">    gsrefcount_t\tresult;</span><br><span class=\"line\"></span><br><span class=\"line\">    result = GSAtomicDecrement((gsatomic_t)&amp;(((obj)anObject)[<span class=\"number\">-1</span>].retained));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (result &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (result != <span class=\"number\">-1</span>)</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            [<span class=\"built_in\">NSException</span> raise: <span class=\"built_in\">NSInternalInconsistencyException</span></span><br><span class=\"line\">              format: <span class=\"string\">@\"NSDecrementExtraRefCount() decremented too far\"</span>];</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        <span class=\"comment\">/* The counter has become negative so it must have been zero.</span></span><br><span class=\"line\"><span class=\"comment\">         * We reset it and return YES ... in a correctly operating</span></span><br><span class=\"line\"><span class=\"comment\">         * process we know we can safely reset back to zero without</span></span><br><span class=\"line\"><span class=\"comment\">         * worrying about atomicity, since there can be no other</span></span><br><span class=\"line\"><span class=\"comment\">         * thread accessing the object (or its reference count would</span></span><br><span class=\"line\"><span class=\"comment\">         * have been greater than zero)</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        (((obj)anObject)[<span class=\"number\">-1</span>].retained) = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"><span class=\"meta\">#else\t/* GSATOMICREAD */</span></span><br><span class=\"line\">    <span class=\"built_in\">NSLock</span> *theLock = GSAllocationLockForObject(anObject);</span><br><span class=\"line\"></span><br><span class=\"line\">    [theLock lock];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (((obj)anObject)[<span class=\"number\">-1</span>].retained == <span class=\"number\">0</span>)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        [theLock unlock];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        ((obj)anObject)[<span class=\"number\">-1</span>].retained--;</span><br><span class=\"line\">        [theLock unlock];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"><span class=\"meta\">#endif\t/* GSATOMICREAD */</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>autorelease操作<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">id</span>) autorelease</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (double_release_check_enabled)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"built_in\">NSUInteger</span> release_count;</span><br><span class=\"line\">      <span class=\"built_in\">NSUInteger</span> retain_count = [<span class=\"keyword\">self</span> retainCount];</span><br><span class=\"line\">      release_count = [autorelease_class autoreleaseCountForObject:<span class=\"keyword\">self</span>];</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (release_count &gt; retain_count)</span><br><span class=\"line\">        [<span class=\"built_in\">NSException</span></span><br><span class=\"line\">\t  raise: <span class=\"built_in\">NSGenericException</span></span><br><span class=\"line\">\t  format: <span class=\"string\">@\"Autorelease would release object too many times.\\n\"</span></span><br><span class=\"line\">\t  <span class=\"string\">@\"%\"</span>PRIuPTR<span class=\"string\">\" release(s) versus %\"</span>PRIuPTR<span class=\"string\">\" retain(s)\"</span>,</span><br><span class=\"line\">\t  release_count, retain_count];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  (*autorelease_imp)(autorelease_class, autorelease_sel, <span class=\"keyword\">self</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>获取引用计数<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"built_in\">NSUInteger</span>) retainCount</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">NSExtraRefCount</span>(<span class=\"keyword\">self</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"built_in\">NSUInteger</span></span><br><span class=\"line\"><span class=\"built_in\">NSExtraRefCount</span>(<span class=\"keyword\">id</span> anObject)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ((obj)anObject)[<span class=\"number\">-1</span>].retained;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>对象释放<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span></span><br><span class=\"line\"><span class=\"built_in\">NSDeallocateObject</span>(<span class=\"keyword\">id</span> anObject)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  Class aClass = object_getClass(anObject);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ((anObject != <span class=\"literal\">nil</span>) &amp;&amp; !class_isMetaClass(aClass))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      obj\to = &amp;((obj)anObject)[<span class=\"number\">-1</span>];</span><br><span class=\"line\">      <span class=\"built_in\">NSZone</span>\t*z = <span class=\"built_in\">NSZoneFromPointer</span>(o);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* Call the default finalizer to handle C++ destructors.</span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\">      (*finalize_imp)(anObject, finalize_sel);</span><br><span class=\"line\"></span><br><span class=\"line\">      AREM(aClass, (<span class=\"keyword\">id</span>)anObject);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">NSZombieEnabled</span> == <span class=\"literal\">YES</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t  GSMakeZombie(anObject, aClass);</span><br><span class=\"line\">\t  <span class=\"keyword\">if</span> (<span class=\"built_in\">NSDeallocateZombies</span> == <span class=\"literal\">YES</span>)</span><br><span class=\"line\">\t    &#123;</span><br><span class=\"line\">\t      <span class=\"built_in\">NSZoneFree</span>(z, o);</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t  object_setClass((<span class=\"keyword\">id</span>)anObject, (Class)(<span class=\"keyword\">void</span>*)<span class=\"number\">0xdeadface</span>);</span><br><span class=\"line\">\t  <span class=\"built_in\">NSZoneFree</span>(z, o);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n"}],"PostAsset":[{"_id":"source/_posts/associations/associations.png","slug":"associations.png","post":"cjpj8w0um00005guqv1yrzgof","modified":0,"renderable":0},{"_id":"source/_posts/duck/duck.gif","slug":"duck.gif","post":"cjpj8w0v100045guqjx3joqal","modified":0,"renderable":0},{"_id":"source/_posts/内存分配/cmem.png","slug":"cmem.png","post":"cjpj8w0vh000e5guqbthtgm7u","modified":0,"renderable":0},{"_id":"source/_posts/http/http.png","slug":"http.png","post":"cjpj8w0v300065guqwcmkw68v","modified":0,"renderable":0},{"_id":"source/_posts/swift循环引用/swiftUnown.png","slug":"swiftUnown.png","post":"cjpj8w0vf000c5guq79vq7w9u","modified":0,"renderable":0},{"_id":"source/_posts/runtime/instance&class&metaclass.png","slug":"instance&class&metaclass.png","post":"cjpj8w0vc000a5guqvw309cmh","modified":0,"renderable":0},{"_id":"source/_posts/runtime/isa&superclass.png","slug":"isa&superclass.png","post":"cjpj8w0vc000a5guqvw309cmh","modified":0,"renderable":0},{"_id":"source/_posts/内存分配/cms.png","slug":"cms.png","post":"cjpj8w0vh000e5guqbthtgm7u","modified":0,"renderable":0},{"_id":"source/_posts/引用计数/appleRetainCount.png","slug":"appleRetainCount.png","post":"cjpj8w0vj000g5guq1nb28t4a","modified":0,"renderable":0},{"_id":"source/_posts/引用计数/gunretainCount.png","slug":"gunretainCount.png","post":"cjpj8w0vj000g5guq1nb28t4a","modified":0,"renderable":0},{"_id":"source/_posts/duck/create.gif","slug":"create.gif","post":"cjpj8w0v100045guqjx3joqal","modified":0,"renderable":0},{"_id":"source/_posts/duck/duck.zip","slug":"duck.zip","post":"cjpj8w0v100045guqjx3joqal","modified":0,"renderable":0},{"_id":"source/_posts/autoreleasePoll/autoreleasepoll0.png","slug":"autoreleasepoll0.png","post":"cjpj8w0ut00015guqwtd4rtzz","modified":0,"renderable":0},{"_id":"source/_posts/autoreleasePoll/autoreleasepoll1.png","slug":"autoreleasepoll1.png","post":"cjpj8w0ut00015guqwtd4rtzz","modified":0,"renderable":0},{"_id":"source/_posts/autoreleasePoll/autoreleasepoll2.png","slug":"autoreleasepoll2.png","post":"cjpj8w0ut00015guqwtd4rtzz","modified":0,"renderable":0},{"_id":"source/_posts/autoreleasePoll/autoreleasepoll3.png","slug":"autoreleasepoll3.png","post":"cjpj8w0ut00015guqwtd4rtzz","modified":0,"renderable":0},{"_id":"source/_posts/c-server/broser.png","slug":"broser.png","post":"cjpj8w0uv00025guqcmzbac6w","modified":0,"renderable":0},{"_id":"source/_posts/c-server/c_server.zip","slug":"c_server.zip","post":"cjpj8w0uv00025guqcmzbac6w","modified":0,"renderable":0},{"_id":"source/_posts/c-server/terminal.png","slug":"terminal.png","post":"cjpj8w0uv00025guqcmzbac6w","modified":0,"renderable":0},{"_id":"source/_posts/c-server/wireshark.png","slug":"wireshark.png","post":"cjpj8w0uv00025guqcmzbac6w","modified":0,"renderable":0},{"_id":"source/_posts/frame-bounds/frame-bounds0.png","slug":"frame-bounds0.png","post":"cjpj8w0v200055guqli3707r9","modified":0,"renderable":0},{"_id":"source/_posts/frame-bounds/frame-bounds1.png","slug":"frame-bounds1.png","post":"cjpj8w0v200055guqli3707r9","modified":0,"renderable":0},{"_id":"source/_posts/frame-bounds/frame-bounds2.png","slug":"frame-bounds2.png","post":"cjpj8w0v200055guqli3707r9","modified":0,"renderable":0},{"_id":"source/_posts/frame-bounds/frame-bounds3.png","slug":"frame-bounds3.png","post":"cjpj8w0v200055guqli3707r9","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[],"Tag":[]}}